{
  "openapi": "3.0.3",
  "info": {
    "title": "Text Features",
    "version": "2.0",
    "description": "Your project description"
  },
  "paths": {
    "/text/ai_detection": {
      "post": {
        "operationId": "text_ai_detection_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**originalityai**|`v1`|0.01 (per 400 char)|400 char\n|**sapling**|`v1`|5.0 (per 1000000 char)|1000 char\n|**winstonai**|`v2`|14.0 (per 1000000 char)|1 char\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Chinese**|`zh`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**French**|`fr`|\n|**German**|`de`|\n|**Spanish**|`es`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (China)**|`zh-CN`|\n\n</details>",
        "summary": "AI Content Detection",
        "tags": [
          "Ai Detection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "provider_params": {
                    "type": "string",
                    "description": "\nParameters specific to the provider that you want to send along the request.\n\nit should take a *provider* name as key and an object of parameters as value.\n\nExample:\n\n    {\n      \"deepgram\": {\n        \"filler_words\": true,\n        \"smart_format\": true,\n        \"callback\": \"https://webhook.site/0000\"\n      },\n      \"assembly\": {\n        \"webhook_url\": \"https://webhook.site/0000\"\n      }\n    }\n\nPlease refer to the documentation of each provider to see which parameters to send.\n"
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "sapling,winstonai,originalityai",
                    "text": "The panther, also known as the black panther, is a magnificent and enigmatic creature that captivates the imagination of many. It is not a distinct species itself, but rather a melanistic variant of leopards and jaguars. The mesmerizing black coat of the panther is a result of a genetic mutation that increases the production of dark pigment, melanin.         Panthers are highly adaptable predators, found primarily in dense forests and jungles across Africa, Asia, and the Americas. Their stealthy nature and exceptional agility make them formidable hunters. They are solitary creatures, preferring to roam alone in their vast territories, which can span over a hundred square miles.         Equipped with incredible strength and sharp retractable claws, panthers are skilled climbers and swimmers. Their keen senses, including sharp vision and acute hearing, aid them in locating prey, often stalking their victims from the cover of trees or thick underbrush before launching a precise and powerful attack.         The diet of a panther consists mainly of deer, wild boar, and smaller mammals. However, they are opportunistic hunters and can also target livestock and domestic animals in areas where their habitats overlap with human settlements. Unfortunately, this sometimes leads to conflicts with humans, resulting in the panther being perceived as a threat.         Despite their association with darkness and mystery, panthers play a vital role in maintaining the balance of ecosystems. As apex predators, they help control populations of herbivores, preventing overgrazing and maintaining healthy prey dynamics.         Conservation efforts are crucial to the survival of panther populations worldwide. Habitat loss, poaching, and illegal wildlife trade pose significant threats to their existence. Various organizations and governments are working tirelessly to protect these magnificent creatures through initiatives such as establishing protected areas, promoting sustainable land use practices, and raising awareness about their importance in the natural world."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "sapling": {
                      "allOf": [
                        {
                          "properties": {
                            "ai_score": {
                              "title": "Ai Score",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "prediction": {
                                    "title": "Prediction",
                                    "type": "string"
                                  },
                                  "ai_score": {
                                    "title": "Ai Score",
                                    "type": "integer"
                                  },
                                  "ai_score_detail": {
                                    "title": "Ai Score Detail",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "text",
                                  "prediction",
                                  "ai_score",
                                  "ai_score_detail"
                                ],
                                "title": "AiDetectionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "ai_score",
                            "status"
                          ],
                          "title": "textai_detectionAiDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "winstonai": {
                      "allOf": [
                        {
                          "properties": {
                            "ai_score": {
                              "title": "Ai Score",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "prediction": {
                                    "title": "Prediction",
                                    "type": "string"
                                  },
                                  "ai_score": {
                                    "title": "Ai Score",
                                    "type": "integer"
                                  },
                                  "ai_score_detail": {
                                    "title": "Ai Score Detail",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "text",
                                  "prediction",
                                  "ai_score",
                                  "ai_score_detail"
                                ],
                                "title": "AiDetectionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "ai_score",
                            "status"
                          ],
                          "title": "textai_detectionAiDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "originalityai": {
                      "allOf": [
                        {
                          "properties": {
                            "ai_score": {
                              "title": "Ai Score",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "prediction": {
                                    "title": "Prediction",
                                    "type": "string"
                                  },
                                  "ai_score": {
                                    "title": "Ai Score",
                                    "type": "integer"
                                  },
                                  "ai_score_detail": {
                                    "title": "Ai Score Detail",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "text",
                                  "prediction",
                                  "ai_score",
                                  "ai_score_detail"
                                ],
                                "title": "AiDetectionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "ai_score",
                            "status"
                          ],
                          "title": "textai_detectionAiDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textai_detectionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "sapling": {
                        "ai_score": 0.970070276931997,
                        "items": [
                          {
                            "text": "The panther, also known as the black panther, is a magnificent and enigmatic creature that captivates the imagination of many.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9990817176020741,
                            "ai_score_detail": 0.9990817176020741
                          },
                          {
                            "text": "It is not a distinct species itself, but rather a melanistic variant of leopards and jaguars.",
                            "prediction": "ai-generated",
                            "ai_score": 0.7623477056593153,
                            "ai_score_detail": 0.7623477056593153
                          },
                          {
                            "text": "The mesmerizing black coat of the panther is a result of a genetic mutation that increases the production of dark pigment, melanin.",
                            "prediction": "original",
                            "ai_score": 0.012890975241315883,
                            "ai_score_detail": 0.012890975241315883
                          },
                          {
                            "text": "Panthers are highly adaptable predators, found primarily in dense forests and jungles across Africa, Asia, and the Americas.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9241208913655489,
                            "ai_score_detail": 0.9241208913655489
                          },
                          {
                            "text": "Their stealthy nature and exceptional agility make them formidable hunters.",
                            "prediction": "original",
                            "ai_score": 3.0645117310434955e-7,
                            "ai_score_detail": 3.0645117310434955e-7
                          },
                          {
                            "text": "They are solitary creatures, preferring to roam alone in their vast territories, which can span over a hundred square miles.",
                            "prediction": "ai-generated",
                            "ai_score": 0.98354284228347,
                            "ai_score_detail": 0.98354284228347
                          },
                          {
                            "text": "Equipped with incredible strength and sharp retractable claws, panthers are skilled climbers and swimmers.",
                            "prediction": "original",
                            "ai_score": 0.2026922923822072,
                            "ai_score_detail": 0.2026922923822072
                          },
                          {
                            "text": "Their keen senses, including sharp vision and acute hearing, aid them in locating prey, often stalking their victims from the cover of trees or thick underbrush before launching a precise and powerful attack.",
                            "prediction": "original",
                            "ai_score": 0.2140626025123451,
                            "ai_score_detail": 0.2140626025123451
                          },
                          {
                            "text": "The diet of a panther consists mainly of deer, wild boar, and smaller mammals.",
                            "prediction": "original",
                            "ai_score": 0.37921425697733424,
                            "ai_score_detail": 0.37921425697733424
                          },
                          {
                            "text": "However, they are opportunistic hunters and can also target livestock and domestic animals in areas where their habitats overlap with human settlements.",
                            "prediction": "ai-generated",
                            "ai_score": 0.5961050762132343,
                            "ai_score_detail": 0.5961050762132343
                          }
                        ],
                        "cost": 0
                      },
                      "winstonai": {
                        "ai_score": 0.9999,
                        "items": [
                          {
                            "text": "The panther, also known as the black panther, is a magnificent and enigmatic creature that captivates the imagination of many. It is not a distinct species itself, but rather a melanistic variant of leopards and jaguars. The mesmerizing black coat of the panther is a result of a genetic mutation that increases the production of dark pigment, melanin.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9968,
                            "ai_score_detail": 0.9968
                          },
                          {
                            "text": "Panthers are highly adaptable predators, found primarily in dense forests and jungles across Africa, Asia, and the Americas. Their stealthy nature and exceptional agility make them formidable hunters. They are solitary creatures, preferring to roam alone in their vast territories, which can span over a hundred square miles.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9997,
                            "ai_score_detail": 0.9997
                          },
                          {
                            "text": "Equipped with incredible strength and sharp retractable claws, panthers are skilled climbers and swimmers. Their keen senses, including sharp vision and acute hearing, aid them in locating prey, often stalking their victims from the cover of trees or thick underbrush before launching a precise and powerful attack. The diet of a panther consists mainly of deer, wild boar, and smaller mammals.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9998,
                            "ai_score_detail": 0.9998
                          },
                          {
                            "text": "However, they are opportunistic hunters and can also target livestock and domestic animals in areas where their habitats overlap with human settlements. Unfortunately, this sometimes leads to conflicts with humans, resulting in the panther being perceived as a threat.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9994,
                            "ai_score_detail": 0.9994
                          },
                          {
                            "text": "Despite their association with darkness and mystery, panthers play a vital role in maintaining the balance of ecosystems. As apex predators, they help control populations of herbivores, preventing overgrazing and maintaining healthy prey dynamics. Conservation efforts are crucial to the survival of panther populations worldwide.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9999,
                            "ai_score_detail": 0.9999
                          },
                          {
                            "text": "Habitat loss, poaching, and illegal wildlife trade pose significant threats to their existence. Various organizations and governments are working tirelessly to protect these magnificent creatures through initiatives such as establishing protected areas, promoting sustainable land use practices, and raising awareness about their importance in the natural world.",
                            "prediction": "ai-generated",
                            "ai_score": 0.9999,
                            "ai_score_detail": 0.9999
                          }
                        ],
                        "cost": 0
                      },
                      "originalityai": {
                        "ai_score": 1,
                        "items": [
                          {
                            "text": "The panther, also known as the black panther, is a magnificent and enigmatic creature that captivates the imagination of many. It is not a distinct species itself, but rather a melanistic variant of leopards and jaguars. The mesmerizing black coat of the panther is a result of a genetic mutation that increases the production of dark pigment, melanin.         Panthers are highly adaptable predators, found primarily in dense forests and jungles across Africa, Asia, and the Americas. Their stealthy nature and exceptional agility make them formidable hunters. They are solitary creatures, preferring to roam alone in their vast territories, which can span over a hundred square miles.         Equipped with incredible strength and sharp retractable claws, panthers are skilled climbers and swimmers. Their keen senses, including sharp vision and acute hearing, aid them in locating prey, often stalking their victims from the cover of trees or thick underbrush before launching a precise and powerful attack.         The diet of a panther consists mainly of deer, wild boar, and smaller mammals. However, they are opportunistic hunters and can also target livestock and domestic animals in areas where their habitats overlap with human settlements. Unfortunately, this sometimes leads to conflicts with humans, resulting in the panther being perceived as a threat.         Despite their association with darkness and mystery, panthers play a vital role in maintaining the balance of ecosystems. As apex predators, they help control populations of herbivores, preventing overgrazing and maintaining healthy prey dynamics.         Conservation efforts are crucial to the survival of panther populations worldwide. Habitat loss, poaching, and illegal wildlife trade pose significant threats to their existence. Various organizations and governments are working tirelessly to protect these magnificent creatures through initiatives such as establishing protected areas, promoting sustainable land use practices, and raising awareness about their importance in the natural world.",
                            "prediction": "ai-generated",
                            "ai_score": 1,
                            "ai_score_detail": 1
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/anonymization": {
      "post": {
        "operationId": "text_anonymization_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**emvista**|`v1.0`|3.0 (per 1000000 char)|1 char\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char\n|**microsoft**|`v3.1`|0.25 (per 1000000 char)|1000 char\n|**privateai**|`v3`|5.0 (per 1000000 char)|100 char\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Afrikaans**|`af`|\n|**Arabic**|`ar`|\n|**Bambara**|`bm`|\n|**Belarusian**|`be`|\n|**Bengali**|`bn`|\n|**Bulgarian**|`bg`|\n|**Burmese**|`my`|\n|**Catalan**|`ca`|\n|**Chinese**|`zh`|\n|**Croatian**|`hr`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**Estonian**|`et`|\n|**Finnish**|`fi`|\n|**French**|`fr`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Hungarian**|`hu`|\n|**Icelandic**|`is`|\n|**Indonesian**|`id`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Khmer**|`km`|\n|**Korean**|`ko`|\n|**Latvian**|`lv`|\n|**Lithuanian**|`lt`|\n|**Luxembourgish**|`lb`|\n|**Malay (macrolanguage)**|`ms`|\n|**Modern Greek (1453-)**|`el`|\n|**Norwegian**|`no`|\n|**Norwegian Bokmål**|`nb`|\n|**Panjabi**|`pa`|\n|**Persian**|`fa`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Romanian**|`ro`|\n|**Russian**|`ru`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**Spanish**|`es`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swedish**|`sv`|\n|**Tagalog**|`tl`|\n|**Tamil**|`ta`|\n|**Thai**|`th`|\n|**Turkish**|`tr`|\n|**Ukrainian**|`uk`|\n|**Vietnamese**|`vi`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (Simplified)**|`zh-Hans`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**Portuguese (Brazil)**|`pt-BR`|\n|**Portuguese (Portugal)**|`pt-PT`|\n\n</details>",
        "summary": "Anonymization",
        "tags": [
          "Anonymization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "privateai,amazon,emvista,openai,microsoft",
                    "language": "en",
                    "text": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "oneai": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "entities": {
                              "items": {
                                "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                                "properties": {
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "exclusiveMinimum": true,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "CreditCard",
                                          "CardExpiry",
                                          "BankAccountNumber",
                                          "BankRoutingNumber",
                                          "SwiftCode",
                                          "TaxIdentificationNumber"
                                        ],
                                        "title": "FinancialInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Name",
                                          "Age",
                                          "Email",
                                          "Phone",
                                          "PersonType",
                                          "Gender"
                                        ],
                                        "title": "PersonalInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SocialSecurityNumber",
                                          "NationalIdentificationNumber",
                                          "NationalHealthService",
                                          "ResidentRegistrationNumber",
                                          "DriverLicenseNumber",
                                          "PassportNumber"
                                        ],
                                        "title": "IdentificationNumbersSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "URL",
                                          "IP",
                                          "MAC",
                                          "VehicleIdentificationNumber",
                                          "LicensePlate",
                                          "VoterNumber",
                                          "AWSKeys",
                                          "AzureKeys",
                                          "Password"
                                        ],
                                        "title": "MiscellaneousSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "CompanyName",
                                          "CompanyNumber",
                                          "BuisnessNumber"
                                        ],
                                        "title": "OrganizationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Date",
                                          "Time",
                                          "DateTime",
                                          "Duration"
                                        ],
                                        "title": "DateAndTimeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Address",
                                          "Location"
                                        ],
                                        "title": "LocationInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "original_label": {
                                    "minLength": 1,
                                    "title": "Original Label",
                                    "type": "string"
                                  },
                                  "content": {
                                    "minLength": 1,
                                    "title": "Content",
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Confidence Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "offset",
                                  "length",
                                  "category",
                                  "subcategory",
                                  "original_label",
                                  "content",
                                  "confidence_score"
                                ],
                                "title": "AnonymizationEntity",
                                "type": "object"
                              },
                              "title": "Entities",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textanonymizationAnonymizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "privateai": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "entities": {
                              "items": {
                                "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                                "properties": {
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "exclusiveMinimum": true,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "CreditCard",
                                          "CardExpiry",
                                          "BankAccountNumber",
                                          "BankRoutingNumber",
                                          "SwiftCode",
                                          "TaxIdentificationNumber"
                                        ],
                                        "title": "FinancialInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Name",
                                          "Age",
                                          "Email",
                                          "Phone",
                                          "PersonType",
                                          "Gender"
                                        ],
                                        "title": "PersonalInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SocialSecurityNumber",
                                          "NationalIdentificationNumber",
                                          "NationalHealthService",
                                          "ResidentRegistrationNumber",
                                          "DriverLicenseNumber",
                                          "PassportNumber"
                                        ],
                                        "title": "IdentificationNumbersSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "URL",
                                          "IP",
                                          "MAC",
                                          "VehicleIdentificationNumber",
                                          "LicensePlate",
                                          "VoterNumber",
                                          "AWSKeys",
                                          "AzureKeys",
                                          "Password"
                                        ],
                                        "title": "MiscellaneousSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "CompanyName",
                                          "CompanyNumber",
                                          "BuisnessNumber"
                                        ],
                                        "title": "OrganizationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Date",
                                          "Time",
                                          "DateTime",
                                          "Duration"
                                        ],
                                        "title": "DateAndTimeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Address",
                                          "Location"
                                        ],
                                        "title": "LocationInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "original_label": {
                                    "minLength": 1,
                                    "title": "Original Label",
                                    "type": "string"
                                  },
                                  "content": {
                                    "minLength": 1,
                                    "title": "Content",
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Confidence Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "offset",
                                  "length",
                                  "category",
                                  "subcategory",
                                  "original_label",
                                  "content",
                                  "confidence_score"
                                ],
                                "title": "AnonymizationEntity",
                                "type": "object"
                              },
                              "title": "Entities",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textanonymizationAnonymizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "emvista": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "entities": {
                              "items": {
                                "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                                "properties": {
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "exclusiveMinimum": true,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "CreditCard",
                                          "CardExpiry",
                                          "BankAccountNumber",
                                          "BankRoutingNumber",
                                          "SwiftCode",
                                          "TaxIdentificationNumber"
                                        ],
                                        "title": "FinancialInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Name",
                                          "Age",
                                          "Email",
                                          "Phone",
                                          "PersonType",
                                          "Gender"
                                        ],
                                        "title": "PersonalInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SocialSecurityNumber",
                                          "NationalIdentificationNumber",
                                          "NationalHealthService",
                                          "ResidentRegistrationNumber",
                                          "DriverLicenseNumber",
                                          "PassportNumber"
                                        ],
                                        "title": "IdentificationNumbersSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "URL",
                                          "IP",
                                          "MAC",
                                          "VehicleIdentificationNumber",
                                          "LicensePlate",
                                          "VoterNumber",
                                          "AWSKeys",
                                          "AzureKeys",
                                          "Password"
                                        ],
                                        "title": "MiscellaneousSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "CompanyName",
                                          "CompanyNumber",
                                          "BuisnessNumber"
                                        ],
                                        "title": "OrganizationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Date",
                                          "Time",
                                          "DateTime",
                                          "Duration"
                                        ],
                                        "title": "DateAndTimeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Address",
                                          "Location"
                                        ],
                                        "title": "LocationInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "original_label": {
                                    "minLength": 1,
                                    "title": "Original Label",
                                    "type": "string"
                                  },
                                  "content": {
                                    "minLength": 1,
                                    "title": "Content",
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Confidence Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "offset",
                                  "length",
                                  "category",
                                  "subcategory",
                                  "original_label",
                                  "content",
                                  "confidence_score"
                                ],
                                "title": "AnonymizationEntity",
                                "type": "object"
                              },
                              "title": "Entities",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textanonymizationAnonymizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "entities": {
                              "items": {
                                "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                                "properties": {
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "exclusiveMinimum": true,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "CreditCard",
                                          "CardExpiry",
                                          "BankAccountNumber",
                                          "BankRoutingNumber",
                                          "SwiftCode",
                                          "TaxIdentificationNumber"
                                        ],
                                        "title": "FinancialInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Name",
                                          "Age",
                                          "Email",
                                          "Phone",
                                          "PersonType",
                                          "Gender"
                                        ],
                                        "title": "PersonalInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SocialSecurityNumber",
                                          "NationalIdentificationNumber",
                                          "NationalHealthService",
                                          "ResidentRegistrationNumber",
                                          "DriverLicenseNumber",
                                          "PassportNumber"
                                        ],
                                        "title": "IdentificationNumbersSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "URL",
                                          "IP",
                                          "MAC",
                                          "VehicleIdentificationNumber",
                                          "LicensePlate",
                                          "VoterNumber",
                                          "AWSKeys",
                                          "AzureKeys",
                                          "Password"
                                        ],
                                        "title": "MiscellaneousSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "CompanyName",
                                          "CompanyNumber",
                                          "BuisnessNumber"
                                        ],
                                        "title": "OrganizationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Date",
                                          "Time",
                                          "DateTime",
                                          "Duration"
                                        ],
                                        "title": "DateAndTimeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Address",
                                          "Location"
                                        ],
                                        "title": "LocationInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "original_label": {
                                    "minLength": 1,
                                    "title": "Original Label",
                                    "type": "string"
                                  },
                                  "content": {
                                    "minLength": 1,
                                    "title": "Content",
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Confidence Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "offset",
                                  "length",
                                  "category",
                                  "subcategory",
                                  "original_label",
                                  "content",
                                  "confidence_score"
                                ],
                                "title": "AnonymizationEntity",
                                "type": "object"
                              },
                              "title": "Entities",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textanonymizationAnonymizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "entities": {
                              "items": {
                                "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                                "properties": {
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "exclusiveMinimum": true,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "CreditCard",
                                          "CardExpiry",
                                          "BankAccountNumber",
                                          "BankRoutingNumber",
                                          "SwiftCode",
                                          "TaxIdentificationNumber"
                                        ],
                                        "title": "FinancialInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Name",
                                          "Age",
                                          "Email",
                                          "Phone",
                                          "PersonType",
                                          "Gender"
                                        ],
                                        "title": "PersonalInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SocialSecurityNumber",
                                          "NationalIdentificationNumber",
                                          "NationalHealthService",
                                          "ResidentRegistrationNumber",
                                          "DriverLicenseNumber",
                                          "PassportNumber"
                                        ],
                                        "title": "IdentificationNumbersSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "URL",
                                          "IP",
                                          "MAC",
                                          "VehicleIdentificationNumber",
                                          "LicensePlate",
                                          "VoterNumber",
                                          "AWSKeys",
                                          "AzureKeys",
                                          "Password"
                                        ],
                                        "title": "MiscellaneousSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "CompanyName",
                                          "CompanyNumber",
                                          "BuisnessNumber"
                                        ],
                                        "title": "OrganizationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Date",
                                          "Time",
                                          "DateTime",
                                          "Duration"
                                        ],
                                        "title": "DateAndTimeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Address",
                                          "Location"
                                        ],
                                        "title": "LocationInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "original_label": {
                                    "minLength": 1,
                                    "title": "Original Label",
                                    "type": "string"
                                  },
                                  "content": {
                                    "minLength": 1,
                                    "title": "Content",
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Confidence Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "offset",
                                  "length",
                                  "category",
                                  "subcategory",
                                  "original_label",
                                  "content",
                                  "confidence_score"
                                ],
                                "title": "AnonymizationEntity",
                                "type": "object"
                              },
                              "title": "Entities",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textanonymizationAnonymizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "entities": {
                              "items": {
                                "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                                "properties": {
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "exclusiveMinimum": true,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "CreditCard",
                                          "CardExpiry",
                                          "BankAccountNumber",
                                          "BankRoutingNumber",
                                          "SwiftCode",
                                          "TaxIdentificationNumber"
                                        ],
                                        "title": "FinancialInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Name",
                                          "Age",
                                          "Email",
                                          "Phone",
                                          "PersonType",
                                          "Gender"
                                        ],
                                        "title": "PersonalInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SocialSecurityNumber",
                                          "NationalIdentificationNumber",
                                          "NationalHealthService",
                                          "ResidentRegistrationNumber",
                                          "DriverLicenseNumber",
                                          "PassportNumber"
                                        ],
                                        "title": "IdentificationNumbersSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "URL",
                                          "IP",
                                          "MAC",
                                          "VehicleIdentificationNumber",
                                          "LicensePlate",
                                          "VoterNumber",
                                          "AWSKeys",
                                          "AzureKeys",
                                          "Password"
                                        ],
                                        "title": "MiscellaneousSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "CompanyName",
                                          "CompanyNumber",
                                          "BuisnessNumber"
                                        ],
                                        "title": "OrganizationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Date",
                                          "Time",
                                          "DateTime",
                                          "Duration"
                                        ],
                                        "title": "DateAndTimeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Address",
                                          "Location"
                                        ],
                                        "title": "LocationInformationSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "original_label": {
                                    "minLength": 1,
                                    "title": "Original Label",
                                    "type": "string"
                                  },
                                  "content": {
                                    "minLength": 1,
                                    "title": "Content",
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Confidence Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "offset",
                                  "length",
                                  "category",
                                  "subcategory",
                                  "original_label",
                                  "content",
                                  "confidence_score"
                                ],
                                "title": "AnonymizationEntity",
                                "type": "object"
                              },
                              "title": "Entities",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textanonymizationAnonymizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textanonymizationResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "privateai": {
                        "result": "The phone number of *** is the **************.",
                        "entities": [
                          {
                            "offset": 20,
                            "length": 3,
                            "category": "PersonalInformation",
                            "subcategory": "Name",
                            "original_label": "NAME_GIVEN",
                            "content": "Luc",
                            "confidence_score": 0.912
                          },
                          {
                            "offset": 31,
                            "length": 14,
                            "category": "PersonalInformation",
                            "subcategory": "Phone",
                            "original_label": "PHONE_NUMBER",
                            "content": "06 21 32 43 54",
                            "confidence_score": 0.904
                          }
                        ],
                        "cost": 0
                      },
                      "amazon": {
                        "result": "The phone number of *** is the **************.",
                        "entities": [
                          {
                            "offset": 20,
                            "length": 3,
                            "category": "PersonalInformation",
                            "subcategory": "Name",
                            "original_label": "NAME",
                            "content": "Luc",
                            "confidence_score": 1
                          },
                          {
                            "offset": 31,
                            "length": 14,
                            "category": "DateAndTime",
                            "subcategory": "DateTime",
                            "original_label": "DATE_TIME",
                            "content": "06 21 32 43 54",
                            "confidence_score": 0.877
                          }
                        ],
                        "cost": 0
                      },
                      "emvista": {
                        "result": "The phone number of *** is the 06 21 ** 43 54.",
                        "entities": [
                          {
                            "offset": 37,
                            "length": 12,
                            "category": "DateAndTime",
                            "subcategory": "Duration",
                            "original_label": "Thing/Abstract/Time",
                            "content": "the 06 21 32",
                            "confidence_score": null
                          },
                          {
                            "offset": 20,
                            "length": 3,
                            "category": "PersonalInformation",
                            "subcategory": "Name",
                            "original_label": "Thing/Concrete/Animate/Livingbeing/Human",
                            "content": "Luc",
                            "confidence_score": null
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "result": "The phone number of *** is the **************.",
                        "entities": [
                          {
                            "offset": 20,
                            "length": 3,
                            "category": "PersonalInformation",
                            "subcategory": "Name",
                            "original_label": "name",
                            "content": "Luc",
                            "confidence_score": 0.9
                          },
                          {
                            "offset": 31,
                            "length": 14,
                            "category": "PersonalInformation",
                            "subcategory": "Phone",
                            "original_label": "phonenumber",
                            "content": "06 21 32 43 54",
                            "confidence_score": 0.95
                          }
                        ],
                        "cost": 0
                      },
                      "microsoft": {
                        "result": "The phone number of *** is the **************.",
                        "entities": [
                          {
                            "offset": 20,
                            "length": 3,
                            "category": "PersonalInformation",
                            "subcategory": "Name",
                            "original_label": "Person",
                            "content": "Luc",
                            "confidence_score": 0.99
                          },
                          {
                            "offset": 31,
                            "length": 14,
                            "category": "PersonalInformation",
                            "subcategory": "Phone",
                            "original_label": "PhoneNumber",
                            "content": "06 21 32 43 54",
                            "confidence_score": 0.8
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/chat": {
      "post": {
        "operationId": "text_chat_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Model|Version|Price|Billing unit|\n|----|----|-------|-----|------------|\n|**openai**|**gpt-3.5-turbo-1106**|`v1Beta`|2.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-16k**|`v1Beta`|4.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4-turbo-2024-04-09**|`v1Beta`|30.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4o**|`v1Beta`|15.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4-1106-preview**|`v1Beta`|30.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4-vision-preview**|`v1Beta`|30.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-0125**|`v1Beta`|1.5 (per 1000000 token)|1 token\n|**openai**|**gpt-4-32k-0314**|`v1Beta`|120.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4o-mini**|`v1Beta`|0.6 (per 1000000 token)|1 token\n|**openai**|-|`v1Beta`|2.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4-0314**|`v1Beta`|60.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4**|`v1Beta`|60.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo**|`v1Beta`|2.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-0301**|`v1Beta`|2.0 (per 1000000 token)|1 token\n|**openai**|**o1-preview**|`v1Beta`|60.0 (per 1000000 token)|1 token\n|**openai**|**o1-preview-2024-09-12**|`v1Beta`|60.0 (per 1000000 token)|1 token\n|**google**|**chat-bison**|`v1`|0.5 (per 1000000 char)|1000 char\n|**google**|**gemini-1.5-flash**|`v1`|2.1 (per 1000000 token)|1 token\n|**google**|**gemini-1.5-pro**|`v1`|21.0 (per 1000000 token)|1 token\n|**google**|-|`v1`|2.1 (per 1000000 token)|1 token\n|**cohere**|-|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**cohere**|**command-light**|`2022-12-06`|0.6 (per 1000000 token)|1 token\n|**cohere**|**command-nightly**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**cohere**|**command**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**cohere**|**command-light-nightly**|`2022-12-06`|0.6 (per 1000000 token)|1 token\n|**cohere**|**command-r**|`2022-12-06`|1.5 (per 1000000 token)|1 token\n|**cohere**|**command-r-plus**|`2022-12-06`|15.0 (per 1000000 token)|1 token\n|**meta**|**llama3-1-405b-instruct-v1:0**|`v1`|160.0 (per 1000000 token)|1 token\n|**meta**|**llama3-1-70b-instruct-v1:0**|`v1`|3.5 (per 1000000 token)|1 token\n|**meta**|**llama3-1-8b-instruct-v1:0**|`v1`|0.6 (per 1000000 token)|1 token\n|**meta**|-|`v1`|2.56 (per 1000000 token)|1 token\n|**meta**|**llama3-70b-instruct-v1:0**|`v1`|3.5 (per 1000000 token)|1 token\n|**meta**|**llama3-8b-instruct-v1:0**|`v1`|0.6 (per 1000000 token)|1 token\n|**mistral**|**small**|`v0.0.1`|6.0 (per 1000000 token)|1 token\n|**mistral**|**medium**|`v0.0.1`|8.1 (per 1000000 token)|1 token\n|**mistral**|**tiny**|`v0.0.1`|0.25 (per 1000000 token)|1 token\n|**mistral**|**large-latest**|`v0.0.1`|24.0 (per 1000000 token)|1 token\n|**mistral**|-|`v0.0.1`|24.0 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-sonar-huge-128k-online**|`v1.0`|10.0 (per 1000000 token)|1 token\n|**perplexityai**|-|`v1.0`|1.0 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-sonar-small-128k-chat**|`v1.0`|0.2 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-sonar-small-128k-online**|`v1.0`|5.2 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-8b-instruct**|`v1.0`|0.2 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-70b-instruct**|`v1.0`|1.0 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-sonar-large-128k-chat**|`v1.0`|1.0 (per 1000000 token)|1 token\n|**perplexityai**|**llama-3.1-sonar-large-128k-online**|`v1.0`|6.0 (per 1000000 token)|1 token\n|**anthropic**|-|`bedrock-2023-05-31`|15.0 (per 1000000 token)|1 token\n|**anthropic**|**claude-3-sonnet-20240229-v1:0**|`bedrock-2023-05-31`|15.0 (per 1000000 token)|1 token\n|**anthropic**|**claude-instant-v1**|`bedrock-2023-05-31`|2.4 (per 1000000 token)|1 token\n|**anthropic**|**claude-v2**|`bedrock-2023-05-31`|24.0 (per 1000000 token)|1 token\n|**anthropic**|**claude-3-haiku-20240307-v1:0**|`bedrock-2023-05-31`|1.25 (per 1000000 token)|1 token\n|**anthropic**|**claude-3-5-sonnet-20240620-v1:0**|`bedrock-2023-05-31`|15.0 (per 1000000 token)|1 token\n\n\n</details>\n\n<details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n\n</details><details><summary>Supported Models</summary><details><summary>openai</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**openai**|`gpt-3.5-turbo`|\n||`gpt-3.5-turbo-0125`|\n||`gpt-3.5-turbo-0301`|\n||`gpt-3.5-turbo-1106`|\n||`gpt-3.5-turbo-16k`|\n||`gpt-4`|\n||`gpt-4-0314`|\n||`gpt-4-1106-preview`|\n||`gpt-4-32k-0314`|\n||`gpt-4-turbo-2024-04-09`|\n||`gpt-4-vision-preview`|\n||`gpt-4o`|\n||`gpt-4o-mini`|\n||`o1-preview`|\n||`o1-preview-2024-09-12`|\n\n</details><details><summary>google</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**google**|`chat-bison`|\n||`gemini-1.5-flash`|\n||`gemini-1.5-pro`|\n\n</details><details><summary>cohere</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**cohere**|`command`|\n||`command-light`|\n||`command-light-nightly`|\n||`command-nightly`|\n||`command-r`|\n||`command-r-plus`|\n\n</details><details><summary>meta</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**meta**|`llama3-1-405b-instruct-v1:0`|\n||`llama3-1-70b-instruct-v1:0`|\n||`llama3-1-8b-instruct-v1:0`|\n||`llama3-70b-instruct-v1:0`|\n||`llama3-8b-instruct-v1:0`|\n\n</details><details><summary>mistral</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**mistral**|`large-latest`|\n||`medium`|\n||`small`|\n||`tiny`|\n\n</details><details><summary>perplexityai</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**perplexityai**|`llama-3.1-70b-instruct`|\n||`llama-3.1-8b-instruct`|\n||`llama-3.1-sonar-huge-128k-online`|\n||`llama-3.1-sonar-large-128k-chat`|\n||`llama-3.1-sonar-large-128k-online`|\n||`llama-3.1-sonar-small-128k-chat`|\n||`llama-3.1-sonar-small-128k-online`|\n\n</details><details><summary>anthropic</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**anthropic**|`claude-3-5-sonnet-20240620-v1:0`|\n||`claude-3-haiku-20240307-v1:0`|\n||`claude-3-sonnet-20240229-v1:0`|\n||`claude-instant-v1`|\n||`claude-v2`|\n\n</details>\n\n</details>",
        "summary": "Chat",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "Start your conversation here..."
                  },
                  "chatbot_global_action": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "A system message that helps set the behavior of the assistant. For example, 'You are a helpful assistant'."
                  },
                  "previous_history": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "minLength": 1
                        },
                        "message": {},
                        "tools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The name of your tool/function"
                              },
                              "description": {
                                "type": "string"
                              },
                              "parameters": {
                                "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                              }
                            },
                            "required": [
                              "description",
                              "name",
                              "parameters"
                            ]
                          },
                          "nullable": true
                        },
                        "tool_calls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "arguments": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "arguments",
                              "id",
                              "name"
                            ]
                          },
                          "nullable": true
                        }
                      },
                      "required": [
                        "message",
                        "role"
                      ]
                    },
                    "description": "A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'role' and 'message'. The 'role' key specifies the role of the speaker and can have the values 'user' or 'assistant'. The 'message' key contains the text of the conversation from the respective role. For example: [{'role': 'user', 'message': 'Hello'}, {'role': 'assistant', 'message': 'Hi, how can I help you?'}, ...]. This format allows easy identification of the speaker's role and their corresponding message."
                  },
                  "temperature": {
                    "type": "number",
                    "format": "double",
                    "maximum": 2,
                    "minimum": 0,
                    "default": 0,
                    "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
                  },
                  "max_tokens": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1000,
                    "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
                  },
                  "tool_choice": {
                    "allOf": [
                      {
                        "enum": [
                          "auto",
                          "required",
                          "none"
                        ],
                        "type": "string",
                        "description": "* `auto` - auto\n* `required` - required\n* `none` - none"
                      }
                    ],
                    "default": "auto",
                    "description": "`auto`: the model will choose to use tools if needed, `required`: force model to use any of the available tools, `none`: force model to not select a tool\n\n* `auto` - auto\n* `required` - required\n* `none` - none"
                  },
                  "available_tools": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "description": "The name of your tool/function"
                        },
                        "description": {
                          "type": "string"
                        },
                        "parameters": {
                          "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                        }
                      },
                      "required": [
                        "description",
                        "name",
                        "parameters"
                      ]
                    },
                    "description": "A list of tools the model may generate the right arguments for."
                  },
                  "tool_results": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 1,
                          "description": "the id of the `tool_call` used to generate result"
                        },
                        "result": {
                          "type": "string",
                          "minLength": 1,
                          "description": "the result of your function"
                        }
                      },
                      "required": [
                        "id",
                        "result"
                      ]
                    },
                    "description": "List of results obtained from applying the tool_call arguments to your own tool."
                  }
                },
                "required": [
                  "providers"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "perplexityai,anthropic,openai,google,meta,cohere,mistral",
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.",
                    "chatbot_global_action": "You are a keyword extractor. Extract Only the word from the text provided.",
                    "previous_history": [
                      {
                        "role": "user",
                        "message": "Steve Jobs was a co-founder of Apple Inc., a multinational technology company headquartered in Cupertino, California. He was also the CEO and a major shareholder of Pixar Animation Studios, which was later acquired by The Walt Disney Company. Jobs was widely recognized as a visionary entrepreneur and a pioneer in the personal computer industry. In addition to his business ventures, he was also known for his charismatic personality, his signature black turtleneck, and his famous keynote presentations at Apple's product launches."
                      },
                      {
                        "role": "assistant",
                        "message": "steve jobs, apple inc, pixar, california"
                      }
                    ],
                    "temperature": 0,
                    "max_tokens": 100
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "anthropic": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "replicate": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "mistral": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "perplexityai": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "message": {
                              "items": {
                                "properties": {
                                  "role": {
                                    "title": "Role",
                                    "type": "string"
                                  },
                                  "message": {
                                    "default": "",
                                    "title": "Message",
                                    "type": "string"
                                  },
                                  "tools": {
                                    "default": null,
                                    "description": "Tools defined by the user",
                                    "items": {
                                      "type": "object"
                                    },
                                    "title": "Tools",
                                    "type": "array"
                                  },
                                  "tool_calls": {
                                    "default": null,
                                    "description": "The tools arguments generated from tools definition and user prompt.",
                                    "items": {
                                      "properties": {
                                        "id": {
                                          "title": "Id",
                                          "type": "string"
                                        },
                                        "name": {
                                          "title": "Name",
                                          "type": "string"
                                        },
                                        "arguments": {
                                          "title": "Arguments",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "arguments"
                                      ],
                                      "title": "ToolCall",
                                      "type": "object"
                                    },
                                    "title": "Tool Calls",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "role"
                                ],
                                "title": "ChatMessageDataClass",
                                "type": "object"
                              },
                              "title": "Message",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textchatChatDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textchatResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "perplexityai": {
                        "generated_text": "Barack Hussein Obama II is an American politician who served as the 44th President of the United States from 2009 to 2017. A member of the Democratic Party, he was the first African-American president in U.S. history. Before becoming President, Obama held various political positions, including:\n\n- U.S. Senator from Illinois (2005-2008)\n- Illinois State Senator (1997-2004)\n\nIn addition to his political career, Obama worked as a civil rights lawyer and university lecturer. He was born on August 4, 1961, in Honolulu, Hawaii, and graduated from Columbia University in 1983 with a B.A. in political science. Obama's story is the American story, with values from the heartland, a middle-class upbringing in a strong family, hard work and education as the means of getting ahead, and the conviction that a life so blessed should be lived in service to others.\n\nDuring his presidency, Obama implemented significant healthcare reforms and worked on various domestic and foreign policy issues. He was awarded the Nobel Peace Prize in 2009 for his extraordinary efforts to strengthen international diplomacy, human rights, and peace. After serving two terms as President, Obama is currently serving as a private citizen.\n",
                        "message": [
                          {
                            "role": "user",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "system",
                            "message": "Barack Hussein Obama II is an American politician who served as the 44th President of the United States from 2009 to 2017. A member of the Democratic Party, he was the first African-American president in U.S. history. Before becoming President, Obama held various political positions, including:\n\n- U.S. Senator from Illinois (2005-2008)\n- Illinois State Senator (1997-2004)\n\nIn addition to his political career, Obama worked as a civil rights lawyer and university lecturer. He was born on August 4, 1961, in Honolulu, Hawaii, and graduated from Columbia University in 1983 with a B.A. in political science. Obama's story is the American story, with values from the heartland, a middle-class upbringing in a strong family, hard work and education as the means of getting ahead, and the conviction that a life so blessed should be lived in service to others.\n\nDuring his presidency, Obama implemented significant healthcare reforms and worked on various domestic and foreign policy issues. He was awarded the Nobel Peace Prize in 2009 for his extraordinary efforts to strengthen international diplomacy, human rights, and peace. After serving two terms as President, Obama is currently serving as a private citizen.\n"
                          }
                        ],
                        "cost": 0
                      },
                      "anthropic": {
                        "generated_text": "barack hussein obama, democratic party, african-american, united states, illinois, senator",
                        "message": [
                          {
                            "role": "user",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "assistant",
                            "message": "barack hussein obama, democratic party, african-american, united states, illinois, senator"
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "generated_text": "Barack Hussein Obama, American, politician, president, United States, Democratic Party, African-American, senator, Illinois, state",
                        "message": [
                          {
                            "role": "user",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "assistant",
                            "message": "Barack Hussein Obama, American, politician, president, United States, Democratic Party, African-American, senator, Illinois, state"
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "generated_text": " barack hussein obama, united states, democratic party, african-american, illinois, u.s. senator",
                        "message": [
                          {
                            "role": "user",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "assistant",
                            "message": " barack hussein obama, united states, democratic party, african-american, illinois, u.s. senator"
                          }
                        ],
                        "cost": 0
                      },
                      "meta": {
                        "generated_text": "barack obama, united states, democratic party, illinois",
                        "message": [
                          {
                            "role": "user",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "assistant",
                            "message": "barack obama, united states, democratic party, illinois"
                          }
                        ],
                        "cost": 0
                      },
                      "cohere": {
                        "generated_text": "Barack Hussein Obama was an American politician who served as the 44th president of the United States from 2009 to 2017. He was a member of the Democratic Party and previously served as a U.S. senator</co:0,1,5,8> from <co: 0,5,8>Illinois from 2005 to 2008. \n\nObama was born in Honolulu, Hawaii in 1961 and was raised in Kenya. He has a degree from Columbia University and Harvard Law School. After serving as an Illinois state senator, he was elected as a U.S. senator</co:1,5,8> in <co: 1,4>2004. \n\nDuring his presidency, Obama took several actions to raise vehicle fuel efficiency, including increasing corporate average fuel economy, signing the \"cash-for-clunkers\" bill, and lifting the ban on federal funding for embryonic stem cell research. \n\nBarack Obama's personal information I could find includes his birthday, place of birth, family diversity, and personal charisma. Would you like me to continue extracting information or provide specific details on any of these categories?",
                        "message": [
                          {
                            "role": "USER",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "CHATBOT",
                            "message": "Barack Hussein Obama was an American politician who served as the 44th president of the United States from 2009 to 2017. He was a member of the Democratic Party and previously served as a U.S. senator</co:0,1,5,8> from <co: 0,5,8>Illinois from 2005 to 2008. \n\nObama was born in Honolulu, Hawaii in 1961 and was raised in Kenya. He has a degree from Columbia University and Harvard Law School. After serving as an Illinois state senator, he was elected as a U.S. senator</co:1,5,8> in <co: 1,4>2004. \n\nDuring his presidency, Obama took several actions to raise vehicle fuel efficiency, including increasing corporate average fuel economy, signing the \"cash-for-clunkers\" bill, and lifting the ban on federal funding for embryonic stem cell research. \n\nBarack Obama's personal information I could find includes his birthday, place of birth, family diversity, and personal charisma. Would you like me to continue extracting information or provide specific details on any of these categories?"
                          }
                        ],
                        "cost": 0
                      },
                      "mistral": {
                        "generated_text": "barack, hussein, obama, president, united, states, democratic, party, illinois, senator\n\n(Note: I've included \"president\" as a keyword even though it's part of the sentence \"president of the United States\" because it is a key role and title associated with Barack Obama.)",
                        "message": [
                          {
                            "role": "user",
                            "message": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                          },
                          {
                            "role": "assistant",
                            "message": "barack, hussein, obama, president, united, states, democratic, party, illinois, senator\n\n(Note: I've included \"president\" as a keyword even though it's part of the sentence \"president of the United States\" because it is a key role and title associated with Barack Obama.)"
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/chat/stream": {
      "post": {
        "operationId": "text_chat_stream_create",
        "description": "Streamed version of Chat feature, the raw text will be streamed chunk by chunk.\n\nNOTE: For this feature, you an only request one provider at a time.",
        "summary": "Chat Stream",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "Start your conversation here..."
                  },
                  "chatbot_global_action": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "A system message that helps set the behavior of the assistant. For example, 'You are a helpful assistant'."
                  },
                  "previous_history": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "minLength": 1
                        },
                        "message": {},
                        "tools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The name of your tool/function"
                              },
                              "description": {
                                "type": "string"
                              },
                              "parameters": {
                                "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                              }
                            },
                            "required": [
                              "description",
                              "name",
                              "parameters"
                            ]
                          },
                          "nullable": true
                        },
                        "tool_calls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "arguments": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "arguments",
                              "id",
                              "name"
                            ]
                          },
                          "nullable": true
                        }
                      },
                      "required": [
                        "message",
                        "role"
                      ]
                    },
                    "description": "A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'role' and 'message'. The 'role' key specifies the role of the speaker and can have the values 'user' or 'assistant'. The 'message' key contains the text of the conversation from the respective role. For example: [{'role': 'user', 'message': 'Hello'}, {'role': 'assistant', 'message': 'Hi, how can I help you?'}, ...]. This format allows easy identification of the speaker's role and their corresponding message."
                  },
                  "temperature": {
                    "type": "number",
                    "format": "double",
                    "maximum": 2,
                    "minimum": 0,
                    "default": 0,
                    "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
                  },
                  "max_tokens": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1000,
                    "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
                  },
                  "tool_choice": {
                    "allOf": [
                      {
                        "enum": [
                          "auto",
                          "required",
                          "none"
                        ],
                        "type": "string",
                        "description": "* `auto` - auto\n* `required` - required\n* `none` - none"
                      }
                    ],
                    "default": "auto",
                    "description": "`auto`: the model will choose to use tools if needed, `required`: force model to use any of the available tools, `none`: force model to not select a tool\n\n* `auto` - auto\n* `required` - required\n* `none` - none"
                  },
                  "available_tools": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "description": "The name of your tool/function"
                        },
                        "description": {
                          "type": "string"
                        },
                        "parameters": {
                          "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                        }
                      },
                      "required": [
                        "description",
                        "name",
                        "parameters"
                      ]
                    },
                    "description": "A list of tools the model may generate the right arguments for."
                  },
                  "tool_results": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 1,
                          "description": "the id of the `tool_call` used to generate result"
                        },
                        "result": {
                          "type": "string",
                          "minLength": 1,
                          "description": "the result of your function"
                        }
                      },
                      "required": [
                        "id",
                        "result"
                      ]
                    },
                    "description": "List of results obtained from applying the tool_call arguments to your own tool."
                  },
                  "fallback_type": {
                    "allOf": [
                      {
                        "enum": [
                          "rerun",
                          "continue"
                        ],
                        "type": "string",
                        "description": "* `rerun` - Rerun\n* `continue` - Continue"
                      }
                    ],
                    "default": "continue"
                  }
                },
                "required": [
                  "providers"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "perplexityai,anthropic,openai,google,meta,cohere,mistral",
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.",
                    "chatbot_global_action": "You are a keyword extractor. Extract Only the word from the text provided.",
                    "previous_history": [
                      {
                        "role": "user",
                        "message": "Steve Jobs was a co-founder of Apple Inc., a multinational technology company headquartered in Cupertino, California. He was also the CEO and a major shareholder of Pixar Animation Studios, which was later acquired by The Walt Disney Company. Jobs was widely recognized as a visionary entrepreneur and a pioneer in the personal computer industry. In addition to his business ventures, he was also known for his charismatic personality, his signature black turtleneck, and his famous keynote presentations at Apple's product launches."
                      },
                      {
                        "role": "assistant",
                        "message": "steve jobs, apple inc, pixar, california"
                      }
                    ],
                    "temperature": 0,
                    "max_tokens": 100
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "ResponseExample": {
                    "value": "{\"text\": \"obama\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"american\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"politician\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"44th\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"president\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"united\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"states\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"democratic\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"party\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"african-american\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"senator\", \"is_blocked\": false, \"provider\": \"openai\"}\n{\"text\": \"illinois\", \"is_blocked\": false, \"provider\": \"openai\"}",
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/code_generation": {
      "post": {
        "operationId": "text_code_generation_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**openai**|`v1`|2.0 (per 1000000 token)|1 token\n|**google**|`v1`|0.5 (per 1000000 char)|1 char\n|**nlpcloud**|`v1`|25.0 (per 1000 request)|1 request\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Achinese**|`ace`|\n|**Afrikaans**|`af`|\n|**Akan**|`ak`|\n|**Amharic**|`am`|\n|**Arabic**|`ar`|\n|**Armenian**|`hy`|\n|**Assamese**|`as`|\n|**Asturian**|`ast`|\n|**Awadhi**|`awa`|\n|**Ayacucho Quechua**|`quy`|\n|**Balinese**|`ban`|\n|**Bambara**|`bm`|\n|**Banjar**|`bjn`|\n|**Bashkir**|`ba`|\n|**Basque**|`eu`|\n|**Belarusian**|`be`|\n|**Bemba (Zambia)**|`bem`|\n|**Bengali**|`bn`|\n|**Bhojpuri**|`bho`|\n|**Bosnian**|`bs`|\n|**Buginese**|`bug`|\n|**Bulgarian**|`bg`|\n|**Burmese**|`my`|\n|**Catalan**|`ca`|\n|**Cebuano**|`ceb`|\n|**Central Atlas Tamazight**|`tzm`|\n|**Central Aymara**|`ayr`|\n|**Central Kanuri**|`knc`|\n|**Central Kurdish**|`ckb`|\n|**Chhattisgarhi**|`hne`|\n|**Chinese**|`zh`|\n|**Chokwe**|`cjk`|\n|**Crimean Tatar**|`crh`|\n|**Croatian**|`hr`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**Dyula**|`dyu`|\n|**Dzongkha**|`dz`|\n|**Eastern Yiddish**|`ydd`|\n|**Egyptian Arabic**|`arz`|\n|**English**|`en`|\n|**Esperanto**|`eo`|\n|**Estonian**|`et`|\n|**Ewe**|`ee`|\n|**Faroese**|`fo`|\n|**Fijian**|`fj`|\n|**Finnish**|`fi`|\n|**Fon**|`fon`|\n|**French**|`fr`|\n|**Friulian**|`fur`|\n|**Galician**|`gl`|\n|**Ganda**|`lg`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Guarani**|`gn`|\n|**Gujarati**|`gu`|\n|**Haitian**|`ht`|\n|**Halh Mongolian**|`khk`|\n|**Hausa**|`ha`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Hungarian**|`hu`|\n|**Icelandic**|`is`|\n|**Igbo**|`ig`|\n|**Iloko**|`ilo`|\n|**Indonesian**|`id`|\n|**Irish**|`ga`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Javanese**|`jv`|\n|**Kabiyè**|`kbp`|\n|**Kabuverdianu**|`kea`|\n|**Kabyle**|`kab`|\n|**Kachin**|`kac`|\n|**Kamba (Kenya)**|`kam`|\n|**Kannada**|`kn`|\n|**Kashmiri**|`ks`|\n|**Kazakh**|`kk`|\n|**Khmer**|`km`|\n|**Kikuyu**|`ki`|\n|**Kimbundu**|`kmb`|\n|**Kinyarwanda**|`rw`|\n|**Kirghiz**|`ky`|\n|**Kongo**|`kg`|\n|**Korean**|`ko`|\n|**Lao**|`lo`|\n|**Latgalian**|`ltg`|\n|**Ligurian**|`lij`|\n|**Limburgan**|`li`|\n|**Lingala**|`ln`|\n|**Lithuanian**|`lt`|\n|**Lombard**|`lmo`|\n|**Luba-Katanga**|`lu`|\n|**Luo (Kenya and Tanzania)**|`luo`|\n|**Lushai**|`lus`|\n|**Luxembourgish**|`lb`|\n|**Macedonian**|`mk`|\n|**Magahi**|`mag`|\n|**Maithili**|`mai`|\n|**Malayalam**|`ml`|\n|**Maltese**|`mt`|\n|**Manipuri**|`mni`|\n|**Maori**|`mi`|\n|**Marathi**|`mr`|\n|**Mesopotamian Arabic**|`acm`|\n|**Minangkabau**|`min`|\n|**Modern Greek (1453-)**|`el`|\n|**Moroccan Arabic**|`ary`|\n|**Mossi**|`mos`|\n|**Najdi Arabic**|`ars`|\n|**Nepali (macrolanguage)**|`ne`|\n|**Nigerian Fulfulde**|`fuv`|\n|**North Azerbaijani**|`azj`|\n|**North Levantine Arabic**|`apc`|\n|**Northern Kurdish**|`kmr`|\n|**Northern Uzbek**|`uzn`|\n|**Norwegian Bokmål**|`nb`|\n|**Norwegian Nynorsk**|`nn`|\n|**Nuer**|`nus`|\n|**Nyanja**|`ny`|\n|**Occitan (post 1500)**|`oc`|\n|**Oriya (macrolanguage)**|`or`|\n|**Pangasinan**|`pag`|\n|**Panjabi**|`pa`|\n|**Papiamento**|`pap`|\n|**Pedi**|`nso`|\n|**Persian**|`fa`|\n|**Plateau Malagasy**|`plt`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Romanian**|`ro`|\n|**Rundi**|`rn`|\n|**Russian**|`ru`|\n|**Samoan**|`sm`|\n|**Sango**|`sg`|\n|**Sanskrit**|`sa`|\n|**Santali**|`sat`|\n|**Sardinian**|`sc`|\n|**Scottish Gaelic**|`gd`|\n|**Serbian**|`sr`|\n|**Shan**|`shn`|\n|**Shona**|`sn`|\n|**Sicilian**|`scn`|\n|**Silesian**|`szl`|\n|**Sindhi**|`sd`|\n|**Sinhala**|`si`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**Somali**|`so`|\n|**South Azerbaijani**|`azb`|\n|**South Levantine Arabic**|`ajp`|\n|**Southern Pashto**|`pbt`|\n|**Southern Sotho**|`st`|\n|**Southwestern Dinka**|`dik`|\n|**Spanish**|`es`|\n|**Standard Latvian**|`lvs`|\n|**Standard Malay**|`zsm`|\n|**Sundanese**|`su`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swati**|`ss`|\n|**Swedish**|`sv`|\n|**Ta'izzi-Adeni Arabic**|`acq`|\n|**Tagalog**|`tl`|\n|**Tajik**|`tg`|\n|**Tamashek**|`tmh`|\n|**Tamil**|`ta`|\n|**Tatar**|`tt`|\n|**Telugu**|`te`|\n|**Thai**|`th`|\n|**Tibetan**|`bo`|\n|**Tigrinya**|`ti`|\n|**Tok Pisin**|`tpi`|\n|**Tosk Albanian**|`als`|\n|**Tsonga**|`ts`|\n|**Tswana**|`tn`|\n|**Tumbuka**|`tum`|\n|**Tunisian Arabic**|`aeb`|\n|**Turkish**|`tr`|\n|**Turkmen**|`tk`|\n|**Twi**|`tw`|\n|**Uighur**|`ug`|\n|**Ukrainian**|`uk`|\n|**Umbundu**|`umb`|\n|**Urdu**|`ur`|\n|**Venetian**|`vec`|\n|**Vietnamese**|`vi`|\n|**Waray (Philippines)**|`war`|\n|**Welsh**|`cy`|\n|**West Central Oromo**|`gaz`|\n|**Wolof**|`wo`|\n|**Xhosa**|`xh`|\n|**Yoruba**|`yo`|\n|**Yue Chinese**|`yue`|\n|**Zulu**|`zu`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Arabic (world)**|`ar-001`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**Persian (Afghanistan)**|`fa-AF`|\n\n</details>",
        "summary": "Code Generation",
        "tags": [
          "Code Generation"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "prompt": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "Entrer the source code that will be used as a context."
                  },
                  "instruction": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Entrer the instruction you want to be followed."
                  },
                  "temperature": {
                    "type": "number",
                    "format": "double",
                    "maximum": 1,
                    "minimum": 0,
                    "default": 0,
                    "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
                  },
                  "max_tokens": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1000,
                    "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
                  }
                },
                "required": [
                  "instruction",
                  "providers"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "openai,google,nlpcloud",
                    "instruction": "Write a function in python that calculates fibonacci",
                    "temperature": 0.1,
                    "max_tokens": 100,
                    "prompt": ""
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textcode_generationCodeGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textcode_generationCodeGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textcode_generationCodeGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textcode_generationResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "openai": {
                        "generated_text": "Sure, here's a Python function that checks if a year is a leap year:\n\n```python\ndef is_leap_year(year):\n    \"\"\"\n    Returns True if the given year is a leap year, False otherwise.\n    \"\"\"\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n```\n\nThis function takes a year as input and returns True if it is a leap year, and False otherwise. It uses the standard rules for determining leap years: a year is a leap year if it is divisible by 4, unless it is also divisible by 100, in which case it is only a leap year if it is also divisible by 400.",
                        "cost": 0
                      },
                      "google": {
                        "generated_text": "```python\ndef is_leap_year(year):\n  \"\"\"\n  Determines whether a year is a leap year.\n\n  Args:\n    year: The year to check.\n\n  Returns:\n    True if the year is a leap year, False otherwise.\n  \"\"\"\n\n  # A year is a leap year if it is divisible by 4, unless it is divisible by 100\n  # unless it is also divisible by 400.\n\n  if year % 4 == 0:\n    if year % 100 == 0:\n      return year % 400 == 0\n    else:\n      return True\n  else:\n    return False\n```",
                        "cost": 0
                      },
                      "nlpcloud": {
                        "generated_text": "def is_leap_year(year):\n    if (year%4 == 0 and year%100 != 0) or (year%400 == 0):\n            return True\n    return False",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/custom_classification": {
      "post": {
        "operationId": "text_custom_classification_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**cohere**|`2022-12-06`|0.5 (per 1000 request)|1 request\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n\n\n</details>\n\n",
        "summary": "Custom Text Classification",
        "tags": [
          "Custom Classification"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "texts": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "List of texts to classify"
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "List of the labels (classes) you want the texts to be classified as."
                  },
                  "examples": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "maxItems": 2,
                      "minItems": 2
                    },
                    "description": "List of text/label pairs (eg: [['I need help please wire me $1000 right now', 'spam'],]"
                  }
                },
                "required": [
                  "examples",
                  "labels",
                  "providers",
                  "texts"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "openai,cohere",
                    "texts": [
                      "Confirm your email address",
                      "hey i need u to send some $"
                    ],
                    "labels": [
                      "spam",
                      "not spam"
                    ],
                    "examples": [
                      [
                        "I need help please wire me $1000 right now",
                        "spam"
                      ],
                      [
                        "Dermatologists dont like her!",
                        "spam"
                      ],
                      [
                        "Please help me?",
                        "spam"
                      ],
                      [
                        "Pre-read for tomorrow",
                        "not spam"
                      ],
                      [
                        "Your parcel will be delivered today",
                        "not spam"
                      ],
                      [
                        "Review changes to our Terms and Conditions",
                        "not spam"
                      ]
                    ]
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "classifications": {
                              "items": {
                                "properties": {
                                  "input": {
                                    "title": "Input",
                                    "type": "string"
                                  },
                                  "label": {
                                    "title": "Label",
                                    "type": "string"
                                  },
                                  "confidence": {
                                    "title": "Confidence",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "input",
                                  "label",
                                  "confidence"
                                ],
                                "title": "ItemCustomClassificationDataClass",
                                "type": "object"
                              },
                              "title": "Classifications",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textcustom_classificationCustomClassificationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "classifications": {
                              "items": {
                                "properties": {
                                  "input": {
                                    "title": "Input",
                                    "type": "string"
                                  },
                                  "label": {
                                    "title": "Label",
                                    "type": "string"
                                  },
                                  "confidence": {
                                    "title": "Confidence",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "input",
                                  "label",
                                  "confidence"
                                ],
                                "title": "ItemCustomClassificationDataClass",
                                "type": "object"
                              },
                              "title": "Classifications",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textcustom_classificationCustomClassificationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textcustom_classificationResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "openai": {
                        "classifications": [
                          {
                            "input": "Confirm your email address",
                            "label": "not spam",
                            "confidence": 0.9
                          },
                          {
                            "input": "hey i need u to send some $",
                            "label": "spam",
                            "confidence": 0.8
                          },
                          {
                            "input": "Congratulations! You've won a free vacation! Click the link to claim your prize now!",
                            "label": "spam",
                            "confidence": 0.95
                          },
                          {
                            "input": "Make money fast! Join our exclusive program and start earning thousands in just a few days!",
                            "label": "spam",
                            "confidence": 0.9
                          },
                          {
                            "input": "Get rich quick with this amazing investment opportunity. Guaranteed returns!",
                            "label": "spam",
                            "confidence": 0.85
                          },
                          {
                            "input": "Unlock special discounts on luxury goods. Limited-time offer! Click here to shop now!",
                            "label": "not spam",
                            "confidence": 0.95
                          },
                          {
                            "input": "You've been selected for a special promotion. Act now to secure your spot!",
                            "label": "spam",
                            "confidence": 0.8
                          },
                          {
                            "input": "Meet hot singles in your area! Chat now and find your perfect match!",
                            "label": "spam",
                            "confidence": 0.9
                          },
                          {
                            "input": "Eliminate debt effortlessly! Our program can erase your financial worries.",
                            "label": "spam",
                            "confidence": 0.85
                          },
                          {
                            "input": "Claim your inheritance! Just provide your bank details for a seamless transfer.",
                            "label": "spam",
                            "confidence": 0.9
                          }
                        ],
                        "cost": 0
                      },
                      "cohere": {
                        "classifications": [
                          {
                            "input": "Confirm your email address",
                            "label": "not spam",
                            "confidence": 0.91768086
                          },
                          {
                            "input": "hey i need u to send some $",
                            "label": "spam",
                            "confidence": 0.9789305
                          },
                          {
                            "input": "Congratulations! You've won a free vacation! Click the link to claim your prize now!",
                            "label": "not spam",
                            "confidence": 0.5345591
                          },
                          {
                            "input": "Make money fast! Join our exclusive program and start earning thousands in just a few days!",
                            "label": "spam",
                            "confidence": 0.91536784
                          },
                          {
                            "input": "Get rich quick with this amazing investment opportunity. Guaranteed returns!",
                            "label": "spam",
                            "confidence": 0.789368
                          },
                          {
                            "input": "Unlock special discounts on luxury goods. Limited-time offer! Click here to shop now!",
                            "label": "not spam",
                            "confidence": 0.5363132
                          },
                          {
                            "input": "You've been selected for a special promotion. Act now to secure your spot!",
                            "label": "not spam",
                            "confidence": 0.69171065
                          },
                          {
                            "input": "Meet hot singles in your area! Chat now and find your perfect match!",
                            "label": "spam",
                            "confidence": 0.7748757
                          },
                          {
                            "input": "Eliminate debt effortlessly! Our program can erase your financial worries.",
                            "label": "spam",
                            "confidence": 0.8801634
                          },
                          {
                            "input": "Claim your inheritance! Just provide your bank details for a seamless transfer.",
                            "label": "spam",
                            "confidence": 0.6725608
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/custom_named_entity_recognition": {
      "post": {
        "operationId": "text_custom_named_entity_recognition_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**cohere**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n\n\n</details>\n\n",
        "summary": "Custom Named Entity Recognition",
        "tags": [
          "Custom Named Entity Recognition"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Enter your input text."
                  },
                  "entities": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "List of entities (at least two) to extract from your text eg : ['job', 'country'].",
                    "minItems": 2
                  },
                  "examples": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": {}
                    },
                    "description": "List of examples eg : [{'text': 'an input text', 'entities' : [{'entity':'entity_1', 'category':'category_1'}, ...]}, ...]"
                  }
                },
                "required": [
                  "entities",
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "openai,cohere",
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.",
                    "entities": [
                      "Politician",
                      "State"
                    ],
                    "examples": [
                      {
                        "text": "Steve Jobs was the co-founder of Apple Inc., a multinational technology company based in Cupertino, California. He was born in San Francisco, California in 1955, and studied at Reed College before dropping out to start Apple with Steve Wozniak in 1976",
                        "entities": [
                          {
                            "entity": "Steve Jobs",
                            "category": "Person"
                          },
                          {
                            "entity": "Apple Inc",
                            "category": "Organization"
                          },
                          {
                            "entity": "California",
                            "category": "Location"
                          },
                          {
                            "entity": "1955",
                            "category": "Date"
                          }
                        ]
                      }
                    ]
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category"
                                ],
                                "title": "InfosCustomNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category"
                                ],
                                "title": "InfosCustomNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "eden-ai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category"
                                ],
                                "title": "InfosCustomNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textcustom_named_entity_recognitionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "openai": {
                        "items": [
                          {
                            "entity": "John Smith",
                            "category": "person"
                          },
                          {
                            "entity": "Starbucks",
                            "category": "location"
                          },
                          {
                            "entity": "New York City",
                            "category": "location"
                          },
                          {
                            "entity": "IBM",
                            "category": "organization"
                          }
                        ],
                        "cost": 0
                      },
                      "cohere": {
                        "items": [
                          {
                            "entity": "John Smith",
                            "category": "person"
                          },
                          {
                            "entity": "Starbucks",
                            "category": "location"
                          },
                          {
                            "entity": "New York City",
                            "category": "location"
                          },
                          {
                            "entity": "IBM",
                            "category": "organization"
                          }
                        ],
                        "cost": 0
                      },
                      "eden-ai": {
                        "items": [
                          {
                            "entity": "John Smith",
                            "category": "person"
                          },
                          {
                            "entity": "Starbucks",
                            "category": "location"
                          },
                          {
                            "entity": "New York City",
                            "category": "location"
                          },
                          {
                            "entity": "IBM",
                            "category": "organization"
                          }
                        ],
                        "status": "success",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/embeddings": {
      "post": {
        "operationId": "text_embeddings_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Model|Version|Price|Billing unit|\n|----|----|-------|-----|------------|\n|**openai**|**1536__text-embedding-ada-002**|`v3.0.0`|0.1 (per 1000000 token)|1 token\n|**openai**|-|`v3.0.0`|0.1 (per 1000000 token)|1 token\n|**google**|-|`v1`|0.1 (per 1000000 char)|1 char\n|**google**|**768__textembedding-gecko**|`v1`|0.1 (per 1000000 char)|1 char\n|**cohere**|**1024__embed-english-light-v2.0**|`v1`|0.1 (per 1000000 char)|1 char\n|**cohere**|-|`v1`|0.1 (per 1000000 char)|1 char\n|**cohere**|**768__embed-multilingual-v2.0**|`v1`|0.1 (per 1000000 char)|1 char\n|**cohere**|**4096__embed-english-v2.0**|`v1`|0.1 (per 1000000 char)|1 char\n|**mistral**|**1024__mistral-embed**|`v0.0.1`|0.1 (per 1000000 token)|1 token\n|**mistral**|-|`v0.0.1`|0.1 (per 10000001 token)|1 token\n|**jina**|-|`v1`|0.018 (per 1000000 token)|1 token\n|**jina**|**jina-embeddings-v2-base-en**|`v1`|0.018 (per 1000000 token)|1 token\n\n\n</details>\n\n<details><summary>Supported Models</summary><details><summary>openai</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**openai**|`1536__text-embedding-ada-002`|\n\n</details><details><summary>google</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**google**|`768__textembedding-gecko`|\n\n</details><details><summary>cohere</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**cohere**|`1024__embed-english-light-v2.0`|\n||`4096__embed-english-v2.0`|\n||`768__embed-multilingual-v2.0`|\n\n</details><details><summary>mistral</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**mistral**|`1024__mistral-embed`|\n\n</details><details><summary>jina</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**jina**|`jina-embeddings-v2-base-en`|\n\n</details>\n\n</details>",
        "summary": "Embeddings",
        "tags": [
          "Embeddings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "texts": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "List of texts to transform into embeddings."
                  }
                },
                "required": [
                  "providers",
                  "texts"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "cohere,mistral,jina,openai,google",
                    "texts": [
                      "Hello world"
                    ]
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ai21labs": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "embedding": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "title": "Embedding",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "embedding"
                                ],
                                "title": "EmbeddingDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textembeddingsEmbeddingsDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "mistral": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "embedding": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "title": "Embedding",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "embedding"
                                ],
                                "title": "EmbeddingDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textembeddingsEmbeddingsDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "jina": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "embedding": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "title": "Embedding",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "embedding"
                                ],
                                "title": "EmbeddingDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textembeddingsEmbeddingsDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "embedding": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "title": "Embedding",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "embedding"
                                ],
                                "title": "EmbeddingDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textembeddingsEmbeddingsDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "embedding": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "title": "Embedding",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "embedding"
                                ],
                                "title": "EmbeddingDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textembeddingsEmbeddingsDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "embedding": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "title": "Embedding",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "embedding"
                                ],
                                "title": "EmbeddingDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textembeddingsEmbeddingsDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textembeddingsResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "cohere": {
                        "items": [
                          {
                            "embedding": [
                              3.8632812,
                              0.50927734,
                              2.2109375,
                              -0.8208008,
                              -0.1071167,
                              -0.22253418,
                              -0.5698242,
                              -0.4506836,
                              0.43188477,
                              0.97216797
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "mistral": {
                        "items": [
                          {
                            "embedding": [
                              -0.0220947265625,
                              0.040863037109375,
                              0.055389404296875,
                              0.03546142578125,
                              0.025726318359375,
                              0.0357666015625,
                              0.01177978515625,
                              0.0309600830078125,
                              -0.0310211181640625,
                              -0.0284881591796875
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "jina": {
                        "items": [
                          {
                            "embedding": [
                              -0.0047852774,
                              0.0048640342,
                              -0.01645707,
                              -0.024395779,
                              -0.017263541,
                              0.012512918,
                              -0.019191515,
                              0.009053908,
                              -0.010213212,
                              -0.026890801
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "items": [
                          {
                            "embedding": [
                              -0.0047852774,
                              0.0048640342,
                              -0.01645707,
                              -0.024395779,
                              -0.017263541,
                              0.012512918,
                              -0.019191515,
                              0.009053908,
                              -0.010213212,
                              -0.026890801
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "items": [
                          {
                            "embedding": [
                              0.027175916358828545,
                              0.010277487337589264,
                              0.003436307655647397,
                              0.02837119624018669,
                              0.044907715171575546,
                              -0.016265053302049637,
                              0.010080956853926182,
                              0.002023588167503476,
                              -0.020589638501405716,
                              0.012744131498038769
                            ]
                          },
                          {
                            "embedding": [
                              0.0001314455730607733,
                              0.015687013044953346,
                              -0.002990683540701866,
                              0.02059912495315075,
                              0.028040403500199318,
                              -0.01405489444732666,
                              0.042016930878162384,
                              0.013006427325308323,
                              -0.022377343848347664,
                              0.0183300469070673
                            ]
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/emotion_detection": {
      "post": {
        "operationId": "text_emotion_detection_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**nlpcloud**|`v1`|25.0 (per 1000 request)|1 request\n|**vernai**|`v1`|2.0 (per 1000 request)|1 request\n\n\n</details>\n\n",
        "summary": "Emotion Detection",
        "tags": [
          "Emotion Detection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "nlpcloud,vernai",
                    "text": "I'm scared!"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in EmotionAnalysisDataClass to list emotion analysed.\nArgs:\n    - emotion (EmotionEnum): emotion of the text\n    - emotion_score (float): score of the emotion",
                                "properties": {
                                  "emotion": {
                                    "title": "Emotion",
                                    "type": "string"
                                  },
                                  "emotion_score": {
                                    "maximum": 100,
                                    "minimum": 0,
                                    "title": "Emotion Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "emotion",
                                  "emotion_score"
                                ],
                                "title": "EmotionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textemotion_detectionEmotionDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "vernai": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in EmotionAnalysisDataClass to list emotion analysed.\nArgs:\n    - emotion (EmotionEnum): emotion of the text\n    - emotion_score (float): score of the emotion",
                                "properties": {
                                  "emotion": {
                                    "title": "Emotion",
                                    "type": "string"
                                  },
                                  "emotion_score": {
                                    "maximum": 100,
                                    "minimum": 0,
                                    "title": "Emotion Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "emotion",
                                  "emotion_score"
                                ],
                                "title": "EmotionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textemotion_detectionEmotionDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textemotion_detectionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "nlpcloud": {
                        "text": "I'm scared",
                        "items": [
                          {
                            "emotion": "Fear",
                            "emotion_score": 99.74
                          },
                          {
                            "emotion": "Anger",
                            "emotion_score": 0.12
                          },
                          {
                            "emotion": "Surprise",
                            "emotion_score": 0.05
                          },
                          {
                            "emotion": "Sadness",
                            "emotion_score": 0.04
                          },
                          {
                            "emotion": "Joy",
                            "emotion_score": 0.03
                          },
                          {
                            "emotion": "Love",
                            "emotion_score": 0.01
                          }
                        ],
                        "cost": 0
                      },
                      "vernai": {
                        "text": "I'm scared",
                        "items": [
                          {
                            "emotion": "Fear",
                            "emotion_score": 51
                          },
                          {
                            "emotion": "Sadness",
                            "emotion_score": 51
                          },
                          {
                            "emotion": "Anger",
                            "emotion_score": 0
                          },
                          {
                            "emotion": "Love",
                            "emotion_score": 0
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/entity_sentiment": {
      "post": {
        "operationId": "text_entity_sentiment_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**amazon**|`boto3 1.26.8`|1.0 (per 1000000 char)|300 char\n|**google**|`v1`|2.0 (per 1000000 char)|1000 char\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**English**|`en`|\n|**Japanese**|`ja`|\n|**Spanish**|`es`|\n\n</details>",
        "summary": "Entity Sentiment",
        "tags": [
          "Entity Sentiment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "amazon,google",
                    "language": "en",
                    "text": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "type": {
                                    "description": "Recognized Entity type",
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "text": {
                                    "description": "Text corresponding to the entity",
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral",
                                          "Mixed"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "begin_offset": {
                                    "default": null,
                                    "title": "Begin Offset",
                                    "type": "integer"
                                  },
                                  "end_offset": {
                                    "default": null,
                                    "title": "End Offset",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text",
                                  "sentiment"
                                ],
                                "title": "Entity",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "items",
                            "status"
                          ],
                          "title": "textentity_sentimentEntitySentimentDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "type": {
                                    "description": "Recognized Entity type",
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "text": {
                                    "description": "Text corresponding to the entity",
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral",
                                          "Mixed"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "begin_offset": {
                                    "default": null,
                                    "title": "Begin Offset",
                                    "type": "integer"
                                  },
                                  "end_offset": {
                                    "default": null,
                                    "title": "End Offset",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text",
                                  "sentiment"
                                ],
                                "title": "Entity",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "items",
                            "status"
                          ],
                          "title": "textentity_sentimentEntitySentimentDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textentity_sentimentResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "amazon": {
                        "items": [
                          {
                            "type": "PERSON",
                            "text": "He",
                            "sentiment": "Neutral",
                            "begin_offset": 223,
                            "end_offset": 225
                          },
                          {
                            "type": "PERSON",
                            "text": "Barack Hussein Obama",
                            "sentiment": "Neutral",
                            "begin_offset": 0,
                            "end_offset": 20
                          },
                          {
                            "type": "OTHER",
                            "text": "president",
                            "sentiment": "Neutral",
                            "begin_offset": 191,
                            "end_offset": 200
                          },
                          {
                            "type": "PERSON",
                            "text": "Obama",
                            "sentiment": "Neutral",
                            "begin_offset": 154,
                            "end_offset": 159
                          },
                          {
                            "type": "PERSON",
                            "text": "politician",
                            "sentiment": "Neutral",
                            "begin_offset": 36,
                            "end_offset": 46
                          },
                          {
                            "type": "PERSON",
                            "text": "44th",
                            "sentiment": "Neutral",
                            "begin_offset": 65,
                            "end_offset": 69
                          },
                          {
                            "type": "OTHER",
                            "text": "president",
                            "sentiment": "Neutral",
                            "begin_offset": 70,
                            "end_offset": 79
                          },
                          {
                            "type": "ORGANIZATION",
                            "text": "U.S.",
                            "sentiment": "Neutral",
                            "begin_offset": 249,
                            "end_offset": 253
                          },
                          {
                            "type": "ORGANIZATION",
                            "text": "United States",
                            "sentiment": "Neutral",
                            "begin_offset": 87,
                            "end_offset": 100
                          },
                          {
                            "type": "ORGANIZATION",
                            "text": "United States",
                            "sentiment": "Neutral",
                            "begin_offset": 208,
                            "end_offset": 221
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "items": [
                          {
                            "type": "PERSON",
                            "text": "Barack Hussein Obama",
                            "sentiment": "Neutral",
                            "begin_offset": null,
                            "end_offset": null
                          },
                          {
                            "type": "PERSON",
                            "text": "politician",
                            "sentiment": "Neutral",
                            "begin_offset": 36,
                            "end_offset": 46
                          },
                          {
                            "type": "PERSON",
                            "text": "Obama",
                            "sentiment": "Neutral",
                            "begin_offset": 154,
                            "end_offset": 159
                          },
                          {
                            "type": "PERSON",
                            "text": "member",
                            "sentiment": "Neutral",
                            "begin_offset": 122,
                            "end_offset": 128
                          },
                          {
                            "type": "PERSON",
                            "text": "president",
                            "sentiment": "Neutral",
                            "begin_offset": 191,
                            "end_offset": 200
                          },
                          {
                            "type": "LOCATION",
                            "text": "American",
                            "sentiment": "Neutral",
                            "begin_offset": 27,
                            "end_offset": 35
                          },
                          {
                            "type": "LOCATION",
                            "text": "United States",
                            "sentiment": "Neutral",
                            "begin_offset": 87,
                            "end_offset": 100
                          },
                          {
                            "type": "LOCATION",
                            "text": "United States",
                            "sentiment": "Neutral",
                            "begin_offset": 208,
                            "end_offset": 221
                          },
                          {
                            "type": "LOCATION",
                            "text": "U.S.",
                            "sentiment": "Neutral",
                            "begin_offset": 249,
                            "end_offset": 253
                          },
                          {
                            "type": "PERSON",
                            "text": "president",
                            "sentiment": "Neutral",
                            "begin_offset": 70,
                            "end_offset": 79
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/generation": {
      "post": {
        "operationId": "text_generation_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Model|Version|Price|Billing unit|\n|----|----|-------|-----|------------|\n|**cohere**|**command**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**cohere**|**command-light**|`2022-12-06`|0.6 (per 1000000 token)|1 token\n|**cohere**|**command-nightly**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**cohere**|**command-light-nightly**|`2022-12-06`|0.6 (per 1000000 token)|1 token\n|**cohere**|-|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**openai**|-|`v1`|2.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-instruct**|`v1`|2.0 (per 1000000 token)|1 token\n|**openai**|**text-babbage-002**|`v1`|0.4 (per 1000000 token)|1 token\n|**openai**|**text-davinci-002**|`v1`|2.0 (per 1000000 token)|1 token\n|**google**|-|`v1`|0.375 (per 1000000 char)|1000 char\n|**google**|**gemini-pro**|`v1`|0.375 (per 1000000 char)|1000 char\n|**google**|**text-bison**|`v1`|0.5 (per 1000000 char)|1000 char\n|**ai21labs**|-|`v1`|0.0188 (per 1000 token)|1 token\n|**ai21labs**|**j2-mid**|`v1`|0.0125 (per 1000 token)|1 token\n|**ai21labs**|**j2-ultra**|`v1`|0.0188 (per 1000 token)|1 token\n|**anthropic**|**claude-instant-v1**|`bedrock-2023-05-31`|2.4 (per 1000000 token)|1 token\n|**anthropic**|**claude-v1**|`bedrock-2023-05-31`|24.0 (per 1000000 token)|1 token\n|**anthropic**|**claude-v2**|`bedrock-2023-05-31`|24.0 (per 1000000 token)|1 token\n|**anthropic**|-|`bedrock-2023-05-31`|24.0 (per 1000000 token)|1 token\n|**mistral**|-|`v0.0.1`|24.0 (per 1000000 token)|1 token\n|**mistral**|**medium**|`v0.0.1`|8.1 (per 1000000 token)|1 token\n|**mistral**|**tiny**|`v0.0.1`|0.42 (per 1000000 token)|1 token\n|**mistral**|**large-latest**|`v0.0.1`|24.0 (per 1000000 token)|1 token\n|**mistral**|**small**|`v0.0.1`|6.0 (per 1000000 token)|1 token\n|**amazon**|-|`v1`|1.6 (per 1000000 token)|1 token\n|**amazon**|**titan-text-express-v1**|`v1`|1.6 (per 1000000 token)|1 token\n|**amazon**|**titan-text-lite-v1**|`v1`|0.4 (per 1000000 token)|1 token\n|**amazon**|**titan-tg1-large**|`v1`|1.6 (per 1000000 token)|1 token\n|**meta**|**llama2-13b-chat-v1**|`v1`|1.0 (per 1000000 token)|1 token\n|**meta**|**llama2-70b-chat-v1**|`v1`|2.56 (per 1000000 token)|1 token\n|**meta**|-|`v1`|2.56 (per 1000000 token)|1 token\n|**meta**|**llama3-8b-instruct-v1:0**|`v1`|0.6 (per 1000000 token)|1 token\n|**meta**|**llama3-70b-instruct-v1:0**|`v1`|3.5 (per 1000000 token)|1 token\n\n\n</details>\n\n<details><summary>Supported Models</summary><details><summary>cohere</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**cohere**|`command`|\n||`command-light`|\n||`command-light-nightly`|\n||`command-nightly`|\n\n</details><details><summary>openai</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**openai**|`gpt-3.5-turbo-instruct`|\n||`text-babbage-002`|\n||`text-davinci-002`|\n\n</details><details><summary>google</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**google**|`gemini-pro`|\n||`text-bison`|\n\n</details><details><summary>ai21labs</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**ai21labs**|`j2-mid`|\n||`j2-ultra`|\n\n</details><details><summary>anthropic</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**anthropic**|`claude-instant-v1`|\n||`claude-v1`|\n||`claude-v2`|\n\n</details><details><summary>mistral</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**mistral**|`large-latest`|\n||`medium`|\n||`small`|\n||`tiny`|\n\n</details><details><summary>amazon</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**amazon**|`titan-text-express-v1`|\n||`titan-text-lite-v1`|\n||`titan-tg1-large`|\n\n</details><details><summary>meta</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**meta**|`llama2-13b-chat-v1`|\n||`llama2-70b-chat-v1`|\n||`llama3-70b-instruct-v1:0`|\n||`llama3-8b-instruct-v1:0`|\n\n</details>\n\n</details>",
        "summary": "Generation",
        "tags": [
          "Generation"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Enter your prompt"
                  },
                  "temperature": {
                    "type": "number",
                    "format": "double",
                    "maximum": 1,
                    "minimum": 0,
                    "default": 0,
                    "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
                  },
                  "max_tokens": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1000,
                    "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "mistral,anthropic,cohere,ai21labs,openai,meta,amazon,google",
                    "text": "The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\nHuman: Hello, who are you?",
                    "max_tokens": 10,
                    "temperature": 0
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ai21labs": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "meta": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "anthropic": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "mistral": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "clarifai": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "generated_text": {
                              "title": "Generated Text",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "generated_text",
                            "status"
                          ],
                          "title": "textgenerationGenerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textgenerationResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "mistral": {
                        "generated_text": "AI Assistant: Hello! I'm an AI assistant, a helpful, creative, clever, and very friendly entity designed to",
                        "cost": 0
                      },
                      "anthropic": {
                        "generated_text": " I'm Claude, an AI assistant created by Anthropic.",
                        "cost": 0
                      },
                      "cohere": {
                        "generated_text": "\n\nAssistant: I'm a trained AI",
                        "cost": 0
                      },
                      "ai21labs": {
                        "generated_text": "\nI am an AI assistant. I am here to help with a variety of tasks, such as answering questions, playing music, and providing general information.",
                        "cost": 0
                      },
                      "openai": {
                        "generated_text": "\n\nAI Assistant: Hello! I am your AI assistant. I am here to help you with anything you need. What can",
                        "cost": 0
                      },
                      "meta": {
                        "generated_text": " *big virtual smile* I'm so glad you asked! I'm an AI assistant, which means I'm a computer program designed to help and chat with humans like you. I don't have a personal name, but you can call me \"Lumina\" if you'd like - it's a name that means \"light\" in Latin, and I'm here to shed some light on any questions or topics you'd like to discuss! What brings you here today?",
                        "cost": 0
                      },
                      "amazon": {
                        "generated_text": "Sorry - this model is unable to respond to this request.",
                        "cost": 0
                      },
                      "google": {
                        "generated_text": " AI Assistant: Greetings! I'm your friendly AI assistant, here to help you with any questions or tasks you may have",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/keyword_extraction": {
      "post": {
        "operationId": "text_keyword_extraction_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char\n|**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char\n|**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char\n|**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**tenstorrent**|`v1.0.0`|0.7 (per 1000000 char)|1000 char\n|**nlpcloud**|`v1`|25.0 (per 1000 request)|1 request\n|**corticalio**|`v1.3.0`|0.97 (per 1000 request)|1 request\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Achinese**|`ace`|\n|**Afrikaans**|`af`|\n|**Akan**|`ak`|\n|**Amharic**|`am`|\n|**Arabic**|`ar`|\n|**Armenian**|`hy`|\n|**Assamese**|`as`|\n|**Asturian**|`ast`|\n|**Awadhi**|`awa`|\n|**Ayacucho Quechua**|`quy`|\n|**Balinese**|`ban`|\n|**Bambara**|`bm`|\n|**Banjar**|`bjn`|\n|**Bashkir**|`ba`|\n|**Basque**|`eu`|\n|**Belarusian**|`be`|\n|**Bemba (Zambia)**|`bem`|\n|**Bengali**|`bn`|\n|**Bhojpuri**|`bho`|\n|**Bosnian**|`bs`|\n|**Buginese**|`bug`|\n|**Bulgarian**|`bg`|\n|**Burmese**|`my`|\n|**Catalan**|`ca`|\n|**Cebuano**|`ceb`|\n|**Central Atlas Tamazight**|`tzm`|\n|**Central Aymara**|`ayr`|\n|**Central Kanuri**|`knc`|\n|**Central Kurdish**|`ckb`|\n|**Chhattisgarhi**|`hne`|\n|**Chinese**|`zh`|\n|**Chokwe**|`cjk`|\n|**Crimean Tatar**|`crh`|\n|**Croatian**|`hr`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**Dyula**|`dyu`|\n|**Dzongkha**|`dz`|\n|**Eastern Yiddish**|`ydd`|\n|**Egyptian Arabic**|`arz`|\n|**English**|`en`|\n|**Esperanto**|`eo`|\n|**Estonian**|`et`|\n|**Ewe**|`ee`|\n|**Faroese**|`fo`|\n|**Fijian**|`fj`|\n|**Finnish**|`fi`|\n|**Fon**|`fon`|\n|**French**|`fr`|\n|**Friulian**|`fur`|\n|**Galician**|`gl`|\n|**Ganda**|`lg`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Guarani**|`gn`|\n|**Gujarati**|`gu`|\n|**Haitian**|`ht`|\n|**Halh Mongolian**|`khk`|\n|**Hausa**|`ha`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Hungarian**|`hu`|\n|**Icelandic**|`is`|\n|**Igbo**|`ig`|\n|**Iloko**|`ilo`|\n|**Indonesian**|`id`|\n|**Irish**|`ga`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Javanese**|`jv`|\n|**Kabiyè**|`kbp`|\n|**Kabuverdianu**|`kea`|\n|**Kabyle**|`kab`|\n|**Kachin**|`kac`|\n|**Kamba (Kenya)**|`kam`|\n|**Kannada**|`kn`|\n|**Kashmiri**|`ks`|\n|**Kazakh**|`kk`|\n|**Khmer**|`km`|\n|**Kikuyu**|`ki`|\n|**Kimbundu**|`kmb`|\n|**Kinyarwanda**|`rw`|\n|**Kirghiz**|`ky`|\n|**Kongo**|`kg`|\n|**Korean**|`ko`|\n|**Lao**|`lo`|\n|**Latgalian**|`ltg`|\n|**Latvian**|`lv`|\n|**Ligurian**|`lij`|\n|**Limburgan**|`li`|\n|**Lingala**|`ln`|\n|**Lithuanian**|`lt`|\n|**Lombard**|`lmo`|\n|**Luba-Katanga**|`lu`|\n|**Luo (Kenya and Tanzania)**|`luo`|\n|**Lushai**|`lus`|\n|**Luxembourgish**|`lb`|\n|**Macedonian**|`mk`|\n|**Magahi**|`mag`|\n|**Maithili**|`mai`|\n|**Malayalam**|`ml`|\n|**Maltese**|`mt`|\n|**Manipuri**|`mni`|\n|**Maori**|`mi`|\n|**Marathi**|`mr`|\n|**Mesopotamian Arabic**|`acm`|\n|**Minangkabau**|`min`|\n|**Modern Greek (1453-)**|`el`|\n|**Moroccan Arabic**|`ary`|\n|**Mossi**|`mos`|\n|**Najdi Arabic**|`ars`|\n|**Nepali (macrolanguage)**|`ne`|\n|**Nigerian Fulfulde**|`fuv`|\n|**North Azerbaijani**|`azj`|\n|**North Levantine Arabic**|`apc`|\n|**Northern Kurdish**|`kmr`|\n|**Northern Uzbek**|`uzn`|\n|**Norwegian**|`no`|\n|**Norwegian Bokmål**|`nb`|\n|**Norwegian Nynorsk**|`nn`|\n|**Nuer**|`nus`|\n|**Nyanja**|`ny`|\n|**Occitan (post 1500)**|`oc`|\n|**Oriya (macrolanguage)**|`or`|\n|**Pangasinan**|`pag`|\n|**Panjabi**|`pa`|\n|**Papiamento**|`pap`|\n|**Pedi**|`nso`|\n|**Persian**|`fa`|\n|**Plateau Malagasy**|`plt`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Romanian**|`ro`|\n|**Rundi**|`rn`|\n|**Russian**|`ru`|\n|**Samoan**|`sm`|\n|**Sango**|`sg`|\n|**Sanskrit**|`sa`|\n|**Santali**|`sat`|\n|**Sardinian**|`sc`|\n|**Scottish Gaelic**|`gd`|\n|**Serbian**|`sr`|\n|**Shan**|`shn`|\n|**Shona**|`sn`|\n|**Sicilian**|`scn`|\n|**Silesian**|`szl`|\n|**Sindhi**|`sd`|\n|**Sinhala**|`si`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**Somali**|`so`|\n|**South Azerbaijani**|`azb`|\n|**South Levantine Arabic**|`ajp`|\n|**Southern Pashto**|`pbt`|\n|**Southern Sotho**|`st`|\n|**Southwestern Dinka**|`dik`|\n|**Spanish**|`es`|\n|**Standard Latvian**|`lvs`|\n|**Standard Malay**|`zsm`|\n|**Sundanese**|`su`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swati**|`ss`|\n|**Swedish**|`sv`|\n|**Ta'izzi-Adeni Arabic**|`acq`|\n|**Tagalog**|`tl`|\n|**Tajik**|`tg`|\n|**Tamashek**|`tmh`|\n|**Tamil**|`ta`|\n|**Tatar**|`tt`|\n|**Telugu**|`te`|\n|**Thai**|`th`|\n|**Tibetan**|`bo`|\n|**Tigrinya**|`ti`|\n|**Tok Pisin**|`tpi`|\n|**Tosk Albanian**|`als`|\n|**Tsonga**|`ts`|\n|**Tswana**|`tn`|\n|**Tumbuka**|`tum`|\n|**Tunisian Arabic**|`aeb`|\n|**Turkish**|`tr`|\n|**Turkmen**|`tk`|\n|**Twi**|`tw`|\n|**Uighur**|`ug`|\n|**Ukrainian**|`uk`|\n|**Umbundu**|`umb`|\n|**Urdu**|`ur`|\n|**Venetian**|`vec`|\n|**Vietnamese**|`vi`|\n|**Waray (Philippines)**|`war`|\n|**Welsh**|`cy`|\n|**West Central Oromo**|`gaz`|\n|**Wolof**|`wo`|\n|**Xhosa**|`xh`|\n|**Yoruba**|`yo`|\n|**Yue Chinese**|`yue`|\n|**Zulu**|`zu`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Arabic (world)**|`ar-001`|\n|**Chinese (Simplified)**|`zh-Hans`|\n|**Chinese (Taiwan)**|`zh-TW`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**Persian (Afghanistan)**|`fa-AF`|\n|**Portuguese (Brazil)**|`pt-BR`|\n|**Portuguese (Portugal)**|`pt-PT`|\n\n</details>",
        "summary": "Keyword Extraction",
        "tags": [
          "Keyword Extraction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "amazon,ibm,corticalio,emvista,openai,microsoft,nlpcloud,tenstorrent",
                    "language": "en",
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "oneai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "emvista": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "ibm": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "corticalio": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "tenstorrent": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "eden-ai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "keyword": {
                                    "title": "Keyword",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "keyword",
                                  "importance"
                                ],
                                "title": "InfosKeywordExtractionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textkeyword_extractionKeywordExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textkeyword_extractionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "amazon": {
                        "items": [
                          {
                            "keyword": "Barack Hussein Obama",
                            "importance": 1
                          },
                          {
                            "keyword": "an American politician",
                            "importance": 1
                          },
                          {
                            "keyword": "the 44th president",
                            "importance": 1
                          },
                          {
                            "keyword": "the United States",
                            "importance": 1
                          },
                          {
                            "keyword": "2009 to 2017",
                            "importance": 1
                          },
                          {
                            "keyword": "A member",
                            "importance": 1
                          },
                          {
                            "keyword": "the Democratic Party",
                            "importance": 1
                          },
                          {
                            "keyword": "Obama",
                            "importance": 0.97
                          },
                          {
                            "keyword": "the first African-American president",
                            "importance": 1
                          },
                          {
                            "keyword": "the United States",
                            "importance": 1
                          }
                        ],
                        "cost": 0
                      },
                      "ibm": {
                        "items": [
                          {
                            "keyword": "member of the Democratic Party",
                            "importance": 0.94
                          },
                          {
                            "keyword": "Barack Hussein Obama",
                            "importance": 0.94
                          },
                          {
                            "keyword": "American politician",
                            "importance": 0.91
                          },
                          {
                            "keyword": "Illinois",
                            "importance": 0.57
                          },
                          {
                            "keyword": "Obama",
                            "importance": 0.56
                          },
                          {
                            "keyword": "U.S. senator",
                            "importance": 0.47
                          },
                          {
                            "keyword": "44th president of the United States",
                            "importance": 0.4
                          },
                          {
                            "keyword": "Illinois state senator",
                            "importance": 0.34
                          },
                          {
                            "keyword": "first African-American president of the United States",
                            "importance": 0.18
                          }
                        ],
                        "cost": 0
                      },
                      "corticalio": {
                        "items": [
                          {
                            "keyword": "president of the united states",
                            "importance": 1
                          },
                          {
                            "keyword": "obama",
                            "importance": 0.86
                          },
                          {
                            "keyword": "american politician who served",
                            "importance": 0.7
                          },
                          {
                            "keyword": "member of the democratic party",
                            "importance": 0.63
                          },
                          {
                            "keyword": "illinois state",
                            "importance": 0.6
                          },
                          {
                            "keyword": "hussein",
                            "importance": 0.51
                          },
                          {
                            "keyword": "barack",
                            "importance": 0.47
                          }
                        ],
                        "cost": 0
                      },
                      "emvista": {
                        "items": [
                          {
                            "keyword": "Barack",
                            "importance": 0.25
                          },
                          {
                            "keyword": "Hussein",
                            "importance": 0.25
                          },
                          {
                            "keyword": "Obama",
                            "importance": 0.5
                          },
                          {
                            "keyword": "be",
                            "importance": 0.5
                          },
                          {
                            "keyword": "a",
                            "importance": 1
                          },
                          {
                            "keyword": "american",
                            "importance": 0.5
                          },
                          {
                            "keyword": "politician",
                            "importance": 0.25
                          },
                          {
                            "keyword": "serve",
                            "importance": 0.5
                          },
                          {
                            "keyword": "as",
                            "importance": 0.75
                          },
                          {
                            "keyword": "44th",
                            "importance": 0.25
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "items": [
                          {
                            "keyword": "Barack Hussein Obama",
                            "importance": 0.9
                          },
                          {
                            "keyword": "American politician",
                            "importance": 0.8
                          },
                          {
                            "keyword": "44th president",
                            "importance": 0.7
                          },
                          {
                            "keyword": "United States",
                            "importance": 0.8
                          },
                          {
                            "keyword": "Democratic Party",
                            "importance": 0.6
                          },
                          {
                            "keyword": "African-American president",
                            "importance": 0.9
                          },
                          {
                            "keyword": "U.S. senator",
                            "importance": 0.7
                          },
                          {
                            "keyword": "Illinois state senator",
                            "importance": 0.6
                          }
                        ],
                        "cost": 0
                      },
                      "microsoft": {
                        "items": [
                          {
                            "keyword": "U.S. senator",
                            "importance": null
                          },
                          {
                            "keyword": "first African-American president",
                            "importance": null
                          },
                          {
                            "keyword": "Barack Hussein Obama",
                            "importance": null
                          },
                          {
                            "keyword": "Illinois state senator",
                            "importance": null
                          },
                          {
                            "keyword": "44th president",
                            "importance": null
                          },
                          {
                            "keyword": "American politician",
                            "importance": null
                          },
                          {
                            "keyword": "United States",
                            "importance": null
                          },
                          {
                            "keyword": "Democratic Party",
                            "importance": null
                          },
                          {
                            "keyword": "member",
                            "importance": null
                          }
                        ],
                        "cost": 0
                      },
                      "nlpcloud": {
                        "items": [
                          {
                            "keyword": "Barack Obama",
                            "importance": null
                          },
                          {
                            "keyword": "44th president",
                            "importance": null
                          },
                          {
                            "keyword": "United States",
                            "importance": null
                          },
                          {
                            "keyword": "Democratic Party",
                            "importance": null
                          },
                          {
                            "keyword": "African-American",
                            "importance": null
                          },
                          {
                            "keyword": "U.S. senator",
                            "importance": null
                          },
                          {
                            "keyword": "Illinois",
                            "importance": null
                          },
                          {
                            "keyword": "2005-2008",
                            "importance": null
                          },
                          {
                            "keyword": "Illinois state senator",
                            "importance": null
                          },
                          {
                            "keyword": "1997-2004.",
                            "importance": null
                          }
                        ],
                        "cost": 0
                      },
                      "tenstorrent": {
                        "items": [
                          {
                            "keyword": "barack hussein obama",
                            "importance": 1
                          },
                          {
                            "keyword": "democratic party",
                            "importance": 0.98
                          },
                          {
                            "keyword": "u. s. senator",
                            "importance": 0.98
                          },
                          {
                            "keyword": "illinois state",
                            "importance": 0.96
                          },
                          {
                            "keyword": "president of the united states",
                            "importance": 0.91
                          },
                          {
                            "keyword": "african - american president",
                            "importance": 0.86
                          }
                        ],
                        "cost": 0
                      },
                      "eden-ai": {
                        "items": [
                          {
                            "keyword": "the first African-American president",
                            "importance": 1
                          },
                          {
                            "keyword": "member of the Democratic Party",
                            "importance": 0.94
                          },
                          {
                            "keyword": "president of the united states",
                            "importance": 1
                          },
                          {
                            "keyword": "american politician who served",
                            "importance": 0.7
                          },
                          {
                            "keyword": "an American politician",
                            "importance": 1
                          },
                          {
                            "keyword": "barack hussein obama",
                            "importance": 1
                          },
                          {
                            "keyword": "the 44th president",
                            "importance": 1
                          },
                          {
                            "keyword": "illinois state",
                            "importance": 0.96
                          },
                          {
                            "keyword": "u. s. senator",
                            "importance": 0.98
                          },
                          {
                            "keyword": "2009 to 2017",
                            "importance": 1
                          },
                          {
                            "keyword": "U.S. senator",
                            "importance": 0.7
                          },
                          {
                            "keyword": "A member",
                            "importance": 1
                          }
                        ],
                        "status": "success",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/moderation": {
      "post": {
        "operationId": "text_moderation_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**microsoft**|`v1.0`|1.0 (per 1000 request)|1 request\n|**openai**|`v3.0.0`|free|-\n|**clarifai**|`8.0.0`|1.2 (per 1000 request)|1 request\n|**google**|`v1`|5.0 (per 1000000 char)|100 char\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Afrikaans**|`af`|\n|**Albanian**|`sq`|\n|**Amharic**|`am`|\n|**Arabic**|`ar`|\n|**Aragonese**|`an`|\n|**Armenian**|`hy`|\n|**Assamese**|`as`|\n|**Asturian**|`ast`|\n|**Azerbaijani**|`az`|\n|**Bashkir**|`ba`|\n|**Basque**|`eu`|\n|**Bavarian**|`bar`|\n|**Belarusian**|`be`|\n|**Bengali**|`bn`|\n|**Bishnupriya**|`bpy`|\n|**Bosnian**|`bs`|\n|**Breton**|`br`|\n|**Bulgarian**|`bg`|\n|**Burmese**|`my`|\n|**Catalan**|`ca`|\n|**Cebuano**|`ceb`|\n|**Central Kurdish**|`ckb`|\n|**Chechen**|`ce`|\n|**Cherokee**|`chr`|\n|**Chinese**|`zh`|\n|**Chuvash**|`cv`|\n|**Croatian**|`hr`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**Estonian**|`et`|\n|**Filipino**|`fil`|\n|**Finnish**|`fi`|\n|**French**|`fr`|\n|**Fulah**|`ff`|\n|**Galician**|`gl`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Gujarati**|`gu`|\n|**Haitian**|`ht`|\n|**Hausa**|`ha`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Hungarian**|`hu`|\n|**Icelandic**|`is`|\n|**Ido**|`io`|\n|**Igbo**|`ig`|\n|**Indonesian**|`id`|\n|**Inuktitut**|`iu`|\n|**Irish**|`ga`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Javanese**|`jv`|\n|**Kannada**|`kn`|\n|**Kazakh**|`kk`|\n|**Khmer**|`km`|\n|**Kinyarwanda**|`rw`|\n|**Kirghiz**|`ky`|\n|**Konkani (macrolanguage)**|`kok`|\n|**Korean**|`ko`|\n|**Lahnda**|`lah`|\n|**Lao**|`lo`|\n|**Latin**|`la`|\n|**Latvian**|`lv`|\n|**Lithuanian**|`lt`|\n|**Lombard**|`lmo`|\n|**Low German**|`nds`|\n|**Luxembourgish**|`lb`|\n|**Macedonian**|`mk`|\n|**Malagasy**|`mg`|\n|**Malay (macrolanguage)**|`ms`|\n|**Malayalam**|`ml`|\n|**Maltese**|`mt`|\n|**Maori**|`mi`|\n|**Marathi**|`mr`|\n|**Minangkabau**|`min`|\n|**Modern Greek (1453-)**|`el`|\n|**Mongolian**|`mn`|\n|**Nepali (macrolanguage)**|`ne`|\n|**Norwegian**|`no`|\n|**Norwegian Bokmål**|`nb`|\n|**Norwegian Nynorsk**|`nn`|\n|**Occitan (post 1500)**|`oc`|\n|**Oriya (macrolanguage)**|`or`|\n|**Panjabi**|`pa`|\n|**Pedi**|`nso`|\n|**Persian**|`fa`|\n|**Piemontese**|`pms`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Pushto**|`ps`|\n|**Quechua**|`qu`|\n|**Romanian**|`ro`|\n|**Russian**|`ru`|\n|**Scots**|`sco`|\n|**Scottish Gaelic**|`gd`|\n|**Serbian**|`sr`|\n|**Serbo-Croatian**|`sh`|\n|**Sicilian**|`scn`|\n|**Sindhi**|`sd`|\n|**Sinhala**|`si`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**South Azerbaijani**|`azb`|\n|**Southern Sotho**|`st`|\n|**Spanish**|`es`|\n|**Sundanese**|`su`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swedish**|`sv`|\n|**Tagalog**|`tl`|\n|**Tajik**|`tg`|\n|**Tamil**|`ta`|\n|**Tatar**|`tt`|\n|**Telugu**|`te`|\n|**Thai**|`th`|\n|**Tigrinya**|`ti`|\n|**Tswana**|`tn`|\n|**Turkish**|`tr`|\n|**Turkmen**|`tk`|\n|**Uighur**|`ug`|\n|**Ukrainian**|`uk`|\n|**Urdu**|`ur`|\n|**Uzbek**|`uz`|\n|**Vietnamese**|`vi`|\n|**Volapük**|`vo`|\n|**Waray (Philippines)**|`war`|\n|**Welsh**|`cy`|\n|**Western Frisian**|`fy`|\n|**Wolof**|`wo`|\n|**Xhosa**|`xh`|\n|**Yoruba**|`yo`|\n|**Zulu**|`zu`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**Low German (Netherlands)**|`nds-NL`|\n\n</details>",
        "summary": "Moderation",
        "tags": [
          "Moderation"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "google,openai,clarifai,microsoft",
                    "language": "en",
                    "text": "Is this a crap email abcdef@abcd.com, phone: 0617730730, IP: 255.255.255.255, 1 Microsoft Way, Redmond, WA 98052"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "nsfw_likelihood": {
                              "title": "Nsfw Likelihood",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "label": {
                                    "title": "Label",
                                    "type": "string"
                                  },
                                  "likelihood": {
                                    "title": "Likelihood",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "Insult",
                                          "Obscene",
                                          "Derogatory",
                                          "Profanity",
                                          "Threat",
                                          "Toxic"
                                        ],
                                        "title": "ToxicSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "MiddleFinger",
                                          "PublicSafety",
                                          "Health",
                                          "Explicit",
                                          "QRCode",
                                          "Medical",
                                          "Politics",
                                          "Legal"
                                        ],
                                        "title": "ContentSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SexualActivity",
                                          "SexualSituations",
                                          "Nudity",
                                          "PartialNudity",
                                          "Suggestive",
                                          "AdultToys",
                                          "RevealingClothes",
                                          "Sexual"
                                        ],
                                        "title": "SexualSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "GraphicViolenceOrGore",
                                          "PhysicalViolence",
                                          "WeaponViolence",
                                          "Violence"
                                        ],
                                        "title": "ViolenceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "DrugProducts",
                                          "DrugUse",
                                          "Tobacco",
                                          "Smoking",
                                          "Alcohol",
                                          "Drinking"
                                        ],
                                        "title": "DrugAndAlcoholSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Gambling",
                                          "Finance",
                                          "MoneyContent"
                                        ],
                                        "title": "FinanceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Hate",
                                          "Harassment",
                                          "Threatening",
                                          "Extremist",
                                          "Racy"
                                        ],
                                        "title": "HateAndExtremismSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Safe",
                                          "NotSafe"
                                        ],
                                        "title": "SafeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "likelihood_score": {
                                    "title": "Likelihood Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "label",
                                  "likelihood",
                                  "category",
                                  "subcategory",
                                  "likelihood_score"
                                ],
                                "title": "TextModerationItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "nsfw_likelihood_score": {
                              "title": "Nsfw Likelihood Score",
                              "type": "integer"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "nsfw_likelihood",
                            "nsfw_likelihood_score",
                            "status"
                          ],
                          "title": "textmoderationModerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "nsfw_likelihood": {
                              "title": "Nsfw Likelihood",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "label": {
                                    "title": "Label",
                                    "type": "string"
                                  },
                                  "likelihood": {
                                    "title": "Likelihood",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "Insult",
                                          "Obscene",
                                          "Derogatory",
                                          "Profanity",
                                          "Threat",
                                          "Toxic"
                                        ],
                                        "title": "ToxicSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "MiddleFinger",
                                          "PublicSafety",
                                          "Health",
                                          "Explicit",
                                          "QRCode",
                                          "Medical",
                                          "Politics",
                                          "Legal"
                                        ],
                                        "title": "ContentSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SexualActivity",
                                          "SexualSituations",
                                          "Nudity",
                                          "PartialNudity",
                                          "Suggestive",
                                          "AdultToys",
                                          "RevealingClothes",
                                          "Sexual"
                                        ],
                                        "title": "SexualSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "GraphicViolenceOrGore",
                                          "PhysicalViolence",
                                          "WeaponViolence",
                                          "Violence"
                                        ],
                                        "title": "ViolenceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "DrugProducts",
                                          "DrugUse",
                                          "Tobacco",
                                          "Smoking",
                                          "Alcohol",
                                          "Drinking"
                                        ],
                                        "title": "DrugAndAlcoholSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Gambling",
                                          "Finance",
                                          "MoneyContent"
                                        ],
                                        "title": "FinanceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Hate",
                                          "Harassment",
                                          "Threatening",
                                          "Extremist",
                                          "Racy"
                                        ],
                                        "title": "HateAndExtremismSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Safe",
                                          "NotSafe"
                                        ],
                                        "title": "SafeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "likelihood_score": {
                                    "title": "Likelihood Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "label",
                                  "likelihood",
                                  "category",
                                  "subcategory",
                                  "likelihood_score"
                                ],
                                "title": "TextModerationItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "nsfw_likelihood_score": {
                              "title": "Nsfw Likelihood Score",
                              "type": "integer"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "nsfw_likelihood",
                            "nsfw_likelihood_score",
                            "status"
                          ],
                          "title": "textmoderationModerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "clarifai": {
                      "allOf": [
                        {
                          "properties": {
                            "nsfw_likelihood": {
                              "title": "Nsfw Likelihood",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "label": {
                                    "title": "Label",
                                    "type": "string"
                                  },
                                  "likelihood": {
                                    "title": "Likelihood",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "Insult",
                                          "Obscene",
                                          "Derogatory",
                                          "Profanity",
                                          "Threat",
                                          "Toxic"
                                        ],
                                        "title": "ToxicSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "MiddleFinger",
                                          "PublicSafety",
                                          "Health",
                                          "Explicit",
                                          "QRCode",
                                          "Medical",
                                          "Politics",
                                          "Legal"
                                        ],
                                        "title": "ContentSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SexualActivity",
                                          "SexualSituations",
                                          "Nudity",
                                          "PartialNudity",
                                          "Suggestive",
                                          "AdultToys",
                                          "RevealingClothes",
                                          "Sexual"
                                        ],
                                        "title": "SexualSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "GraphicViolenceOrGore",
                                          "PhysicalViolence",
                                          "WeaponViolence",
                                          "Violence"
                                        ],
                                        "title": "ViolenceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "DrugProducts",
                                          "DrugUse",
                                          "Tobacco",
                                          "Smoking",
                                          "Alcohol",
                                          "Drinking"
                                        ],
                                        "title": "DrugAndAlcoholSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Gambling",
                                          "Finance",
                                          "MoneyContent"
                                        ],
                                        "title": "FinanceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Hate",
                                          "Harassment",
                                          "Threatening",
                                          "Extremist",
                                          "Racy"
                                        ],
                                        "title": "HateAndExtremismSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Safe",
                                          "NotSafe"
                                        ],
                                        "title": "SafeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "likelihood_score": {
                                    "title": "Likelihood Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "label",
                                  "likelihood",
                                  "category",
                                  "subcategory",
                                  "likelihood_score"
                                ],
                                "title": "TextModerationItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "nsfw_likelihood_score": {
                              "title": "Nsfw Likelihood Score",
                              "type": "integer"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "nsfw_likelihood",
                            "nsfw_likelihood_score",
                            "status"
                          ],
                          "title": "textmoderationModerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "nsfw_likelihood": {
                              "title": "Nsfw Likelihood",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "label": {
                                    "title": "Label",
                                    "type": "string"
                                  },
                                  "likelihood": {
                                    "title": "Likelihood",
                                    "type": "integer"
                                  },
                                  "category": {
                                    "description": "This enum are used to categorize the entities extracted from the text.",
                                    "enum": [
                                      "PersonalInformation",
                                      "FinancialInformation",
                                      "IdentificationNumbers",
                                      "Miscellaneous",
                                      "OrganizationInformation",
                                      "DateAndTime",
                                      "LocationInformation",
                                      "Other"
                                    ],
                                    "title": "CategoryType",
                                    "type": "string"
                                  },
                                  "subcategory": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "Insult",
                                          "Obscene",
                                          "Derogatory",
                                          "Profanity",
                                          "Threat",
                                          "Toxic"
                                        ],
                                        "title": "ToxicSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "MiddleFinger",
                                          "PublicSafety",
                                          "Health",
                                          "Explicit",
                                          "QRCode",
                                          "Medical",
                                          "Politics",
                                          "Legal"
                                        ],
                                        "title": "ContentSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "SexualActivity",
                                          "SexualSituations",
                                          "Nudity",
                                          "PartialNudity",
                                          "Suggestive",
                                          "AdultToys",
                                          "RevealingClothes",
                                          "Sexual"
                                        ],
                                        "title": "SexualSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "GraphicViolenceOrGore",
                                          "PhysicalViolence",
                                          "WeaponViolence",
                                          "Violence"
                                        ],
                                        "title": "ViolenceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "DrugProducts",
                                          "DrugUse",
                                          "Tobacco",
                                          "Smoking",
                                          "Alcohol",
                                          "Drinking"
                                        ],
                                        "title": "DrugAndAlcoholSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Gambling",
                                          "Finance",
                                          "MoneyContent"
                                        ],
                                        "title": "FinanceSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Hate",
                                          "Harassment",
                                          "Threatening",
                                          "Extremist",
                                          "Racy"
                                        ],
                                        "title": "HateAndExtremismSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Safe",
                                          "NotSafe"
                                        ],
                                        "title": "SafeSubCategoryType",
                                        "type": "string"
                                      },
                                      {
                                        "enum": [
                                          "Other",
                                          "Anonymized",
                                          "Nerd",
                                          "Wsd",
                                          "Unknown"
                                        ],
                                        "title": "OtherSubCategoryType",
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Subcategory"
                                  },
                                  "likelihood_score": {
                                    "title": "Likelihood Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "label",
                                  "likelihood",
                                  "category",
                                  "subcategory",
                                  "likelihood_score"
                                ],
                                "title": "TextModerationItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "nsfw_likelihood_score": {
                              "title": "Nsfw Likelihood Score",
                              "type": "integer"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "nsfw_likelihood",
                            "nsfw_likelihood_score",
                            "status"
                          ],
                          "title": "textmoderationModerationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textmoderationResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "google": {
                        "nsfw_likelihood": 2,
                        "items": [
                          {
                            "label": "Toxic",
                            "likelihood": 2,
                            "category": "Toxic",
                            "subcategory": "Toxic",
                            "likelihood_score": 0.2391817
                          },
                          {
                            "label": "Insult",
                            "likelihood": 1,
                            "category": "Toxic",
                            "subcategory": "Insult",
                            "likelihood_score": 0.052930057
                          },
                          {
                            "label": "Profanity",
                            "likelihood": 2,
                            "category": "Toxic",
                            "subcategory": "Profanity",
                            "likelihood_score": 0.28705063
                          },
                          {
                            "label": "Derogatory",
                            "likelihood": 1,
                            "category": "Toxic",
                            "subcategory": "Derogatory",
                            "likelihood_score": 0.0047925273
                          },
                          {
                            "label": "Sexual",
                            "likelihood": 1,
                            "category": "Sexual",
                            "subcategory": "Sexual",
                            "likelihood_score": 0.0024352302
                          },
                          {
                            "label": "Death, Harm & Tragedy",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "GraphicViolenceOrGore",
                            "likelihood_score": 0.0005420054
                          },
                          {
                            "label": "Violent",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "Violence",
                            "likelihood_score": 0.0025138261
                          },
                          {
                            "label": "Firearms & Weapons",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "WeaponViolence",
                            "likelihood_score": 0
                          },
                          {
                            "label": "Public Safety",
                            "likelihood": 1,
                            "category": "Content",
                            "subcategory": "PublicSafety",
                            "likelihood_score": 0.010695187
                          },
                          {
                            "label": "Health",
                            "likelihood": 1,
                            "category": "Content",
                            "subcategory": "Health",
                            "likelihood_score": 0.004199916
                          }
                        ],
                        "nsfw_likelihood_score": 0.28705063,
                        "cost": 0
                      },
                      "openai": {
                        "nsfw_likelihood": 1,
                        "items": [
                          {
                            "label": "sexual",
                            "likelihood": 1,
                            "category": "Sexual",
                            "subcategory": "Sexual",
                            "likelihood_score": 0.00008123514999169856
                          },
                          {
                            "label": "hate",
                            "likelihood": 1,
                            "category": "HateAndExtremism",
                            "subcategory": "Hate",
                            "likelihood_score": 0.001375643303617835
                          },
                          {
                            "label": "harassment",
                            "likelihood": 1,
                            "category": "HateAndExtremism",
                            "subcategory": "Harassment",
                            "likelihood_score": 0.01840096339583397
                          },
                          {
                            "label": "self-harm",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "PhysicalViolence",
                            "likelihood_score": 0.001366300624795258
                          },
                          {
                            "label": "sexual/minors",
                            "likelihood": 1,
                            "category": "Other",
                            "subcategory": "Other",
                            "likelihood_score": 0.00031155155738815665
                          },
                          {
                            "label": "hate/threatening",
                            "likelihood": 1,
                            "category": "HateAndExtremism",
                            "subcategory": "Threatening",
                            "likelihood_score": 0.00007793232362018898
                          },
                          {
                            "label": "violence/graphic",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "GraphicViolenceOrGore",
                            "likelihood_score": 0.0005688181845471263
                          },
                          {
                            "label": "self-harm/intent",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "PhysicalViolence",
                            "likelihood_score": 0.00025184746482409537
                          },
                          {
                            "label": "self-harm/instructions",
                            "likelihood": 1,
                            "category": "Violence",
                            "subcategory": "PhysicalViolence",
                            "likelihood_score": 0.0005795329925604165
                          },
                          {
                            "label": "harassment/threatening",
                            "likelihood": 1,
                            "category": "HateAndExtremism",
                            "subcategory": "Threatening",
                            "likelihood_score": 0.00009946248610503972
                          }
                        ],
                        "nsfw_likelihood_score": 0.01840096339583397,
                        "cost": 0
                      },
                      "clarifai": {
                        "nsfw_likelihood": 4,
                        "items": [
                          {
                            "label": "toxic",
                            "likelihood": 4,
                            "category": "Toxic",
                            "subcategory": "Toxic",
                            "likelihood_score": 0.79653984
                          },
                          {
                            "label": "obscene",
                            "likelihood": 1,
                            "category": "Toxic",
                            "subcategory": "Obscene",
                            "likelihood_score": 0.18101883
                          },
                          {
                            "label": "insult",
                            "likelihood": 1,
                            "category": "Toxic",
                            "subcategory": "Insult",
                            "likelihood_score": 0.009806201
                          },
                          {
                            "label": "severe_toxic",
                            "likelihood": 1,
                            "category": "Toxic",
                            "subcategory": "Toxic",
                            "likelihood_score": 0.00045600787
                          },
                          {
                            "label": "threat",
                            "likelihood": 1,
                            "category": "Toxic",
                            "subcategory": "Threat",
                            "likelihood_score": 0.00007207947
                          },
                          {
                            "label": "identity_hate",
                            "likelihood": 1,
                            "category": "HateAndExtremism",
                            "subcategory": "Hate",
                            "likelihood_score": 0.000061927596
                          }
                        ],
                        "nsfw_likelihood_score": 0.79653984,
                        "cost": 0
                      },
                      "microsoft": {
                        "nsfw_likelihood": 5,
                        "items": [
                          {
                            "label": "sexually explicit",
                            "likelihood": 1,
                            "category": "Sexual",
                            "subcategory": "Sexual",
                            "likelihood_score": 0.00020882912212982774
                          },
                          {
                            "label": "sexually suggestive",
                            "likelihood": 2,
                            "category": "Sexual",
                            "subcategory": "Suggestive",
                            "likelihood_score": 0.2234508991241455
                          },
                          {
                            "label": "offensive",
                            "likelihood": 5,
                            "category": "Other",
                            "subcategory": "Offensive",
                            "likelihood_score": 0.9879999756813049
                          }
                        ],
                        "nsfw_likelihood_score": 0.9879999756813049,
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/named_entity_recognition": {
      "post": {
        "operationId": "text_named_entity_recognition_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char\n|**google**|`v1`|1.0 (per 1000000 char)|1000 char\n|**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char\n|**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char\n|**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char\n|**neuralspace**|`v1`|0.007 (per 1 request)|1 request\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**tenstorrent**|`v1.0.0`|1.0 (per 1000000 char)|1000 char\n|**nlpcloud**|`v1`|25.0 (per 1000 request)|1 request\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Afrikaans**|`af`|\n|**Albanian**|`sq`|\n|**Arabic**|`ar`|\n|**Aragonese**|`an`|\n|**Armenian**|`hy`|\n|**Assamese**|`as`|\n|**Azerbaijani**|`az`|\n|**Bashkir**|`ba`|\n|**Basque**|`eu`|\n|**Belarusian**|`be`|\n|**Bengali**|`bn`|\n|**Bosnian**|`bs`|\n|**Breton**|`br`|\n|**Bulgarian**|`bg`|\n|**Burmese**|`my`|\n|**Catalan**|`ca`|\n|**Chechen**|`ce`|\n|**Chinese**|`zh`|\n|**Chuvash**|`cv`|\n|**Croatian**|`hr`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**Estonian**|`et`|\n|**Finnish**|`fi`|\n|**French**|`fr`|\n|**Galician**|`gl`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Gujarati**|`gu`|\n|**Haitian**|`ht`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Hungarian**|`hu`|\n|**Icelandic**|`is`|\n|**Indonesian**|`id`|\n|**Irish**|`ga`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Javanese**|`jv`|\n|**Kannada**|`kn`|\n|**Kazakh**|`kk`|\n|**Kirghiz**|`ky`|\n|**Korean**|`ko`|\n|**Latin**|`la`|\n|**Latvian**|`lv`|\n|**Lithuanian**|`lt`|\n|**Luxembourgish**|`lb`|\n|**Macedonian**|`mk`|\n|**Malagasy**|`mg`|\n|**Malay (macrolanguage)**|`ms`|\n|**Malayalam**|`ml`|\n|**Maltese**|`mt`|\n|**Marathi**|`mr`|\n|**Modern Greek (1453-)**|`el`|\n|**Nepali (macrolanguage)**|`ne`|\n|**Norwegian**|`no`|\n|**Norwegian Bokmål**|`nb`|\n|**Occitan (post 1500)**|`oc`|\n|**Panjabi**|`pa`|\n|**Persian**|`fa`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Romanian**|`ro`|\n|**Russian**|`ru`|\n|**Serbian**|`sr`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**Spanish**|`es`|\n|**Sundanese**|`su`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swedish**|`sv`|\n|**Tagalog**|`tl`|\n|**Tajik**|`tg`|\n|**Tamil**|`ta`|\n|**Tatar**|`tt`|\n|**Telugu**|`te`|\n|**Turkish**|`tr`|\n|**Uighur**|`ug`|\n|**Ukrainian**|`uk`|\n|**Urdu**|`ur`|\n|**Uzbek**|`uz`|\n|**Vietnamese**|`vi`|\n|**Welsh**|`cy`|\n|**Yoruba**|`yo`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (Simplified)**|`zh-Hans`|\n|**Chinese (Taiwan)**|`zh-TW`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**English (United States)**|`en-US`|\n|**French (France)**|`fr-FR`|\n|**Portuguese (Brazil)**|`pt-BR`|\n|**Portuguese (Portugal)**|`pt-PT`|\n\n</details>",
        "summary": "Named Entity Recognition",
        "tags": [
          "Named Entity Recognition"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "microsoft,amazon,google,neuralspace,lettria,tenstorrent,ibm,openai,nlpcloud",
                    "language": "en",
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "oneai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "lettria": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "ibm": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "neuralspace": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "tenstorrent": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "eden-ai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "entity": {
                                    "title": "Entity",
                                    "type": "string"
                                  },
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "entity",
                                  "category",
                                  "importance"
                                ],
                                "title": "InfosNamedEntityRecognitionDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textnamed_entity_recognitionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "microsoft": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": 1
                          },
                          {
                            "entity": "American",
                            "category": "PERSONTYPE",
                            "importance": 0.87
                          },
                          {
                            "entity": "politician",
                            "category": "PERSONTYPE",
                            "importance": 0.57
                          },
                          {
                            "entity": "44th",
                            "category": "QUANTITY",
                            "importance": 0.8
                          },
                          {
                            "entity": "president",
                            "category": "PERSONTYPE",
                            "importance": 0.94
                          },
                          {
                            "entity": "United States",
                            "category": "LOCATION",
                            "importance": 0.97
                          },
                          {
                            "entity": "from 2009 to 2017",
                            "category": "DATE",
                            "importance": 0.8
                          },
                          {
                            "entity": "member",
                            "category": "PERSONTYPE",
                            "importance": 0.74
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "ORGANIZATION",
                            "importance": 0.98
                          },
                          {
                            "entity": "Obama",
                            "category": "PERSON",
                            "importance": 1
                          }
                        ],
                        "cost": 0
                      },
                      "amazon": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": 0.9960151314735413
                          },
                          {
                            "entity": "American",
                            "category": "OTHER",
                            "importance": 0.9943374991416931
                          },
                          {
                            "entity": "44th president",
                            "category": "QUANTITY",
                            "importance": 0.8183709383010864
                          },
                          {
                            "entity": "United States",
                            "category": "LOCATION",
                            "importance": 0.8509750366210938
                          },
                          {
                            "entity": "2009",
                            "category": "DATE",
                            "importance": 0.9990425705909729
                          },
                          {
                            "entity": "2017",
                            "category": "DATE",
                            "importance": 0.994526207447052
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "ORGANIZATION",
                            "importance": 0.9991411566734314
                          },
                          {
                            "entity": "Obama",
                            "category": "PERSON",
                            "importance": 0.99968421459198
                          },
                          {
                            "entity": "first",
                            "category": "QUANTITY",
                            "importance": 0.9900199174880981
                          },
                          {
                            "entity": "African-American",
                            "category": "OTHER",
                            "importance": 0.9452006220817566
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": 0.74435586
                          },
                          {
                            "entity": "president",
                            "category": "PERSON",
                            "importance": 0.07021436
                          },
                          {
                            "entity": "American",
                            "category": "LOCATION",
                            "importance": 0.066377416
                          },
                          {
                            "entity": "president",
                            "category": "PERSON",
                            "importance": 0.04346809
                          },
                          {
                            "entity": "African-American",
                            "category": "PERSON",
                            "importance": 0.007983226
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "ORGANIZATION",
                            "importance": 0.00764491
                          },
                          {
                            "entity": "state senator",
                            "category": "PERSON",
                            "importance": 0.0070930053
                          },
                          {
                            "entity": "Illinois",
                            "category": "LOCATION",
                            "importance": 0.005297011
                          },
                          {
                            "entity": "senator",
                            "category": "PERSON",
                            "importance": 0.004453033
                          }
                        ],
                        "cost": 0
                      },
                      "neuralspace": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": null
                          },
                          {
                            "entity": "American",
                            "category": "NORP",
                            "importance": null
                          },
                          {
                            "entity": "44th",
                            "category": "ORDINAL",
                            "importance": null
                          },
                          {
                            "entity": "the United States",
                            "category": "GEOPOLITICALENTITIES",
                            "importance": null
                          },
                          {
                            "entity": "2009",
                            "category": "DATE",
                            "importance": null
                          },
                          {
                            "entity": "44th",
                            "category": "ORDINAL",
                            "importance": null
                          },
                          {
                            "entity": "from 2009 to 2017",
                            "category": "MONEY",
                            "importance": null
                          },
                          {
                            "entity": "from 2009 to 2017",
                            "category": "DATE",
                            "importance": null
                          },
                          {
                            "entity": "the first",
                            "category": "DATE",
                            "importance": null
                          },
                          {
                            "entity": "from 2005 to 2008",
                            "category": "MONEY",
                            "importance": null
                          }
                        ],
                        "cost": 0
                      },
                      "lettria": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "United States",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "Democratic Party",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "Obama",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "United States",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "U.S.",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "Illinois",
                            "category": null,
                            "importance": null
                          },
                          {
                            "entity": "Illinois state",
                            "category": null,
                            "importance": null
                          }
                        ],
                        "cost": 0
                      },
                      "tenstorrent": {
                        "items": [
                          {
                            "entity": "American",
                            "category": "OTHER",
                            "importance": 0.53
                          },
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": 0.51
                          },
                          {
                            "entity": "African American",
                            "category": "OTHER",
                            "importance": 0.48
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "ORGANIZATION",
                            "importance": 0.32
                          },
                          {
                            "entity": "United States",
                            "category": "LOCATION",
                            "importance": 0.16
                          },
                          {
                            "entity": "Illinois",
                            "category": "LOCATION",
                            "importance": 0.15
                          },
                          {
                            "entity": "United States",
                            "category": "LOCATION",
                            "importance": 0.16
                          },
                          {
                            "entity": "U. S.",
                            "category": "LOCATION",
                            "importance": 0.08
                          },
                          {
                            "entity": "Obama",
                            "category": "PERSON",
                            "importance": 0.04
                          }
                        ],
                        "cost": 0
                      },
                      "ibm": {
                        "items": [
                          {
                            "entity": "American politician",
                            "category": "PERSONTYPE",
                            "importance": 0.950395
                          },
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": 0.617417
                          },
                          {
                            "entity": "president",
                            "category": "PERSONTYPE",
                            "importance": 0.426224
                          },
                          {
                            "entity": "United States",
                            "category": "LOCATION",
                            "importance": 0.408988
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "ORGANIZATION",
                            "importance": 0.348958
                          },
                          {
                            "entity": "U.S. senator",
                            "category": "PERSONTYPE",
                            "importance": 0.348567
                          },
                          {
                            "entity": "Illinois",
                            "category": "LOCATION",
                            "importance": 0.161957
                          },
                          {
                            "entity": "state senator",
                            "category": "PERSONTYPE",
                            "importance": 0.054396
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "Person",
                            "importance": 0.98
                          },
                          {
                            "entity": "American",
                            "category": "Nationality",
                            "importance": 0.85
                          },
                          {
                            "entity": "44th president",
                            "category": "Position",
                            "importance": 0.95
                          },
                          {
                            "entity": "United States",
                            "category": "Country",
                            "importance": 0.99
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "Organization",
                            "importance": 0.9
                          },
                          {
                            "entity": "African-American",
                            "category": "Ethnicity",
                            "importance": 0.85
                          },
                          {
                            "entity": "U.S. senator",
                            "category": "Position",
                            "importance": 0.9
                          },
                          {
                            "entity": "Illinois",
                            "category": "State",
                            "importance": 0.93
                          }
                        ],
                        "cost": 0
                      },
                      "nlpcloud": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": null
                          },
                          {
                            "entity": "American",
                            "category": "NORP",
                            "importance": null
                          },
                          {
                            "entity": "44th",
                            "category": "ORDINAL",
                            "importance": null
                          },
                          {
                            "entity": "the United States",
                            "category": "GPE",
                            "importance": null
                          },
                          {
                            "entity": "2009 to 2017",
                            "category": "DATE",
                            "importance": null
                          },
                          {
                            "entity": "the Democratic Party",
                            "category": "ORG",
                            "importance": null
                          },
                          {
                            "entity": "first",
                            "category": "ORDINAL",
                            "importance": null
                          },
                          {
                            "entity": "African",
                            "category": "NORP",
                            "importance": null
                          },
                          {
                            "entity": "the United States",
                            "category": "GPE",
                            "importance": null
                          },
                          {
                            "entity": "U.S.",
                            "category": "GPE",
                            "importance": null
                          }
                        ],
                        "cost": 0
                      },
                      "eden-ai": {
                        "items": [
                          {
                            "entity": "Barack Hussein Obama",
                            "category": "PERSON",
                            "importance": 1
                          },
                          {
                            "entity": "American politician",
                            "category": "PERSONTYPE",
                            "importance": 0.950395
                          },
                          {
                            "entity": "from 2009 to 2017",
                            "category": "DATE",
                            "importance": 0.8
                          },
                          {
                            "entity": "Democratic Party",
                            "category": "ORGANIZATION",
                            "importance": 0.9991411566734314
                          },
                          {
                            "entity": "African-American",
                            "category": "OTHER",
                            "importance": 0.9452006220817566
                          },
                          {
                            "entity": "44th president",
                            "category": "Position",
                            "importance": 0.95
                          },
                          {
                            "entity": "United States",
                            "category": "Country",
                            "importance": 0.99
                          },
                          {
                            "entity": "U.S. senator",
                            "category": "Position",
                            "importance": 0.9
                          },
                          {
                            "entity": "Illinois",
                            "category": "State",
                            "importance": 0.93
                          },
                          {
                            "entity": "member",
                            "category": "PERSONTYPE",
                            "importance": 0.74
                          },
                          {
                            "entity": "first",
                            "category": "QUANTITY",
                            "importance": 0.9900199174880981
                          }
                        ],
                        "status": "success",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/plagia_detection": {
      "post": {
        "operationId": "text_plagia_detection_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**originalityai**|`v1`|0.01 (per 400 char)|400 char\n|**winstonai**|`v2`|14.0 (per 1000000 char)|1 char\n\n\n</details>\n\n",
        "summary": "Plagia Detection",
        "tags": [
          "Plagia Detection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A text content on which a plagiarism detection analysis will be run"
                  },
                  "title": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "Content title"
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "winstonai,originalityai",
                    "text": "The Galaxy S23 launch may be far behind us, but Samsung likely has plenty more to announce in 2023.             That's if history repeats itself. Should Samsung stick to its annual routine, we can expect to see new             foldable phones and wearable devices in August. The company also previewed new designs for bendable phones and tablets             earlier this year, hinting that the company may be planning to expand beyond the Z Fold and Z Flip in the near future.             Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors,             I'm most interested in where its mobile devices are headed. Samsung is one of the world's largest smartphone manufacturers             by market share, meaning it has more influence than most other tech companies on the devices we carry in our pockets each day.             Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers.             It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices.",
                    "title": "n'importe nawak"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "winstonai": {
                      "allOf": [
                        {
                          "properties": {
                            "plagia_score": {
                              "title": "Plagia Score",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "candidates": {
                                    "items": {
                                      "properties": {
                                        "url": {
                                          "title": "Url",
                                          "type": "string"
                                        },
                                        "plagia_score": {
                                          "title": "Plagia Score",
                                          "type": "integer"
                                        },
                                        "prediction": {
                                          "title": "Prediction",
                                          "type": "string"
                                        },
                                        "plagiarized_text": {
                                          "title": "Plagiarized Text",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url",
                                        "plagia_score",
                                        "prediction",
                                        "plagiarized_text"
                                      ],
                                      "title": "PlagiaDetectionCandidate",
                                      "type": "object"
                                    },
                                    "title": "Candidates",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text"
                                ],
                                "title": "PlagiaDetectionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "plagia_score",
                            "status"
                          ],
                          "title": "textplagia_detectionPlagiaDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "originalityai": {
                      "allOf": [
                        {
                          "properties": {
                            "plagia_score": {
                              "title": "Plagia Score",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "candidates": {
                                    "items": {
                                      "properties": {
                                        "url": {
                                          "title": "Url",
                                          "type": "string"
                                        },
                                        "plagia_score": {
                                          "title": "Plagia Score",
                                          "type": "integer"
                                        },
                                        "prediction": {
                                          "title": "Prediction",
                                          "type": "string"
                                        },
                                        "plagiarized_text": {
                                          "title": "Plagiarized Text",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url",
                                        "plagia_score",
                                        "prediction",
                                        "plagiarized_text"
                                      ],
                                      "title": "PlagiaDetectionCandidate",
                                      "type": "object"
                                    },
                                    "title": "Candidates",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text"
                                ],
                                "title": "PlagiaDetectionItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "plagia_score",
                            "status"
                          ],
                          "title": "textplagia_detectionPlagiaDetectionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textplagia_detectionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "winstonai": {
                        "plagia_score": 100,
                        "items": [
                          {
                            "text": "Rumored Samsung Gadgets For 2023: Galaxy Z Flip 5, Z Fold 5 and More - MSN",
                            "candidates": [
                              {
                                "url": "https://www.msn.com/en-us/news/technology/rumored-samsung-gadgets-for-2023-galaxy-z-flip-5-z-fold-5-and-more/ar-AA16w9Ee",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers. It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices."
                              }
                            ]
                          },
                          {
                            "text": "Originality.ai API Documentation",
                            "candidates": [
                              {
                                "url": "https://docs.originality.ai/api-v1-0-reference",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Should Samsung stick to its annual routine, we can expect to see new foldable phones and wearable devices in August. The company also previewed new designs for ..."
                              },
                              {
                                "url": "https://docs.originality.ai/api-v1-0-reference",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... The company also previewed new designs for bendable phones and tablets earlier this year, hinting that the company may be planning to expand beyond the Z ..."
                              },
                              {
                                "url": "https://docs.originality.ai/api-v1-0-reference",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors, I'm most interested in where its mobile ..."
                              },
                              {
                                "url": "https://docs.originality.ai/api-v1-0-reference",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers. It's a strategy to create ..."
                              },
                              {
                                "url": "https://docs.originality.ai/api-v1-0-reference",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices.\", \"matches\": [ { \"website\": \"https://www.cnet.com ..."
                              }
                            ]
                          },
                          {
                            "text": "Rumored Samsung Gadgets For 2023: Galaxy Z Flip 5, Z Fold 5 and More - CNET",
                            "candidates": [
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors, I'm most interested in ..."
                              },
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers. It's a ..."
                              },
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers. It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices."
                              }
                            ]
                          },
                          {
                            "text": "The Biggest Rumored Samsung Gadgets to Expect in 2023 - YouTube",
                            "candidates": [
                              {
                                "url": "https://www.youtube.com/watch?v=7DXADBWKlgA",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors, I'm most interested in where its mobile ..."
                              },
                              {
                                "url": "https://www.youtube.com/watch?v=7DXADBWKlgA",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... influence than most other tech companies on the devices we carry in our pockets each day. Wearables have also become a large part of how Samsung intends to ..."
                              },
                              {
                                "url": "https://www.youtube.com/watch?v=7DXADBWKlgA",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices. Here are the rumored Samsung products I'm most ..."
                              }
                            ]
                          },
                          {
                            "text": "Galaxy Z Fold 5 and Other Samsung Gadgets to Look for in 2023 IT ...",
                            "candidates": [
                              {
                                "url": "https://www.rbsitsoftwaresolution.com/blog/galaxy-z-fold-5-and-other-samsung-gadgets-to-look-for-in-2023.html",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... the company may be planning to expand beyond the Z Fold and Z Flip in the near future. Though Samsung regularly releases new products across many categories ..."
                              }
                            ]
                          },
                          {
                            "text": "Galaxy S23, Z Fold 5 and more Samsung gadgets rumored for 2023 - US Today News",
                            "candidates": [
                              {
                                "url": "https://ustoday.news/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "... the company may be planning to expand beyond the Z Fold and Z Flip in the near future. Although Samsung regularly releases new products in ..."
                              }
                            ]
                          },
                          {
                            "text": "Galaxy Z Fold 5 and Other Samsung Gadgets to Look for in 2023",
                            "candidates": [
                              {
                                "url": "https://www.umaconferences.com/galaxy-z-fold-5-and-other-samsung-gadgets-to-look-for-in-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "The Galaxy S23 launch may be far behind us, but Samsung likely has plenty more to announce in 2023. That's if history repeats itself."
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "originalityai": {
                        "plagia_score": 0.57,
                        "items": [
                          {
                            "text": "Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors, I'm most interested in where its mobile devices are headed.",
                            "candidates": [
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors, I'm most interested in where its mobile devices are headed."
                              }
                            ]
                          },
                          {
                            "text": "Samsung is one of the world's largest smartphone manufacturers by market share, meaning it has more influence than most other tech companies on the devices we carry in our pockets each day.",
                            "candidates": [
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 0.96,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Samsung is one of the world's largest smartphone manufacturers by market share, meaning it has more influence than most other tech companies on the devices we carry in our pockets each day."
                              }
                            ]
                          },
                          {
                            "text": "Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers.",
                            "candidates": [
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers."
                              }
                            ]
                          },
                          {
                            "text": "It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices.",
                            "candidates": [
                              {
                                "url": "https://www.cnet.com/tech/mobile/galaxy-s23-z-fold-5-and-more-samsung-gadgets-rumored-for-2023/",
                                "plagia_score": 1,
                                "prediction": "plagiarized",
                                "plagiarized_text": "It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices."
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/prompt_optimization": {
      "post": {
        "operationId": "text_prompt_optimization_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**openai**|`v3.0.0`|0.08 (per 1 request)|1 request\n\n\n</details>\n\n",
        "summary": "Prompt Optimization",
        "tags": [
          "Prompt Optimization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Description of the desired prompt."
                  },
                  "target_provider": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Select the provider for the prompt optimization"
                  }
                },
                "required": [
                  "providers",
                  "target_provider",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "openai",
                    "text": "Entity extractor, i give you an entity or multiple entities and a text and i want the entitites extracted from the text",
                    "target_provider": "google"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "missing_information": {
                              "title": "Missing Information",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "text"
                                ],
                                "title": "PromptDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "missing_information",
                            "status"
                          ],
                          "title": "textprompt_optimizationPromptOptimizationDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textprompt_optimizationResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "openai": {
                        "missing_information": "What type of entities are you specifically looking to extract (names, locations, organizations, etc.)? Do you have any specific language or data format preferences for the text? Do you need this tool to handle any particular size, complexity, or other special characteristics of the texts?",
                        "items": [
                          {
                            "text": "Given the following text and a list of entities, please extract and list all occurrences of the specified entities in the text. The entities to be extracted are [entities]. The text for entity extraction is [text]."
                          },
                          {
                            "text": "Given the following text, please identify and extract all instances of the specified entities. The entities to look for are [Entity1, Entity2, Entity3]. Here is the text: [Insert Text Here]. Please list the extracted entities in a clear and organized manner."
                          },
                          {
                            "text": "Given the following text and a list of entities, please extract and list all instances of the provided entities within the text. The entities are [list of entities]. The text is as follows: [text]. Please format your response as a bulleted list, with each bullet representing an instance of an entity found in the text."
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/question_answer": {
      "post": {
        "operationId": "text_question_answer_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**tenstorrent**|`v1.0.0`|10.0 (per 1000000 char)|1000 char\n\n\n</details>\n\n",
        "summary": "Question Answer",
        "tags": [
          "Question Answer"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "texts": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "List of texts to analyze"
                  },
                  "question": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Question about the text content"
                  },
                  "temperature": {
                    "type": "number",
                    "format": "double",
                    "maximum": 1,
                    "minimum": 0,
                    "default": 0,
                    "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
                  },
                  "examples_context": {
                    "type": "string",
                    "minLength": 1,
                    "description": "example text serving as context"
                  },
                  "examples": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "maxItems": 2,
                      "minItems": 2
                    },
                    "description": "List of question/answer pairs (eg: [['When was Barack Obama elected president?', 'in 2009.'],]"
                  }
                },
                "required": [
                  "examples",
                  "examples_context",
                  "providers",
                  "question",
                  "texts"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "tenstorrent,openai",
                    "texts": [
                      "The bar-shouldered dove (Geopelia humeralis) is a species of dove, in the family Columbidae, native to Australia and southern New Guinea. Its typical habitat consists of areas of thick vegetation where water is present, damp gullies, forests and gorges, mangroves, plantations, swamps, eucalyptus woodland, tropical and sub-tropical shrubland, and river margins. It can be found in both inland and coastal regions."
                    ],
                    "question": "What is the scientific name of bar-shouldered dove?",
                    "temperature": 0,
                    "examples_context": "In 2017, U.S. life expectancy was 78.6 years.",
                    "examples": [
                      [
                        "What is human life expectancy in the United States?",
                        "78 years."
                      ]
                    ]
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tenstorrent": {
                      "allOf": [
                        {
                          "properties": {
                            "answers": {
                              "items": {
                                "type": "string"
                              },
                              "title": "Answers",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textquestion_answerQuestionAnswerDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "answers": {
                              "items": {
                                "type": "string"
                              },
                              "title": "Answers",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textquestion_answerQuestionAnswerDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "eden-ai": {
                      "allOf": [
                        {
                          "properties": {
                            "answers": {
                              "items": {
                                "type": "string"
                              },
                              "title": "Answers",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textquestion_answerQuestionAnswerDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textquestion_answerResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "tenstorrent": {
                        "answers": [
                          "geopelia humeralis"
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "answers": [
                          "The scientific name of bar-shouldered dove is Geopelia humeralis."
                        ],
                        "cost": 0
                      },
                      "eden-ai": {
                        "answers": [
                          "The scientific name of bar-shouldered dove is Geopelia humeralis.",
                          "geopelia humeralis"
                        ],
                        "status": "success",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/search": {
      "post": {
        "operationId": "text_search_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**cohere**|`v1`|0.1 (per 1000000 char)|1 char\n|**google**|`v1`|0.1 (per 1000000 char)|1 char\n\n\n</details>\n\n",
        "summary": "Search",
        "tags": [
          "Search"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "texts": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "A list of texts to search in.",
                    "minItems": 2
                  },
                  "query": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Your text query."
                  },
                  "similarity_metric": {
                    "allOf": [
                      {
                        "enum": [
                          "cosine",
                          "manhattan",
                          "euclidean"
                        ],
                        "type": "string",
                        "description": "* `cosine` - cosine\n* `manhattan` - manhattan\n* `euclidean` - euclidean"
                      }
                    ],
                    "default": "cosine",
                    "description": "Is used to specify the similarity function that calculates the similarity between embedding vectors when performing text searches. This parameter allows you to customize how text similarity is measured, which can be crucial in various natural language processing tasks such as document retrieval, recommendation systems, and clustering.\n\n* `cosine` - cosine\n* `manhattan` - manhattan\n* `euclidean` - euclidean"
                  }
                },
                "required": [
                  "providers",
                  "query",
                  "texts"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "openai,google,cohere",
                    "texts": [
                      "In Roman mythology, Romulus and Remus (Latin: [ˈroːmʊlʊs], [ˈrɛmʊs]) are twin brothers whose story tells of the events that led to the founding of the city of Rome and the Roman Kingdom by Romulus.",
                      "In ancient Roman religion and myth, Mars (Latin: Mārs, pronounced [maːrs]) was the god of war and also an agricultural guardian, a combination characteristic of early Rome.",
                      "Proto-Indo-European mythology is the body of myths and deities associated with the Proto-Indo-Europeans, the hypothetical speakers of the reconstructed Proto-Indo-European language",
                      "The Ashvamedha (Sanskrit: अश्वमेध, romanized: aśvamedha) was a horse sacrifice ritual followed by the Śrauta tradition of Vedic religion.",
                      "Purusha (puruṣa or Sanskrit: पुरुष) is a complex concept whose meaning evolved in Vedic and Upanishadic times. Depending on source and historical timeline, it means the cosmic being or self, consciousness, and universal principle."
                    ],
                    "query": "Rome"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "object": {
                                    "title": "Object",
                                    "type": "string"
                                  },
                                  "document": {
                                    "title": "Document",
                                    "type": "integer"
                                  },
                                  "score": {
                                    "title": "Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "object",
                                  "document",
                                  "score"
                                ],
                                "title": "InfosSearchDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsearchSearchDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "object": {
                                    "title": "Object",
                                    "type": "string"
                                  },
                                  "document": {
                                    "title": "Document",
                                    "type": "integer"
                                  },
                                  "score": {
                                    "title": "Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "object",
                                  "document",
                                  "score"
                                ],
                                "title": "InfosSearchDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsearchSearchDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "object": {
                                    "title": "Object",
                                    "type": "string"
                                  },
                                  "document": {
                                    "title": "Document",
                                    "type": "integer"
                                  },
                                  "score": {
                                    "title": "Score",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "object",
                                  "document",
                                  "score"
                                ],
                                "title": "InfosSearchDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsearchSearchDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textsearchResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "openai": {
                        "items": [
                          {
                            "object": "search_result",
                            "document": 0,
                            "score": 82.27574355373714
                          },
                          {
                            "object": "search_result",
                            "document": 1,
                            "score": 80.6998032223455
                          },
                          {
                            "object": "search_result",
                            "document": 3,
                            "score": 74.41124009541474
                          },
                          {
                            "object": "search_result",
                            "document": 2,
                            "score": 74.05020826017346
                          },
                          {
                            "object": "search_result",
                            "document": 4,
                            "score": 72.08070059698751
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "items": [
                          {
                            "object": "search_result",
                            "document": 1,
                            "score": 63.63229086429776
                          },
                          {
                            "object": "search_result",
                            "document": 0,
                            "score": 63.58258325147889
                          },
                          {
                            "object": "search_result",
                            "document": 2,
                            "score": 58.75945125283969
                          },
                          {
                            "object": "search_result",
                            "document": 4,
                            "score": 57.09977302069713
                          },
                          {
                            "object": "search_result",
                            "document": 3,
                            "score": 55.91798442559938
                          }
                        ],
                        "cost": 0
                      },
                      "cohere": {
                        "items": [
                          {
                            "object": "search_result",
                            "document": 0,
                            "score": 87.21923397620458
                          },
                          {
                            "object": "search_result",
                            "document": 1,
                            "score": 84.96817733624593
                          },
                          {
                            "object": "search_result",
                            "document": 2,
                            "score": 84.54056661907234
                          },
                          {
                            "object": "search_result",
                            "document": 3,
                            "score": 79.56999980075983
                          },
                          {
                            "object": "search_result",
                            "document": 4,
                            "score": 78.31888506931125
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/sentiment_analysis": {
      "post": {
        "operationId": "text_sentiment_analysis_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char\n|**connexun**|`v1.0`|2.0 (per 1000 request)|1 request\n|**google**|`v1`|1.0 (per 1000000 char)|1000 char\n|**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char\n|**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char\n|**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char\n|**emvista**|`v1.0`|3.0 (per 1000000 char)|1000 char\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**tenstorrent**|`v1.1.0`|0.7 (per 1000000 char)|1000 char\n|**sapling**|`v1`|20.0 (per 1000000 char)|1000 char\n|**nlpcloud**|`v1`|25.0 (per 1000 request)|1 request\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Arabic**|`ar`|\n|**Bengali**|`bn`|\n|**Chinese**|`zh`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**Finnish**|`fi`|\n|**French**|`fr`|\n|**German**|`de`|\n|**Hindi**|`hi`|\n|**Indonesian**|`id`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Korean**|`ko`|\n|**Modern Greek (1453-)**|`el`|\n|**Norwegian**|`no`|\n|**Panjabi**|`pa`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Romanian**|`ro`|\n|**Russian**|`ru`|\n|**Spanish**|`es`|\n|**Swedish**|`sv`|\n|**Tamil**|`ta`|\n|**Thai**|`th`|\n|**Turkish**|`tr`|\n|**Ukrainian**|`uk`|\n|**Vietnamese**|`vi`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (Simplified)**|`zh-Hans`|\n|**Chinese (Taiwan)**|`zh-TW`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**English (United States)**|`en-US`|\n|**French (France)**|`fr-FR`|\n|**Portuguese (Brazil)**|`pt-BR`|\n|**Portuguese (Portugal)**|`pt-PT`|\n\n</details>",
        "summary": "Sentiment Analysis",
        "tags": [
          "Sentiment Analysis"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "sapling,google,microsoft,emvista,tenstorrent,connexun,ibm,lettria,openai,amazon,nlpcloud",
                    "language": "en",
                    "text": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "oneai": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "lettria": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "emvista": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "ibm": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "connexun": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "sapling": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "tenstorrent": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "general_sentiment": {
                              "allOf": [
                                {
                                  "enum": [
                                    "Positive",
                                    "Negative",
                                    "Neutral"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "General Sentiment"
                            },
                            "general_sentiment_rate": {
                              "maximum": 1,
                              "minimum": 0,
                              "title": "General Sentiment Rate",
                              "type": "integer"
                            },
                            "items": {
                              "items": {
                                "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                                "properties": {
                                  "segment": {
                                    "title": "Segment",
                                    "type": "string"
                                  },
                                  "sentiment": {
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Positive",
                                          "Negative",
                                          "Neutral"
                                        ],
                                        "type": "string"
                                      }
                                    ],
                                    "title": "Sentiment"
                                  },
                                  "sentiment_rate": {
                                    "maximum": 1,
                                    "minimum": 0,
                                    "title": "Sentiment Rate",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "segment",
                                  "sentiment",
                                  "sentiment_rate"
                                ],
                                "title": "SegmentSentimentAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "general_sentiment",
                            "general_sentiment_rate",
                            "status"
                          ],
                          "title": "textsentiment_analysisSentimentAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textsentiment_analysisResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "sapling": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.51,
                        "items": [
                          {
                            "segment": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.",
                            "sentiment": "Positive",
                            "sentiment_rate": 0.96
                          },
                          {
                            "segment": "First is the product reviews and pricing.",
                            "sentiment": "Neutral",
                            "sentiment_rate": 1
                          },
                          {
                            "segment": "There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product.",
                            "sentiment": "Positive",
                            "sentiment_rate": 0.67
                          },
                          {
                            "segment": "There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc).",
                            "sentiment": "Neutral",
                            "sentiment_rate": 0.61
                          },
                          {
                            "segment": "The second issue is they make it too difficult to get help when there's an issue with an order.",
                            "sentiment": "Negative",
                            "sentiment_rate": 0.96
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.4,
                        "items": [
                          {
                            "segment": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.",
                            "sentiment": "Neutral",
                            "sentiment_rate": 0
                          },
                          {
                            "segment": "First is the product reviews and pricing.",
                            "sentiment": "Neutral",
                            "sentiment_rate": 0
                          },
                          {
                            "segment": "There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product.",
                            "sentiment": "Negative",
                            "sentiment_rate": 0.5
                          },
                          {
                            "segment": "There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc).",
                            "sentiment": "Negative",
                            "sentiment_rate": 0.6
                          },
                          {
                            "segment": "The second issue is they make it too difficult to get help when there's an issue with an order.",
                            "sentiment": "Negative",
                            "sentiment_rate": 0.8
                          }
                        ],
                        "cost": 0
                      },
                      "microsoft": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.67,
                        "items": [
                          {
                            "segment": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. ",
                            "sentiment": "Positive",
                            "sentiment_rate": 0.98
                          },
                          {
                            "segment": "First is the product reviews and pricing. ",
                            "sentiment": "Neutral",
                            "sentiment_rate": 0.99
                          },
                          {
                            "segment": "There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. ",
                            "sentiment": "Negative",
                            "sentiment_rate": 1
                          },
                          {
                            "segment": "There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). ",
                            "sentiment": "Neutral",
                            "sentiment_rate": 0.7
                          },
                          {
                            "segment": "The second issue is they make it too difficult to get help when there's an issue with an order.",
                            "sentiment": "Negative",
                            "sentiment_rate": 1
                          }
                        ],
                        "cost": 0
                      },
                      "emvista": {
                        "general_sentiment": "Positive",
                        "general_sentiment_rate": 0.45,
                        "items": [],
                        "cost": 0
                      },
                      "tenstorrent": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.38,
                        "items": [],
                        "cost": 0
                      },
                      "connexun": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.38,
                        "items": [],
                        "cost": 0
                      },
                      "ibm": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.54,
                        "items": [],
                        "cost": 0
                      },
                      "lettria": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.27,
                        "items": [
                          {
                            "segment": "overall i am satisfied with my experience at Amazon , but two areas of major improvement needed .",
                            "sentiment": "Positive",
                            "sentiment_rate": 0.71
                          },
                          {
                            "segment": "first is the product reviews and pricing .",
                            "sentiment": "Positive",
                            "sentiment_rate": 0.01
                          },
                          {
                            "segment": "there are thousands of positive reviews for so many items , and it is clear",
                            "sentiment": "Positive",
                            "sentiment_rate": 0.38
                          },
                          {
                            "segment": "there needs to be a way to only view products sold by Amazon directly , because many market sellers way overprice items that can be purchased cheaper elsewhere ( like Walmart , Target , etc ) .",
                            "sentiment": "Negative",
                            "sentiment_rate": 0.23
                          },
                          {
                            "segment": "the second issue is they make it too difficult to get help when there is an issue with an order .",
                            "sentiment": "Neutral",
                            "sentiment_rate": 0
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.3,
                        "items": [],
                        "cost": 0
                      },
                      "amazon": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.4,
                        "items": [],
                        "cost": 0
                      },
                      "nlpcloud": {
                        "general_sentiment": "Negative",
                        "general_sentiment_rate": 0.97,
                        "items": [],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/spell_check": {
      "post": {
        "operationId": "text_spell_check_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**microsoft**|`v7`|0.3 (per 1000 request)|1 request\n|**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token\n|**prowritingaid**|`v2`|10.0 (per 1000 request)|1 request\n|**cohere**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**sapling**|`v1`|2.0 (per 1000000 char)|1 char\n|**nlpcloud**|`v1`|25.0 (per 1000 request)|1 request\n|**ai21labs**|`v1`|0.0005 (per 1 request)|1 request\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Achinese**|`ace`|\n|**Afrikaans**|`af`|\n|**Akan**|`ak`|\n|**Albanian**|`sq`|\n|**Amharic**|`am`|\n|**Arabic**|`ar`|\n|**Armenian**|`hy`|\n|**Assamese**|`as`|\n|**Asturian**|`ast`|\n|**Awadhi**|`awa`|\n|**Ayacucho Quechua**|`quy`|\n|**Azerbaijani**|`az`|\n|**Balinese**|`ban`|\n|**Bambara**|`bm`|\n|**Banjar**|`bjn`|\n|**Bashkir**|`ba`|\n|**Basque**|`eu`|\n|**Belarusian**|`be`|\n|**Bemba (Zambia)**|`bem`|\n|**Bengali**|`bn`|\n|**Bhojpuri**|`bho`|\n|**Bosnian**|`bs`|\n|**Buginese**|`bug`|\n|**Bulgarian**|`bg`|\n|**Burmese**|`my`|\n|**Catalan**|`ca`|\n|**Cebuano**|`ceb`|\n|**Central Atlas Tamazight**|`tzm`|\n|**Central Aymara**|`ayr`|\n|**Central Kanuri**|`knc`|\n|**Central Kurdish**|`ckb`|\n|**Chhattisgarhi**|`hne`|\n|**Chinese**|`zh`|\n|**Chokwe**|`cjk`|\n|**Corsican**|`co`|\n|**Crimean Tatar**|`crh`|\n|**Croatian**|`hr`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**Dyula**|`dyu`|\n|**Dzongkha**|`dz`|\n|**Eastern Yiddish**|`ydd`|\n|**Egyptian Arabic**|`arz`|\n|**English**|`en`|\n|**Esperanto**|`eo`|\n|**Estonian**|`et`|\n|**Ewe**|`ee`|\n|**Faroese**|`fo`|\n|**Fijian**|`fj`|\n|**Finnish**|`fi`|\n|**Fon**|`fon`|\n|**French**|`fr`|\n|**Friulian**|`fur`|\n|**Galician**|`gl`|\n|**Ganda**|`lg`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Guarani**|`gn`|\n|**Gujarati**|`gu`|\n|**Haitian**|`ht`|\n|**Halh Mongolian**|`khk`|\n|**Hausa**|`ha`|\n|**Hawaiian**|`haw`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Hmong**|`hmn`|\n|**Hungarian**|`hu`|\n|**Icelandic**|`is`|\n|**Igbo**|`ig`|\n|**Iloko**|`ilo`|\n|**Indonesian**|`id`|\n|**Irish**|`ga`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Javanese**|`jv`|\n|**Kabiyè**|`kbp`|\n|**Kabuverdianu**|`kea`|\n|**Kabyle**|`kab`|\n|**Kachin**|`kac`|\n|**Kamba (Kenya)**|`kam`|\n|**Kannada**|`kn`|\n|**Kashmiri**|`ks`|\n|**Kazakh**|`kk`|\n|**Khmer**|`km`|\n|**Kikuyu**|`ki`|\n|**Kimbundu**|`kmb`|\n|**Kinyarwanda**|`rw`|\n|**Kirghiz**|`ky`|\n|**Kongo**|`kg`|\n|**Korean**|`ko`|\n|**Kurdish**|`ku`|\n|**Lao**|`lo`|\n|**Latgalian**|`ltg`|\n|**Latin**|`la`|\n|**Latvian**|`lv`|\n|**Ligurian**|`lij`|\n|**Limburgan**|`li`|\n|**Lingala**|`ln`|\n|**Lithuanian**|`lt`|\n|**Lombard**|`lmo`|\n|**Luba-Katanga**|`lu`|\n|**Luo (Kenya and Tanzania)**|`luo`|\n|**Lushai**|`lus`|\n|**Luxembourgish**|`lb`|\n|**Macedonian**|`mk`|\n|**Magahi**|`mag`|\n|**Maithili**|`mai`|\n|**Malagasy**|`mg`|\n|**Malay (macrolanguage)**|`ms`|\n|**Malayalam**|`ml`|\n|**Maltese**|`mt`|\n|**Manipuri**|`mni`|\n|**Maori**|`mi`|\n|**Marathi**|`mr`|\n|**Mesopotamian Arabic**|`acm`|\n|**Minangkabau**|`min`|\n|**Modern Greek (1453-)**|`el`|\n|**Mongolian**|`mn`|\n|**Moroccan Arabic**|`ary`|\n|**Mossi**|`mos`|\n|**Najdi Arabic**|`ars`|\n|**Nepali (macrolanguage)**|`ne`|\n|**Nigerian Fulfulde**|`fuv`|\n|**North Azerbaijani**|`azj`|\n|**North Levantine Arabic**|`apc`|\n|**Northern Kurdish**|`kmr`|\n|**Northern Uzbek**|`uzn`|\n|**Norwegian**|`no`|\n|**Norwegian Bokmål**|`nb`|\n|**Norwegian Nynorsk**|`nn`|\n|**Nuer**|`nus`|\n|**Nyanja**|`ny`|\n|**Occitan (post 1500)**|`oc`|\n|**Oriya (macrolanguage)**|`or`|\n|**Pangasinan**|`pag`|\n|**Panjabi**|`pa`|\n|**Papiamento**|`pap`|\n|**Pedi**|`nso`|\n|**Persian**|`fa`|\n|**Plateau Malagasy**|`plt`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Pushto**|`ps`|\n|**Romanian**|`ro`|\n|**Rundi**|`rn`|\n|**Russian**|`ru`|\n|**Samoan**|`sm`|\n|**Sango**|`sg`|\n|**Sanskrit**|`sa`|\n|**Santali**|`sat`|\n|**Sardinian**|`sc`|\n|**Scottish Gaelic**|`gd`|\n|**Serbian**|`sr`|\n|**Shan**|`shn`|\n|**Shona**|`sn`|\n|**Sicilian**|`scn`|\n|**Silesian**|`szl`|\n|**Sindhi**|`sd`|\n|**Sinhala**|`si`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**Somali**|`so`|\n|**South Azerbaijani**|`azb`|\n|**South Levantine Arabic**|`ajp`|\n|**Southern Pashto**|`pbt`|\n|**Southern Sotho**|`st`|\n|**Southwestern Dinka**|`dik`|\n|**Spanish**|`es`|\n|**Standard Latvian**|`lvs`|\n|**Standard Malay**|`zsm`|\n|**Sundanese**|`su`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swati**|`ss`|\n|**Swedish**|`sv`|\n|**Ta'izzi-Adeni Arabic**|`acq`|\n|**Tagalog**|`tl`|\n|**Tajik**|`tg`|\n|**Tamashek**|`tmh`|\n|**Tamil**|`ta`|\n|**Tatar**|`tt`|\n|**Telugu**|`te`|\n|**Thai**|`th`|\n|**Tibetan**|`bo`|\n|**Tigrinya**|`ti`|\n|**Tok Pisin**|`tpi`|\n|**Tosk Albanian**|`als`|\n|**Tsonga**|`ts`|\n|**Tswana**|`tn`|\n|**Tumbuka**|`tum`|\n|**Tunisian Arabic**|`aeb`|\n|**Turkish**|`tr`|\n|**Turkmen**|`tk`|\n|**Twi**|`tw`|\n|**Uighur**|`ug`|\n|**Ukrainian**|`uk`|\n|**Umbundu**|`umb`|\n|**Urdu**|`ur`|\n|**Uzbek**|`uz`|\n|**Venetian**|`vec`|\n|**Vietnamese**|`vi`|\n|**Waray (Philippines)**|`war`|\n|**Welsh**|`cy`|\n|**West Central Oromo**|`gaz`|\n|**Western Frisian**|`fy`|\n|**Wolof**|`wo`|\n|**Xhosa**|`xh`|\n|**Yiddish**|`yi`|\n|**Yoruba**|`yo`|\n|**Yue Chinese**|`yue`|\n|**Zulu**|`zu`|\n|**jp**|`jp`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Arabic (world)**|`ar-001`|\n|**Chinese (China)**|`zh-CN`|\n|**Chinese (Simplified)**|`zh-hans`|\n|**Chinese (Taiwan)**|`zh-TW`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**Chinese (Traditional)**|`zh-hant`|\n|**English (United Kingdom)**|`en-gb`|\n|**Persian (Afghanistan)**|`fa-AF`|\n|**Portuguese (Brazil)**|`pt-br`|\n|**Portuguese (Portugal)**|`pt-pt`|\n\n</details>",
        "summary": "Spell Check",
        "tags": [
          "Spell Check"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "ai21labs,nlpcloud,openai,microsoft,cohere,sapling,prowritingaid",
                    "language": "en",
                    "text": "Hollo, wrld! How re yu?"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ai21labs": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "prowritingaid": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "sapling": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "text": {
                              "title": "Text",
                              "type": "string"
                            },
                            "items": {
                              "items": {
                                "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                                "properties": {
                                  "text": {
                                    "title": "Text",
                                    "type": "string"
                                  },
                                  "type": {
                                    "title": "Type",
                                    "type": "string"
                                  },
                                  "offset": {
                                    "minimum": 0,
                                    "title": "Offset",
                                    "type": "integer"
                                  },
                                  "length": {
                                    "minimum": 0,
                                    "title": "Length",
                                    "type": "integer"
                                  },
                                  "suggestions": {
                                    "items": {
                                      "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                                      "properties": {
                                        "suggestion": {
                                          "title": "Suggestion",
                                          "type": "string"
                                        },
                                        "score": {
                                          "maximum": 1,
                                          "minimum": 0,
                                          "title": "Score",
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "suggestion",
                                        "score"
                                      ],
                                      "title": "SuggestionItem",
                                      "type": "object"
                                    },
                                    "title": "Suggestions",
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "text",
                                  "type",
                                  "offset",
                                  "length"
                                ],
                                "title": "SpellCheckItem",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "text",
                            "status"
                          ],
                          "title": "textspell_checkSpellCheckDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textspell_checkResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "ai21labs": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "wrld!",
                            "type": "Spelling",
                            "offset": 7,
                            "length": 5,
                            "suggestions": [
                              {
                                "suggestion": "world!",
                                "score": null
                              }
                            ]
                          },
                          {
                            "text": "r yu?",
                            "type": "Spelling",
                            "offset": 17,
                            "length": 5,
                            "suggestions": [
                              {
                                "suggestion": "are you?",
                                "score": null
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "nlpcloud": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "Hollo, wrld! How r yu?",
                            "type": null,
                            "offset": 0,
                            "length": 26,
                            "suggestions": [
                              {
                                "suggestion": "Hello, world! How are you?",
                                "score": null
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "Hollo",
                            "type": null,
                            "offset": 0,
                            "length": 5,
                            "suggestions": [
                              {
                                "suggestion": "Text",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "wrld",
                            "type": null,
                            "offset": 7,
                            "length": 4,
                            "suggestions": [
                              {
                                "suggestion": "Hello",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "How",
                            "type": null,
                            "offset": 13,
                            "length": 3,
                            "suggestions": [
                              {
                                "suggestion": "world",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "r",
                            "type": null,
                            "offset": 17,
                            "length": 1,
                            "suggestions": [
                              {
                                "suggestion": "How",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "yu",
                            "type": null,
                            "offset": 19,
                            "length": 2,
                            "suggestions": [
                              {
                                "suggestion": "are",
                                "score": 1
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "microsoft": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "Hollo",
                            "type": "UnknownToken",
                            "offset": 0,
                            "length": 5,
                            "suggestions": [
                              {
                                "suggestion": "hello",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "wrld",
                            "type": "UnknownToken",
                            "offset": 7,
                            "length": 4,
                            "suggestions": [
                              {
                                "suggestion": "world",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "yu",
                            "type": "UnknownToken",
                            "offset": 19,
                            "length": 2,
                            "suggestions": [
                              {
                                "suggestion": "you",
                                "score": 1
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "cohere": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "Hollo",
                            "type": null,
                            "offset": 0,
                            "length": 5,
                            "suggestions": [
                              {
                                "suggestion": "Hello",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "wrld",
                            "type": null,
                            "offset": 7,
                            "length": 4,
                            "suggestions": [
                              {
                                "suggestion": "world",
                                "score": 1
                              }
                            ]
                          },
                          {
                            "text": "yu",
                            "type": null,
                            "offset": 19,
                            "length": 2,
                            "suggestions": [
                              {
                                "suggestion": "you",
                                "score": 1
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "sapling": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "Hollo",
                            "type": null,
                            "offset": 0,
                            "length": 5,
                            "suggestions": [
                              {
                                "suggestion": "Hello",
                                "score": null
                              }
                            ]
                          },
                          {
                            "text": "wrld",
                            "type": null,
                            "offset": 7,
                            "length": 4,
                            "suggestions": [
                              {
                                "suggestion": "world",
                                "score": null
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      },
                      "prowritingaid": {
                        "text": "Hollo, wrld! How r yu?",
                        "items": [
                          {
                            "text": "wrld",
                            "type": "Unknown word: wrld",
                            "offset": 7,
                            "length": 4,
                            "suggestions": [
                              {
                                "suggestion": "WRLD",
                                "score": null
                              },
                              {
                                "suggestion": "wild",
                                "score": null
                              },
                              {
                                "suggestion": "weld",
                                "score": null
                              }
                            ]
                          },
                          {
                            "text": "yu",
                            "type": "Unknown word: yu",
                            "offset": 19,
                            "length": 2,
                            "suggestions": [
                              {
                                "suggestion": "you",
                                "score": null
                              },
                              {
                                "suggestion": "ye",
                                "score": null
                              },
                              {
                                "suggestion": "ya",
                                "score": null
                              },
                              {
                                "suggestion": "mu",
                                "score": null
                              },
                              {
                                "suggestion": "nu",
                                "score": null
                              }
                            ]
                          }
                        ],
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/summarize": {
      "post": {
        "operationId": "text_summarize_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Model|Version|Price|Billing unit|\n|----|----|-------|-----|------------|\n|**connexun**|-|`v1.0`|2.0 (per 1000 request)|1 request\n|**microsoft**|-|`v3.1`|2.0 (per 1000000 char)|1000 char\n|**openai**|-|`v3.0.0`|60.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4**|`v3.0.0`|60.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-1106**|`v3.0.0`|2.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo**|`v3.0.0`|2.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-16k**|`v3.0.0`|4.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4-32k-0314**|`v3.0.0`|120.0 (per 1000000 token)|1 token\n|**openai**|**gpt-4-turbo-2024-04-09**|`v3.0.0`|30.0 (per 1000000 token)|1 token\n|**openai**|**gpt-3.5-turbo-0125**|`v3.0.0`|1.5 (per 1000000 token)|1 token\n|**openai**|**gpt-4o-mini**|`v3.0.0`|0.6 (per 1000000 token)|1 token\n|**emvista**|-|`v1.0`|1.0 (per 1000000 char)|1000 char\n|**cohere**|-|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**cohere**|**summarize-xlarge**|`2022-12-06`|2.0 (per 1000000 token)|1 token\n|**alephalpha**|-|`1.12.0`|50.0 (per 1000000 char)|1 char\n|**alephalpha**|**luminous-base**|`1.12.0`|1.0 (per 1000000 char)|1 char\n|**alephalpha**|**luminous-extended**|`1.12.0`|1.5 (per 1000000 char)|1 char\n|**alephalpha**|**luminous-supreme**|`1.12.0`|50.0 (per 1000000 char)|1 char\n|**alephalpha**|**luminous-base-control**|`1.12.0`|1.25 (per 1000000 char)|1 char\n|**alephalpha**|**luminous-extended-control**|`1.12.0`|1.8 (per 1000000 char)|1 char\n|**alephalpha**|**luminous-supreme-control**|`1.12.0`|62.5 (per 1000000 char)|1 char\n|**nlpcloud**|-|`v1`|25.0 (per 1000 request)|1 request\n|**nlpcloud**|**bart-large-cnn**|`v1`|25.0 (per 1000 request)|1 request\n|**nlpcloud**|**fast-gpt-j**|`v1`|25.0 (per 1000 request)|1 request\n|**nlpcloud**|**finetuned-llama-2-70b**|`v1`|25.0 (per 1000 request)|1 request\n|**nlpcloud**|**chatdolphin**|`v1`|25.0 (per 1000 request)|1 request\n|**ai21labs**|-|`v1`|0.005 (per 1000 char)|1000 char\n|**anthropic**|**claude-3-haiku-20240307-v1:0**|`bedrock-2023-05-31`|1.25 (per 1000000 token)|1 token\n|**anthropic**|**claude-3-sonnet-20240229-v1:0**|`bedrock-2023-05-31`|15.0 (per 1000000 token)|1 token\n|**anthropic**|-|`bedrock-2023-05-31`|15.0 (per 1000000 token)|1 token\n|**anthropic**|**claude-v2**|`bedrock-2023-05-31`|24.0 (per 1000000 token)|1 token\n|**anthropic**|**claude-instant-v1**|`bedrock-2023-05-31`|2.4 (per 1000000 token)|1 token\n|**anthropic**|**claude-3-5-sonnet-20240620-v1:0**|`bedrock-2023-05-31`|15.0 (per 1000000 token)|1 token\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Arabic**|`ar`|\n|**Armenian**|`hy`|\n|**Awadhi**|`awa`|\n|**Azerbaijani**|`az`|\n|**Bashkir**|`ba`|\n|**Basque**|`eu`|\n|**Belarusian**|`be`|\n|**Bengali**|`bn`|\n|**Bhojpuri**|`bho`|\n|**Bosnian**|`bs`|\n|**Bulgarian**|`bg`|\n|**Catalan**|`ca`|\n|**Chinese**|`zh`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dogri (macrolanguage)**|`doi`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**Estonian**|`et`|\n|**Faroese**|`fo`|\n|**Finnish**|`fi`|\n|**French**|`fr`|\n|**Galician**|`gl`|\n|**Georgian**|`ka`|\n|**German**|`de`|\n|**Gujarati**|`gu`|\n|**Hausa**|`ha`|\n|**Hindi**|`hi`|\n|**Hungarian**|`hu`|\n|**Indonesian**|`id`|\n|**Irish**|`ga`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Javanese**|`jv`|\n|**Kannada**|`kn`|\n|**Kashmiri**|`ks`|\n|**Kazakh**|`kk`|\n|**Khmer**|`km`|\n|**Kirghiz**|`ky`|\n|**Konkani (macrolanguage)**|`kok`|\n|**Korean**|`ko`|\n|**Kurdish**|`ku`|\n|**Latvian**|`lv`|\n|**Lithuanian**|`lt`|\n|**Macedonian**|`mk`|\n|**Maithili**|`mai`|\n|**Malay (macrolanguage)**|`ms`|\n|**Maltese**|`mt`|\n|**Marathi**|`mr`|\n|**Min Nan Chinese**|`nan`|\n|**Modern Greek (1453-)**|`el`|\n|**Mongolian**|`mn`|\n|**Nepali (macrolanguage)**|`ne`|\n|**Norwegian**|`no`|\n|**Oriya (macrolanguage)**|`or`|\n|**Panjabi**|`pa`|\n|**Persian**|`fa`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Pushto**|`ps`|\n|**Romanian**|`mo`|\n|**Romanian**|`ro`|\n|**Russian**|`ru`|\n|**Sanskrit**|`sa`|\n|**Santali**|`sat`|\n|**Shan**|`shn`|\n|**Sicilian**|`scn`|\n|**Sinhala**|`si`|\n|**Slovak**|`sk`|\n|**Slovenian**|`sl`|\n|**Spanish**|`es`|\n|**Swahili (macrolanguage)**|`sw`|\n|**Swedish**|`sv`|\n|**Tajik**|`tg`|\n|**Tamil**|`ta`|\n|**Tatar**|`tt`|\n|**Telugu**|`te`|\n|**Thai**|`th`|\n|**Turkish**|`tr`|\n|**Turkmen**|`tk`|\n|**Ukrainian**|`uk`|\n|**Urdu**|`ur`|\n|**Uzbek**|`uz`|\n|**Vietnamese**|`vi`|\n|**Welsh**|`cy`|\n|**Wu Chinese**|`wuu`|\n|**Yue Chinese**|`yue`|\n|**me**|`me`|\n|**ra**|`ra`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (Simplified)**|`zh-Hans`|\n|**Portuguese (Brazil)**|`pt-BR`|\n|**Portuguese (Brazil)**|`pt-br`|\n|**Portuguese (Portugal)**|`pt-PT`|\n|**Portuguese (Portugal)**|`pt-pt`|\n\n</details><details><summary>Supported Models</summary><details><summary>openai</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**openai**|`gpt-3.5-turbo`|\n||`gpt-3.5-turbo-0125`|\n||`gpt-3.5-turbo-1106`|\n||`gpt-3.5-turbo-16k`|\n||`gpt-4`|\n||`gpt-4-32k-0314`|\n||`gpt-4-turbo-2024-04-09`|\n||`gpt-4o-mini`|\n\n</details><details><summary>cohere</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**cohere**|`summarize-xlarge`|\n\n</details><details><summary>alephalpha</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**alephalpha**|`luminous-base`|\n||`luminous-base-control`|\n||`luminous-extended`|\n||`luminous-extended-control`|\n||`luminous-supreme`|\n||`luminous-supreme-control`|\n\n</details><details><summary>nlpcloud</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**nlpcloud**|`bart-large-cnn`|\n||`chatdolphin`|\n||`fast-gpt-j`|\n||`finetuned-llama-2-70b`|\n\n</details><details><summary>anthropic</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**anthropic**|`claude-3-5-sonnet-20240620-v1:0`|\n||`claude-3-haiku-20240307-v1:0`|\n||`claude-3-sonnet-20240229-v1:0`|\n||`claude-instant-v1`|\n||`claude-v2`|\n\n</details>\n\n</details>",
        "summary": "Summarize",
        "tags": [
          "Summarize"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  },
                  "output_sentences": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "microsoft,emvista,openai,ai21labs,anthropic,alephalpha,nlpcloud,connexun,cohere",
                    "output_sentences": 3,
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.",
                    "language": "en"
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ai21labs": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "oneai": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "alephalpha": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "anthropic": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "emvista": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "writesonic": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "microsoft": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "connexun": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "cohere": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "nlpcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "meaningcloud": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "result": {
                              "title": "Result",
                              "type": "string"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "result",
                            "status"
                          ],
                          "title": "textsummarizeSummarizeDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textsummarizeResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "microsoft": {
                        "result": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.",
                        "cost": 0
                      },
                      "emvista": {
                        "result": "Barack Hussein Obama is an politician who . A member of the Democratic Party . He served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004 . ",
                        "cost": 0
                      },
                      "openai": {
                        "result": "Barack Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. He was the first African-American president and had previously served as a U.S. senator and an Illinois state senator.",
                        "cost": 0
                      },
                      "ai21labs": {
                        "result": "Barack Hussein Obama was the 44th president of the United States from 2009 to 2017. He was the first African-American president.",
                        "cost": 0
                      },
                      "anthropic": {
                        "result": " Barack Obama is a former U.S. president who served from 2009 to 2017. He was the first African-American president and a member of the Democratic Party. Prior to becoming president, he served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.",
                        "cost": 0
                      },
                      "alephalpha": {
                        "result": "Barack Obama was the 44th president of the United States.",
                        "cost": 0
                      },
                      "nlpcloud": {
                        "result": "Barack Obama was the 44th president of the United States from 2009 to 2017. He was the first African-American president of the United States, and a member of the Democratic Party. Prior to his presidency, Obama served as a U.S. senator from Illinois from 2005 to 2008, and an Illinois state senator from 1997 to 2004.",
                        "cost": 0
                      },
                      "connexun": {
                        "result": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States.",
                        "cost": 0
                      },
                      "cohere": {
                        "result": "\"You have to have a big-picture vision for where you want to go.",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/syntax_analysis": {
      "post": {
        "operationId": "text_syntax_analysis_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**amazon**|`boto3 (v1.15.18)`|0.5 (per 1000000 char)|300 char\n|**google**|`v1`|0.5 (per 1000000 char)|1000 char\n|**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char\n|**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char\n|**emvista**|`v1.0`|1.0 (per 1000000 char)|1 char\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Arabic**|`ar`|\n|**Chinese**|`zh`|\n|**Czech**|`cs`|\n|**Danish**|`da`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**Finnish**|`fi`|\n|**French**|`fr`|\n|**German**|`de`|\n|**Hebrew**|`he`|\n|**Hindi**|`hi`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Korean**|`ko`|\n|**Norwegian**|`no`|\n|**Polish**|`pl`|\n|**Portuguese**|`pt`|\n|**Romanian**|`ro`|\n|**Russian**|`ru`|\n|**Slovak**|`sk`|\n|**Spanish**|`es`|\n|**Swedish**|`sv`|\n|**Turkish**|`tr`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n|**Chinese (Taiwan)**|`zh-TW`|\n|**Chinese (Traditional)**|`zh-Hant`|\n|**English (United States)**|`en-US`|\n|**French (France)**|`fr-FR`|\n\n</details>",
        "summary": "Syntax Analysis",
        "tags": [
          "Syntax Analysis"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "amazon,emvista,lettria,ibm,google",
                    "language": "en",
                    "text": "Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "lettria": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "word": {
                                    "title": "Word",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  },
                                  "tag": {
                                    "title": "Tag",
                                    "type": "string"
                                  },
                                  "lemma": {
                                    "title": "Lemma",
                                    "type": "string"
                                  },
                                  "others": {
                                    "title": "Others",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "word",
                                  "importance",
                                  "tag",
                                  "lemma"
                                ],
                                "title": "InfosSyntaxAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "emvista": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "word": {
                                    "title": "Word",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  },
                                  "tag": {
                                    "title": "Tag",
                                    "type": "string"
                                  },
                                  "lemma": {
                                    "title": "Lemma",
                                    "type": "string"
                                  },
                                  "others": {
                                    "title": "Others",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "word",
                                  "importance",
                                  "tag",
                                  "lemma"
                                ],
                                "title": "InfosSyntaxAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "ibm": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "word": {
                                    "title": "Word",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  },
                                  "tag": {
                                    "title": "Tag",
                                    "type": "string"
                                  },
                                  "lemma": {
                                    "title": "Lemma",
                                    "type": "string"
                                  },
                                  "others": {
                                    "title": "Others",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "word",
                                  "importance",
                                  "tag",
                                  "lemma"
                                ],
                                "title": "InfosSyntaxAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "word": {
                                    "title": "Word",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  },
                                  "tag": {
                                    "title": "Tag",
                                    "type": "string"
                                  },
                                  "lemma": {
                                    "title": "Lemma",
                                    "type": "string"
                                  },
                                  "others": {
                                    "title": "Others",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "word",
                                  "importance",
                                  "tag",
                                  "lemma"
                                ],
                                "title": "InfosSyntaxAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "amazon": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "word": {
                                    "title": "Word",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  },
                                  "tag": {
                                    "title": "Tag",
                                    "type": "string"
                                  },
                                  "lemma": {
                                    "title": "Lemma",
                                    "type": "string"
                                  },
                                  "others": {
                                    "title": "Others",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "word",
                                  "importance",
                                  "tag",
                                  "lemma"
                                ],
                                "title": "InfosSyntaxAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "eden-ai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "word": {
                                    "title": "Word",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  },
                                  "tag": {
                                    "title": "Tag",
                                    "type": "string"
                                  },
                                  "lemma": {
                                    "title": "Lemma",
                                    "type": "string"
                                  },
                                  "others": {
                                    "title": "Others",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "word",
                                  "importance",
                                  "tag",
                                  "lemma"
                                ],
                                "title": "InfosSyntaxAnalysisDataClass",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "textsyntax_analysisResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "amazon": {
                        "items": [
                          {
                            "word": "Barack",
                            "importance": 0.9989722371101379,
                            "tag": "Proper_noun",
                            "lemma": "Barack",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "Hussein",
                            "importance": 0.999951183795929,
                            "tag": "Proper_noun",
                            "lemma": "Hussein",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "Obama",
                            "importance": 0.9997590780258179,
                            "tag": "Proper_noun",
                            "lemma": "Obama",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "is",
                            "importance": 0.998971164226532,
                            "tag": "Verb",
                            "lemma": "be",
                            "others": {
                              "mood": "INDICATIVE",
                              "number": "SINGULAR",
                              "person": "THIRD",
                              "tense": "PRESENT"
                            }
                          },
                          {
                            "word": "an",
                            "importance": 0.9999935626983643,
                            "tag": "Determiner",
                            "lemma": "a",
                            "others": {}
                          },
                          {
                            "word": "American",
                            "importance": 0.9837486743927002,
                            "tag": "Adjactive",
                            "lemma": "American",
                            "others": {}
                          },
                          {
                            "word": "politician",
                            "importance": 0.9999579191207886,
                            "tag": "Noun",
                            "lemma": "politician",
                            "others": {
                              "number": "SINGULAR"
                            }
                          },
                          {
                            "word": "who",
                            "importance": 1,
                            "tag": "Pronoun",
                            "lemma": "who",
                            "others": {
                              "person": "THIRD"
                            }
                          },
                          {
                            "word": "served",
                            "importance": 0.9998955726623535,
                            "tag": "Verb",
                            "lemma": "serve",
                            "others": {
                              "mood": "INDICATIVE",
                              "tense": "PAST"
                            }
                          },
                          {
                            "word": "as",
                            "importance": 0.9925481081008911,
                            "tag": "Adposition",
                            "lemma": "as",
                            "others": {}
                          }
                        ],
                        "cost": 0
                      },
                      "emvista": {
                        "items": [
                          {
                            "word": "is",
                            "importance": null,
                            "tag": "auxiliary",
                            "lemma": "be",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "American",
                            "importance": null,
                            "tag": "adjective",
                            "lemma": "american",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "44th",
                            "importance": null,
                            "tag": "adjective",
                            "lemma": "44th",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "was",
                            "importance": null,
                            "tag": "auxiliary",
                            "lemma": "be",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "first",
                            "importance": null,
                            "tag": "adjective",
                            "lemma": "first",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "African",
                            "importance": null,
                            "tag": "adjective",
                            "lemma": "african",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "American",
                            "importance": null,
                            "tag": "adjective",
                            "lemma": "american",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "previously",
                            "importance": null,
                            "tag": "adverb",
                            "lemma": "previously",
                            "others": {
                              "gender": null,
                              "plural": false,
                              "mode": null,
                              "infinitive": null
                            }
                          }
                        ],
                        "cost": 0
                      },
                      "lettria": {
                        "items": [
                          {
                            "word": "Barack Hussein Obama",
                            "importance": null,
                            "tag": "proper noun",
                            "lemma": "Barack Hussein Obama",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "is",
                            "importance": null,
                            "tag": "verb",
                            "lemma": "be",
                            "others": {
                              "gender": null,
                              "plural": null,
                              "mode": null,
                              "infinitive": "be"
                            }
                          },
                          {
                            "word": "an",
                            "importance": null,
                            "tag": "determiner",
                            "lemma": "a",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "american",
                            "importance": null,
                            "tag": "adjective",
                            "lemma": "american",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "politician",
                            "importance": null,
                            "tag": "common noun",
                            "lemma": "politician",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "who",
                            "importance": null,
                            "tag": "pronom relative",
                            "lemma": "who",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "served",
                            "importance": null,
                            "tag": "verb",
                            "lemma": "serve",
                            "others": {
                              "gender": null,
                              "plural": null,
                              "mode": null,
                              "infinitive": "serve"
                            }
                          },
                          {
                            "word": "as",
                            "importance": null,
                            "tag": "preposition",
                            "lemma": "as",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "the",
                            "importance": null,
                            "tag": "determiner",
                            "lemma": "the",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          },
                          {
                            "word": "president",
                            "importance": null,
                            "tag": "common noun",
                            "lemma": "president",
                            "others": {
                              "gender": "masculine",
                              "plural": "singular",
                              "mode": null,
                              "infinitive": null
                            }
                          }
                        ],
                        "cost": 0
                      },
                      "ibm": {
                        "items": [
                          {
                            "word": "Barack",
                            "importance": null,
                            "tag": "Proper noun",
                            "lemma": null,
                            "others": {}
                          },
                          {
                            "word": "Hussein",
                            "importance": null,
                            "tag": "Proper noun",
                            "lemma": null,
                            "others": {}
                          },
                          {
                            "word": "Obama",
                            "importance": null,
                            "tag": "Proper noun",
                            "lemma": null,
                            "others": {}
                          },
                          {
                            "word": "is",
                            "importance": null,
                            "tag": "Auxiliary",
                            "lemma": "be",
                            "others": {}
                          },
                          {
                            "word": "an",
                            "importance": null,
                            "tag": "Determiner",
                            "lemma": "a",
                            "others": {}
                          },
                          {
                            "word": "American",
                            "importance": null,
                            "tag": "Adjactive",
                            "lemma": "American",
                            "others": {}
                          },
                          {
                            "word": "politician",
                            "importance": null,
                            "tag": "Noun",
                            "lemma": "politician",
                            "others": {}
                          },
                          {
                            "word": "who",
                            "importance": null,
                            "tag": "Pronoun",
                            "lemma": "who",
                            "others": {}
                          },
                          {
                            "word": "served",
                            "importance": null,
                            "tag": "Verb",
                            "lemma": "serve",
                            "others": {}
                          },
                          {
                            "word": "as",
                            "importance": null,
                            "tag": "Adposition",
                            "lemma": "as",
                            "others": {}
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "items": [
                          {
                            "word": "Barack",
                            "importance": null,
                            "tag": "Noun",
                            "lemma": "Barack",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "Hussein",
                            "importance": null,
                            "tag": "Noun",
                            "lemma": "Hussein",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "Obama",
                            "importance": null,
                            "tag": "Noun",
                            "lemma": "Obama",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "is",
                            "importance": null,
                            "tag": "Verb",
                            "lemma": "be",
                            "others": {
                              "mood": "INDICATIVE",
                              "number": "SINGULAR",
                              "person": "THIRD",
                              "tense": "PRESENT"
                            }
                          },
                          {
                            "word": "an",
                            "importance": null,
                            "tag": "Determiner",
                            "lemma": "an",
                            "others": {}
                          },
                          {
                            "word": "American",
                            "importance": null,
                            "tag": "Adjactive",
                            "lemma": "American",
                            "others": {}
                          },
                          {
                            "word": "politician",
                            "importance": null,
                            "tag": "Noun",
                            "lemma": "politician",
                            "others": {
                              "number": "SINGULAR"
                            }
                          },
                          {
                            "word": "who",
                            "importance": null,
                            "tag": "Pronoun",
                            "lemma": "who",
                            "others": {
                              "person": "THIRD"
                            }
                          },
                          {
                            "word": "served",
                            "importance": null,
                            "tag": "Verb",
                            "lemma": "serve",
                            "others": {
                              "mood": "INDICATIVE",
                              "tense": "PAST"
                            }
                          },
                          {
                            "word": "as",
                            "importance": null,
                            "tag": "Adposition",
                            "lemma": "as",
                            "others": {}
                          }
                        ],
                        "cost": 0
                      },
                      "eden-ai": {
                        "items": [
                          {
                            "word": "Barack",
                            "importance": 0.9989722371101379,
                            "tag": "Proper_noun",
                            "lemma": "Barack",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "Hussein",
                            "importance": 0.999951183795929,
                            "tag": "Proper_noun",
                            "lemma": "Hussein",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "Obama",
                            "importance": 0.9997590780258179,
                            "tag": "Proper_noun",
                            "lemma": "Obama",
                            "others": {
                              "number": "SINGULAR",
                              "proper_name": "PROPER"
                            }
                          },
                          {
                            "word": "is",
                            "importance": 0.998971164226532,
                            "tag": "Verb",
                            "lemma": "be",
                            "others": {
                              "mood": "INDICATIVE",
                              "number": "SINGULAR",
                              "person": "THIRD",
                              "tense": "PRESENT"
                            }
                          },
                          {
                            "word": "an",
                            "importance": 0.9999935626983643,
                            "tag": "Determiner",
                            "lemma": "a",
                            "others": {}
                          },
                          {
                            "word": "American",
                            "importance": 0.9837486743927002,
                            "tag": "Adjactive",
                            "lemma": "American",
                            "others": {}
                          },
                          {
                            "word": "politician",
                            "importance": 0.9999579191207886,
                            "tag": "Noun",
                            "lemma": "politician",
                            "others": {
                              "number": "SINGULAR"
                            }
                          },
                          {
                            "word": "who",
                            "importance": 1,
                            "tag": "Pronoun",
                            "lemma": "who",
                            "others": {
                              "person": "THIRD"
                            }
                          },
                          {
                            "word": "served",
                            "importance": 0.9998955726623535,
                            "tag": "Verb",
                            "lemma": "serve",
                            "others": {
                              "mood": "INDICATIVE",
                              "tense": "PAST"
                            }
                          },
                          {
                            "word": "as",
                            "importance": 0.9925481081008911,
                            "tag": "Adposition",
                            "lemma": "as",
                            "others": {}
                          }
                        ],
                        "status": "success",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/text/topic_extraction": {
      "post": {
        "operationId": "text_topic_extraction_create",
        "description": "<details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>\n\n\n\n|Provider|Version|Price|Billing unit|\n|----|-------|-----|------------|\n|**google**|`v1`|2.0 (per 1000000 char)|1000 char\n|**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char\n|**openai**|`v1`|20.0 (per 1000000 token)|1 token\n|**tenstorrent**|`v1.0.0`|2.0 (per 1000000 char)|1000 char\n\n\n</details>\n\n<details><summary>Supported Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Arabic**|`ar`|\n|**Chinese**|`zh`|\n|**Dutch**|`nl`|\n|**English**|`en`|\n|**French**|`fr`|\n|**German**|`de`|\n|**Italian**|`it`|\n|**Japanese**|`ja`|\n|**Korean**|`ko`|\n|**Portuguese**|`pt`|\n|**Russian**|`ru`|\n|**Spanish**|`es`|\n\n</details><details><summary>Supported Detailed Languages</summary>\n\n\n\n\n\n|Name|Value|\n|----|-----|\n|**Auto detection**|`auto-detect`|\n\n</details>",
        "summary": "Topic Extraction",
        "tags": [
          "Topic Extraction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "string",
                    "default": {},
                    "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
                  },
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
                  },
                  "fallback_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
                    "maxItems": 5
                  },
                  "response_as_dict": {
                    "type": "boolean",
                    "default": true,
                    "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
                  },
                  "attributes_as_list": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
                  },
                  "show_base_64": {
                    "type": "boolean",
                    "default": true
                  },
                  "show_original_response": {
                    "type": "boolean",
                    "default": false,
                    "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Text to analyze"
                  },
                  "language": {
                    "type": "string",
                    "nullable": true,
                    "description": "Language code for the language the input text is written in (eg: en, fr)."
                  }
                },
                "required": [
                  "providers",
                  "text"
                ]
              },
              "examples": {
                "RequestExample": {
                  "value": {
                    "providers": "tenstorrent,google,ibm,openai",
                    "language": "en",
                    "text": "That actor on TV makes movies in Hollywood and also stars in a variety of popular new TV shows."
                  },
                  "summary": "Request Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "FeatureApiAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tenstorrent": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "category",
                                  "importance"
                                ],
                                "title": "ExtractedTopic",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "texttopic_extractionTopicExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "google": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "category",
                                  "importance"
                                ],
                                "title": "ExtractedTopic",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "texttopic_extractionTopicExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "ibm": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "category",
                                  "importance"
                                ],
                                "title": "ExtractedTopic",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "texttopic_extractionTopicExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "openai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "category",
                                  "importance"
                                ],
                                "title": "ExtractedTopic",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "texttopic_extractionTopicExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    },
                    "eden-ai": {
                      "allOf": [
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "properties": {
                                  "category": {
                                    "title": "Category",
                                    "type": "string"
                                  },
                                  "importance": {
                                    "title": "Importance",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "category",
                                  "importance"
                                ],
                                "title": "ExtractedTopic",
                                "type": "object"
                              },
                              "title": "Items",
                              "type": "array"
                            },
                            "original_response": {
                              "default": null,
                              "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                              "title": "Original Response"
                            },
                            "status": {
                              "allOf": [
                                {
                                  "enum": [
                                    "sucess",
                                    "fail"
                                  ],
                                  "type": "string"
                                }
                              ],
                              "title": "Status"
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "title": "texttopic_extractionTopicExtractionDataClass",
                          "type": "object"
                        }
                      ],
                      "default": null
                    }
                  },
                  "title": "texttopic_extractionResponseModel",
                  "type": "object"
                },
                "examples": {
                  "ResponseExample": {
                    "value": {
                      "tenstorrent": {
                        "items": [
                          {
                            "category": "Film Tv & Video",
                            "importance": 0.99
                          },
                          {
                            "category": "Celebrity & Pop Culture",
                            "importance": 0.79
                          }
                        ],
                        "cost": 0
                      },
                      "google": {
                        "items": [
                          {
                            "category": "/Arts & Entertainment/Tv & Video/Tv Shows & Programs",
                            "importance": 0.52
                          }
                        ],
                        "cost": 0
                      },
                      "ibm": {
                        "items": [
                          {
                            "category": "/Art And Entertainment/Movies And Tv",
                            "importance": 1
                          },
                          {
                            "category": "/Art And Entertainment/Movies And Tv/Movies",
                            "importance": 1
                          },
                          {
                            "category": "/Art And Entertainment/Movies And Tv/Television",
                            "importance": 1
                          }
                        ],
                        "cost": 0
                      },
                      "openai": {
                        "items": [
                          {
                            "category": "Entertainment",
                            "importance": 0.9
                          },
                          {
                            "category": "Film Industry",
                            "importance": 0.8
                          },
                          {
                            "category": "Television",
                            "importance": 0.7
                          }
                        ],
                        "cost": 0
                      },
                      "eden-ai": {
                        "items": [
                          {
                            "category": "/Art And Entertainment/Movies And Tv/Television",
                            "importance": 1
                          },
                          {
                            "category": "/Art And Entertainment/Movies And Tv/Movies",
                            "importance": 1
                          },
                          {
                            "category": "Celebrity & Pop Culture",
                            "importance": 0.79
                          },
                          {
                            "category": "Film Tv & Video",
                            "importance": 0.99
                          },
                          {
                            "category": "Film Industry",
                            "importance": 0.8
                          }
                        ],
                        "status": "success",
                        "cost": 0
                      }
                    },
                    "summary": "Response Example"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "<parameter_name>": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "<parameter_name>"
                          ]
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string",
                      "default": "Not Found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AiDetectionItem": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "prediction": {
            "title": "Prediction",
            "type": "string"
          },
          "ai_score": {
            "title": "Ai Score",
            "type": "integer"
          },
          "ai_score_detail": {
            "title": "Ai Score Detail",
            "type": "integer"
          }
        },
        "required": [
          "text",
          "prediction",
          "ai_score",
          "ai_score_detail"
        ],
        "title": "AiDetectionItem",
        "type": "object"
      },
      "AnonymizationEntity": {
        "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
        "properties": {
          "offset": {
            "minimum": 0,
            "title": "Offset",
            "type": "integer"
          },
          "length": {
            "exclusiveMinimum": true,
            "title": "Length",
            "type": "integer"
          },
          "category": {
            "description": "This enum are used to categorize the entities extracted from the text.",
            "enum": [
              "PersonalInformation",
              "FinancialInformation",
              "IdentificationNumbers",
              "Miscellaneous",
              "OrganizationInformation",
              "DateAndTime",
              "LocationInformation",
              "Other"
            ],
            "title": "CategoryType",
            "type": "string"
          },
          "subcategory": {
            "anyOf": [
              {
                "enum": [
                  "CreditCard",
                  "CardExpiry",
                  "BankAccountNumber",
                  "BankRoutingNumber",
                  "SwiftCode",
                  "TaxIdentificationNumber"
                ],
                "title": "FinancialInformationSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Name",
                  "Age",
                  "Email",
                  "Phone",
                  "PersonType",
                  "Gender"
                ],
                "title": "PersonalInformationSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "SocialSecurityNumber",
                  "NationalIdentificationNumber",
                  "NationalHealthService",
                  "ResidentRegistrationNumber",
                  "DriverLicenseNumber",
                  "PassportNumber"
                ],
                "title": "IdentificationNumbersSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "URL",
                  "IP",
                  "MAC",
                  "VehicleIdentificationNumber",
                  "LicensePlate",
                  "VoterNumber",
                  "AWSKeys",
                  "AzureKeys",
                  "Password"
                ],
                "title": "MiscellaneousSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "CompanyName",
                  "CompanyNumber",
                  "BuisnessNumber"
                ],
                "title": "OrganizationSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Date",
                  "Time",
                  "DateTime",
                  "Duration"
                ],
                "title": "DateAndTimeSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Address",
                  "Location"
                ],
                "title": "LocationInformationSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Other",
                  "Anonymized",
                  "Nerd",
                  "Wsd",
                  "Unknown"
                ],
                "title": "OtherSubCategoryType",
                "type": "string"
              }
            ],
            "title": "Subcategory"
          },
          "original_label": {
            "minLength": 1,
            "title": "Original Label",
            "type": "string"
          },
          "content": {
            "minLength": 1,
            "title": "Content",
            "type": "string"
          },
          "confidence_score": {
            "maximum": 1,
            "minimum": 0,
            "title": "Confidence Score",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "length",
          "category",
          "subcategory",
          "original_label",
          "content",
          "confidence_score"
        ],
        "title": "AnonymizationEntity",
        "type": "object"
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "message": {
                "type": "object",
                "properties": {
                  "<parameter_name>": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "<parameter_name>"
                ]
              }
            },
            "required": [
              "message",
              "type"
            ]
          }
        },
        "required": [
          "error"
        ]
      },
      "CategoryType": {
        "description": "This enum are used to categorize the entities extracted from the text.",
        "enum": [
          "PersonalInformation",
          "FinancialInformation",
          "IdentificationNumbers",
          "Miscellaneous",
          "OrganizationInformation",
          "DateAndTime",
          "LocationInformation",
          "Other"
        ],
        "title": "CategoryType",
        "type": "string"
      },
      "ChatAvailableToolsRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of your tool/function"
          },
          "description": {
            "type": "string"
          },
          "parameters": {
            "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
          }
        },
        "required": [
          "description",
          "name",
          "parameters"
        ]
      },
      "ChatMessageDataClass": {
        "properties": {
          "role": {
            "title": "Role",
            "type": "string"
          },
          "message": {
            "default": "",
            "title": "Message",
            "type": "string"
          },
          "tools": {
            "default": null,
            "description": "Tools defined by the user",
            "items": {
              "type": "object"
            },
            "title": "Tools",
            "type": "array"
          },
          "tool_calls": {
            "default": null,
            "description": "The tools arguments generated from tools definition and user prompt.",
            "items": {
              "properties": {
                "id": {
                  "title": "Id",
                  "type": "string"
                },
                "name": {
                  "title": "Name",
                  "type": "string"
                },
                "arguments": {
                  "title": "Arguments",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name",
                "arguments"
              ],
              "title": "ToolCall",
              "type": "object"
            },
            "title": "Tool Calls",
            "type": "array"
          }
        },
        "required": [
          "role"
        ],
        "title": "ChatMessageDataClass",
        "type": "object"
      },
      "ChatMessageRequest": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "minLength": 1
          },
          "message": {},
          "tools": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The name of your tool/function"
                },
                "description": {
                  "type": "string"
                },
                "parameters": {
                  "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                }
              },
              "required": [
                "description",
                "name",
                "parameters"
              ]
            },
            "nullable": true
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1
                },
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "arguments": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "arguments",
                "id",
                "name"
              ]
            },
            "nullable": true
          }
        },
        "required": [
          "message",
          "role"
        ]
      },
      "ChatToolCallsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "arguments": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "arguments",
          "id",
          "name"
        ]
      },
      "ChatToolResultRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "the id of the `tool_call` used to generate result"
          },
          "result": {
            "type": "string",
            "minLength": 1,
            "description": "the result of your function"
          }
        },
        "required": [
          "id",
          "result"
        ]
      },
      "ContentSubCategoryType": {
        "enum": [
          "MiddleFinger",
          "PublicSafety",
          "Health",
          "Explicit",
          "QRCode",
          "Medical",
          "Politics",
          "Legal"
        ],
        "title": "ContentSubCategoryType",
        "type": "string"
      },
      "DateAndTimeSubCategoryType": {
        "enum": [
          "Date",
          "Time",
          "DateTime",
          "Duration"
        ],
        "title": "DateAndTimeSubCategoryType",
        "type": "string"
      },
      "DrugAndAlcoholSubCategoryType": {
        "enum": [
          "DrugProducts",
          "DrugUse",
          "Tobacco",
          "Smoking",
          "Alcohol",
          "Drinking"
        ],
        "title": "DrugAndAlcoholSubCategoryType",
        "type": "string"
      },
      "EmbeddingDataClass": {
        "properties": {
          "embedding": {
            "items": {
              "type": "integer"
            },
            "title": "Embedding",
            "type": "array"
          }
        },
        "required": [
          "embedding"
        ],
        "title": "EmbeddingDataClass",
        "type": "object"
      },
      "EmotionItem": {
        "description": "This class is used in EmotionAnalysisDataClass to list emotion analysed.\nArgs:\n    - emotion (EmotionEnum): emotion of the text\n    - emotion_score (float): score of the emotion",
        "properties": {
          "emotion": {
            "title": "Emotion",
            "type": "string"
          },
          "emotion_score": {
            "maximum": 100,
            "minimum": 0,
            "title": "Emotion Score",
            "type": "integer"
          }
        },
        "required": [
          "emotion",
          "emotion_score"
        ],
        "title": "EmotionItem",
        "type": "object"
      },
      "Entity": {
        "properties": {
          "type": {
            "description": "Recognized Entity type",
            "title": "Type",
            "type": "string"
          },
          "text": {
            "description": "Text corresponding to the entity",
            "title": "Text",
            "type": "string"
          },
          "sentiment": {
            "allOf": [
              {
                "enum": [
                  "Positive",
                  "Negative",
                  "Neutral",
                  "Mixed"
                ],
                "type": "string"
              }
            ],
            "title": "Sentiment"
          },
          "begin_offset": {
            "default": null,
            "title": "Begin Offset",
            "type": "integer"
          },
          "end_offset": {
            "default": null,
            "title": "End Offset",
            "type": "integer"
          }
        },
        "required": [
          "type",
          "text",
          "sentiment"
        ],
        "title": "Entity",
        "type": "object"
      },
      "EntitySentimentEnum": {
        "enum": [
          "Positive",
          "Negative",
          "Neutral",
          "Mixed"
        ],
        "type": "string"
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message",
              "type"
            ]
          }
        },
        "required": [
          "error"
        ]
      },
      "ExtractedTopic": {
        "properties": {
          "category": {
            "title": "Category",
            "type": "string"
          },
          "importance": {
            "title": "Importance",
            "type": "integer"
          }
        },
        "required": [
          "category",
          "importance"
        ],
        "title": "ExtractedTopic",
        "type": "object"
      },
      "FallbackTypeEnum": {
        "enum": [
          "rerun",
          "continue"
        ],
        "type": "string",
        "description": "* `rerun` - Rerun\n* `continue` - Continue"
      },
      "FieldError": {
        "type": "object",
        "properties": {
          "<parameter_name>": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "<parameter_name>"
        ]
      },
      "FinanceSubCategoryType": {
        "enum": [
          "Gambling",
          "Finance",
          "MoneyContent"
        ],
        "title": "FinanceSubCategoryType",
        "type": "string"
      },
      "FinancialInformationSubCategoryType": {
        "enum": [
          "CreditCard",
          "CardExpiry",
          "BankAccountNumber",
          "BankRoutingNumber",
          "SwiftCode",
          "TaxIdentificationNumber"
        ],
        "title": "FinancialInformationSubCategoryType",
        "type": "string"
      },
      "GeneralSentimentEnum": {
        "enum": [
          "Positive",
          "Negative",
          "Neutral"
        ],
        "type": "string"
      },
      "HateAndExtremismSubCategoryType": {
        "enum": [
          "Hate",
          "Harassment",
          "Threatening",
          "Extremist",
          "Racy"
        ],
        "title": "HateAndExtremismSubCategoryType",
        "type": "string"
      },
      "IdentificationNumbersSubCategoryType": {
        "enum": [
          "SocialSecurityNumber",
          "NationalIdentificationNumber",
          "NationalHealthService",
          "ResidentRegistrationNumber",
          "DriverLicenseNumber",
          "PassportNumber"
        ],
        "title": "IdentificationNumbersSubCategoryType",
        "type": "string"
      },
      "InfosCustomNamedEntityRecognitionDataClass": {
        "properties": {
          "entity": {
            "title": "Entity",
            "type": "string"
          },
          "category": {
            "title": "Category",
            "type": "string"
          }
        },
        "required": [
          "entity",
          "category"
        ],
        "title": "InfosCustomNamedEntityRecognitionDataClass",
        "type": "object"
      },
      "InfosKeywordExtractionDataClass": {
        "properties": {
          "keyword": {
            "title": "Keyword",
            "type": "string"
          },
          "importance": {
            "title": "Importance",
            "type": "integer"
          }
        },
        "required": [
          "keyword",
          "importance"
        ],
        "title": "InfosKeywordExtractionDataClass",
        "type": "object"
      },
      "InfosNamedEntityRecognitionDataClass": {
        "properties": {
          "entity": {
            "title": "Entity",
            "type": "string"
          },
          "category": {
            "title": "Category",
            "type": "string"
          },
          "importance": {
            "title": "Importance",
            "type": "integer"
          }
        },
        "required": [
          "entity",
          "category",
          "importance"
        ],
        "title": "InfosNamedEntityRecognitionDataClass",
        "type": "object"
      },
      "InfosSearchDataClass": {
        "properties": {
          "object": {
            "title": "Object",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "integer"
          },
          "score": {
            "title": "Score",
            "type": "integer"
          }
        },
        "required": [
          "object",
          "document",
          "score"
        ],
        "title": "InfosSearchDataClass",
        "type": "object"
      },
      "InfosSyntaxAnalysisDataClass": {
        "properties": {
          "word": {
            "title": "Word",
            "type": "string"
          },
          "importance": {
            "title": "Importance",
            "type": "integer"
          },
          "tag": {
            "title": "Tag",
            "type": "string"
          },
          "lemma": {
            "title": "Lemma",
            "type": "string"
          },
          "others": {
            "title": "Others",
            "type": "object"
          }
        },
        "required": [
          "word",
          "importance",
          "tag",
          "lemma"
        ],
        "title": "InfosSyntaxAnalysisDataClass",
        "type": "object"
      },
      "ItemCustomClassificationDataClass": {
        "properties": {
          "input": {
            "title": "Input",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "confidence": {
            "title": "Confidence",
            "type": "integer"
          }
        },
        "required": [
          "input",
          "label",
          "confidence"
        ],
        "title": "ItemCustomClassificationDataClass",
        "type": "object"
      },
      "LocationInformationSubCategoryType": {
        "enum": [
          "Address",
          "Location"
        ],
        "title": "LocationInformationSubCategoryType",
        "type": "string"
      },
      "MiscellaneousSubCategoryType": {
        "enum": [
          "URL",
          "IP",
          "MAC",
          "VehicleIdentificationNumber",
          "LicensePlate",
          "VoterNumber",
          "AWSKeys",
          "AzureKeys",
          "Password"
        ],
        "title": "MiscellaneousSubCategoryType",
        "type": "string"
      },
      "NestedBadRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "message": {
            "type": "object",
            "properties": {
              "<parameter_name>": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "<parameter_name>"
            ]
          }
        },
        "required": [
          "message",
          "type"
        ]
      },
      "NestedError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "type"
        ]
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string",
            "default": "Not Found"
          }
        }
      },
      "OrganizationSubCategoryType": {
        "enum": [
          "CompanyName",
          "CompanyNumber",
          "BuisnessNumber"
        ],
        "title": "OrganizationSubCategoryType",
        "type": "string"
      },
      "OtherSubCategoryType": {
        "enum": [
          "Other",
          "Anonymized",
          "Nerd",
          "Wsd",
          "Unknown"
        ],
        "title": "OtherSubCategoryType",
        "type": "string"
      },
      "PersonalInformationSubCategoryType": {
        "enum": [
          "Name",
          "Age",
          "Email",
          "Phone",
          "PersonType",
          "Gender"
        ],
        "title": "PersonalInformationSubCategoryType",
        "type": "string"
      },
      "PlagiaDetectionCandidate": {
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "plagia_score": {
            "title": "Plagia Score",
            "type": "integer"
          },
          "prediction": {
            "title": "Prediction",
            "type": "string"
          },
          "plagiarized_text": {
            "title": "Plagiarized Text",
            "type": "string"
          }
        },
        "required": [
          "url",
          "plagia_score",
          "prediction",
          "plagiarized_text"
        ],
        "title": "PlagiaDetectionCandidate",
        "type": "object"
      },
      "PlagiaDetectionItem": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "candidates": {
            "items": {
              "properties": {
                "url": {
                  "title": "Url",
                  "type": "string"
                },
                "plagia_score": {
                  "title": "Plagia Score",
                  "type": "integer"
                },
                "prediction": {
                  "title": "Prediction",
                  "type": "string"
                },
                "plagiarized_text": {
                  "title": "Plagiarized Text",
                  "type": "string"
                }
              },
              "required": [
                "url",
                "plagia_score",
                "prediction",
                "plagiarized_text"
              ],
              "title": "PlagiaDetectionCandidate",
              "type": "object"
            },
            "title": "Candidates",
            "type": "array"
          }
        },
        "required": [
          "text"
        ],
        "title": "PlagiaDetectionItem",
        "type": "object"
      },
      "PromptDataClass": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "title": "PromptDataClass",
        "type": "object"
      },
      "SafeSubCategoryType": {
        "enum": [
          "Safe",
          "NotSafe"
        ],
        "title": "SafeSubCategoryType",
        "type": "string"
      },
      "SegmentSentimentAnalysisDataClass": {
        "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
        "properties": {
          "segment": {
            "title": "Segment",
            "type": "string"
          },
          "sentiment": {
            "allOf": [
              {
                "enum": [
                  "Positive",
                  "Negative",
                  "Neutral"
                ],
                "type": "string"
              }
            ],
            "title": "Sentiment"
          },
          "sentiment_rate": {
            "maximum": 1,
            "minimum": 0,
            "title": "Sentiment Rate",
            "type": "integer"
          }
        },
        "required": [
          "segment",
          "sentiment",
          "sentiment_rate"
        ],
        "title": "SegmentSentimentAnalysisDataClass",
        "type": "object"
      },
      "SentimentEbfEnum": {
        "enum": [
          "Positive",
          "Negative",
          "Neutral"
        ],
        "type": "string"
      },
      "SexualSubCategoryType": {
        "enum": [
          "SexualActivity",
          "SexualSituations",
          "Nudity",
          "PartialNudity",
          "Suggestive",
          "AdultToys",
          "RevealingClothes",
          "Sexual"
        ],
        "title": "SexualSubCategoryType",
        "type": "string"
      },
      "SimilarityMetricEnum": {
        "enum": [
          "cosine",
          "manhattan",
          "euclidean"
        ],
        "type": "string",
        "description": "* `cosine` - cosine\n* `manhattan` - manhattan\n* `euclidean` - euclidean"
      },
      "SpellCheckItem": {
        "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "offset": {
            "minimum": 0,
            "title": "Offset",
            "type": "integer"
          },
          "length": {
            "minimum": 0,
            "title": "Length",
            "type": "integer"
          },
          "suggestions": {
            "items": {
              "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
              "properties": {
                "suggestion": {
                  "title": "Suggestion",
                  "type": "string"
                },
                "score": {
                  "maximum": 1,
                  "minimum": 0,
                  "title": "Score",
                  "type": "integer"
                }
              },
              "required": [
                "suggestion",
                "score"
              ],
              "title": "SuggestionItem",
              "type": "object"
            },
            "title": "Suggestions",
            "type": "array"
          }
        },
        "required": [
          "text",
          "type",
          "offset",
          "length"
        ],
        "title": "SpellCheckItem",
        "type": "object"
      },
      "StatusEnum": {
        "enum": [
          "sucess",
          "fail"
        ],
        "type": "string"
      },
      "SuggestionItem": {
        "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
        "properties": {
          "suggestion": {
            "title": "Suggestion",
            "type": "string"
          },
          "score": {
            "maximum": 1,
            "minimum": 0,
            "title": "Score",
            "type": "integer"
          }
        },
        "required": [
          "suggestion",
          "score"
        ],
        "title": "SuggestionItem",
        "type": "object"
      },
      "TextModerationItem": {
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "likelihood": {
            "title": "Likelihood",
            "type": "integer"
          },
          "category": {
            "description": "This enum are used to categorize the entities extracted from the text.",
            "enum": [
              "PersonalInformation",
              "FinancialInformation",
              "IdentificationNumbers",
              "Miscellaneous",
              "OrganizationInformation",
              "DateAndTime",
              "LocationInformation",
              "Other"
            ],
            "title": "CategoryType",
            "type": "string"
          },
          "subcategory": {
            "anyOf": [
              {
                "enum": [
                  "Insult",
                  "Obscene",
                  "Derogatory",
                  "Profanity",
                  "Threat",
                  "Toxic"
                ],
                "title": "ToxicSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "MiddleFinger",
                  "PublicSafety",
                  "Health",
                  "Explicit",
                  "QRCode",
                  "Medical",
                  "Politics",
                  "Legal"
                ],
                "title": "ContentSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "SexualActivity",
                  "SexualSituations",
                  "Nudity",
                  "PartialNudity",
                  "Suggestive",
                  "AdultToys",
                  "RevealingClothes",
                  "Sexual"
                ],
                "title": "SexualSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "GraphicViolenceOrGore",
                  "PhysicalViolence",
                  "WeaponViolence",
                  "Violence"
                ],
                "title": "ViolenceSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "DrugProducts",
                  "DrugUse",
                  "Tobacco",
                  "Smoking",
                  "Alcohol",
                  "Drinking"
                ],
                "title": "DrugAndAlcoholSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Gambling",
                  "Finance",
                  "MoneyContent"
                ],
                "title": "FinanceSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Hate",
                  "Harassment",
                  "Threatening",
                  "Extremist",
                  "Racy"
                ],
                "title": "HateAndExtremismSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Safe",
                  "NotSafe"
                ],
                "title": "SafeSubCategoryType",
                "type": "string"
              },
              {
                "enum": [
                  "Other",
                  "Anonymized",
                  "Nerd",
                  "Wsd",
                  "Unknown"
                ],
                "title": "OtherSubCategoryType",
                "type": "string"
              }
            ],
            "title": "Subcategory"
          },
          "likelihood_score": {
            "title": "Likelihood Score",
            "type": "integer"
          }
        },
        "required": [
          "label",
          "likelihood",
          "category",
          "subcategory",
          "likelihood_score"
        ],
        "title": "TextModerationItem",
        "type": "object"
      },
      "ToolCall": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "arguments": {
            "title": "Arguments",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "arguments"
        ],
        "title": "ToolCall",
        "type": "object"
      },
      "ToolChoiceEnum": {
        "enum": [
          "auto",
          "required",
          "none"
        ],
        "type": "string",
        "description": "* `auto` - auto\n* `required` - required\n* `none` - none"
      },
      "ToxicSubCategoryType": {
        "enum": [
          "Insult",
          "Obscene",
          "Derogatory",
          "Profanity",
          "Threat",
          "Toxic"
        ],
        "title": "ToxicSubCategoryType",
        "type": "string"
      },
      "ViolenceSubCategoryType": {
        "enum": [
          "GraphicViolenceOrGore",
          "PhysicalViolence",
          "WeaponViolence",
          "Violence"
        ],
        "title": "ViolenceSubCategoryType",
        "type": "string"
      },
      "textai_detectionAiDetectionDataClass": {
        "properties": {
          "ai_score": {
            "title": "Ai Score",
            "type": "integer"
          },
          "items": {
            "items": {
              "properties": {
                "text": {
                  "title": "Text",
                  "type": "string"
                },
                "prediction": {
                  "title": "Prediction",
                  "type": "string"
                },
                "ai_score": {
                  "title": "Ai Score",
                  "type": "integer"
                },
                "ai_score_detail": {
                  "title": "Ai Score Detail",
                  "type": "integer"
                }
              },
              "required": [
                "text",
                "prediction",
                "ai_score",
                "ai_score_detail"
              ],
              "title": "AiDetectionItem",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "ai_score",
          "status"
        ],
        "title": "textai_detectionAiDetectionDataClass",
        "type": "object"
      },
      "textai_detectionAiDetectionRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "provider_params": {
            "type": "string",
            "description": "\nParameters specific to the provider that you want to send along the request.\n\nit should take a *provider* name as key and an object of parameters as value.\n\nExample:\n\n    {\n      \"deepgram\": {\n        \"filler_words\": true,\n        \"smart_format\": true,\n        \"callback\": \"https://webhook.site/0000\"\n      },\n      \"assembly\": {\n        \"webhook_url\": \"https://webhook.site/0000\"\n      }\n    }\n\nPlease refer to the documentation of each provider to see which parameters to send.\n"
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text to analyze"
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textai_detectionResponseModel": {
        "properties": {
          "sapling": {
            "allOf": [
              {
                "properties": {
                  "ai_score": {
                    "title": "Ai Score",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "prediction": {
                          "title": "Prediction",
                          "type": "string"
                        },
                        "ai_score": {
                          "title": "Ai Score",
                          "type": "integer"
                        },
                        "ai_score_detail": {
                          "title": "Ai Score Detail",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "text",
                        "prediction",
                        "ai_score",
                        "ai_score_detail"
                      ],
                      "title": "AiDetectionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "ai_score",
                  "status"
                ],
                "title": "textai_detectionAiDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "winstonai": {
            "allOf": [
              {
                "properties": {
                  "ai_score": {
                    "title": "Ai Score",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "prediction": {
                          "title": "Prediction",
                          "type": "string"
                        },
                        "ai_score": {
                          "title": "Ai Score",
                          "type": "integer"
                        },
                        "ai_score_detail": {
                          "title": "Ai Score Detail",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "text",
                        "prediction",
                        "ai_score",
                        "ai_score_detail"
                      ],
                      "title": "AiDetectionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "ai_score",
                  "status"
                ],
                "title": "textai_detectionAiDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "originalityai": {
            "allOf": [
              {
                "properties": {
                  "ai_score": {
                    "title": "Ai Score",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "prediction": {
                          "title": "Prediction",
                          "type": "string"
                        },
                        "ai_score": {
                          "title": "Ai Score",
                          "type": "integer"
                        },
                        "ai_score_detail": {
                          "title": "Ai Score Detail",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "text",
                        "prediction",
                        "ai_score",
                        "ai_score_detail"
                      ],
                      "title": "AiDetectionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "ai_score",
                  "status"
                ],
                "title": "textai_detectionAiDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textai_detectionResponseModel",
        "type": "object"
      },
      "textanonymizationAnonymizationDataClass": {
        "properties": {
          "result": {
            "title": "Result",
            "type": "string"
          },
          "entities": {
            "items": {
              "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
              "properties": {
                "offset": {
                  "minimum": 0,
                  "title": "Offset",
                  "type": "integer"
                },
                "length": {
                  "exclusiveMinimum": true,
                  "title": "Length",
                  "type": "integer"
                },
                "category": {
                  "description": "This enum are used to categorize the entities extracted from the text.",
                  "enum": [
                    "PersonalInformation",
                    "FinancialInformation",
                    "IdentificationNumbers",
                    "Miscellaneous",
                    "OrganizationInformation",
                    "DateAndTime",
                    "LocationInformation",
                    "Other"
                  ],
                  "title": "CategoryType",
                  "type": "string"
                },
                "subcategory": {
                  "anyOf": [
                    {
                      "enum": [
                        "CreditCard",
                        "CardExpiry",
                        "BankAccountNumber",
                        "BankRoutingNumber",
                        "SwiftCode",
                        "TaxIdentificationNumber"
                      ],
                      "title": "FinancialInformationSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Name",
                        "Age",
                        "Email",
                        "Phone",
                        "PersonType",
                        "Gender"
                      ],
                      "title": "PersonalInformationSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "SocialSecurityNumber",
                        "NationalIdentificationNumber",
                        "NationalHealthService",
                        "ResidentRegistrationNumber",
                        "DriverLicenseNumber",
                        "PassportNumber"
                      ],
                      "title": "IdentificationNumbersSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "URL",
                        "IP",
                        "MAC",
                        "VehicleIdentificationNumber",
                        "LicensePlate",
                        "VoterNumber",
                        "AWSKeys",
                        "AzureKeys",
                        "Password"
                      ],
                      "title": "MiscellaneousSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "CompanyName",
                        "CompanyNumber",
                        "BuisnessNumber"
                      ],
                      "title": "OrganizationSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Date",
                        "Time",
                        "DateTime",
                        "Duration"
                      ],
                      "title": "DateAndTimeSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Address",
                        "Location"
                      ],
                      "title": "LocationInformationSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Other",
                        "Anonymized",
                        "Nerd",
                        "Wsd",
                        "Unknown"
                      ],
                      "title": "OtherSubCategoryType",
                      "type": "string"
                    }
                  ],
                  "title": "Subcategory"
                },
                "original_label": {
                  "minLength": 1,
                  "title": "Original Label",
                  "type": "string"
                },
                "content": {
                  "minLength": 1,
                  "title": "Content",
                  "type": "string"
                },
                "confidence_score": {
                  "maximum": 1,
                  "minimum": 0,
                  "title": "Confidence Score",
                  "type": "integer"
                }
              },
              "required": [
                "offset",
                "length",
                "category",
                "subcategory",
                "original_label",
                "content",
                "confidence_score"
              ],
              "title": "AnonymizationEntity",
              "type": "object"
            },
            "title": "Entities",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "result",
          "status"
        ],
        "title": "textanonymizationAnonymizationDataClass",
        "type": "object"
      },
      "textanonymizationResponseModel": {
        "properties": {
          "oneai": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "entities": {
                    "items": {
                      "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                      "properties": {
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "exclusiveMinimum": true,
                          "title": "Length",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "CreditCard",
                                "CardExpiry",
                                "BankAccountNumber",
                                "BankRoutingNumber",
                                "SwiftCode",
                                "TaxIdentificationNumber"
                              ],
                              "title": "FinancialInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Name",
                                "Age",
                                "Email",
                                "Phone",
                                "PersonType",
                                "Gender"
                              ],
                              "title": "PersonalInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SocialSecurityNumber",
                                "NationalIdentificationNumber",
                                "NationalHealthService",
                                "ResidentRegistrationNumber",
                                "DriverLicenseNumber",
                                "PassportNumber"
                              ],
                              "title": "IdentificationNumbersSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "URL",
                                "IP",
                                "MAC",
                                "VehicleIdentificationNumber",
                                "LicensePlate",
                                "VoterNumber",
                                "AWSKeys",
                                "AzureKeys",
                                "Password"
                              ],
                              "title": "MiscellaneousSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "CompanyName",
                                "CompanyNumber",
                                "BuisnessNumber"
                              ],
                              "title": "OrganizationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Date",
                                "Time",
                                "DateTime",
                                "Duration"
                              ],
                              "title": "DateAndTimeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Address",
                                "Location"
                              ],
                              "title": "LocationInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "original_label": {
                          "minLength": 1,
                          "title": "Original Label",
                          "type": "string"
                        },
                        "content": {
                          "minLength": 1,
                          "title": "Content",
                          "type": "string"
                        },
                        "confidence_score": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Confidence Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "offset",
                        "length",
                        "category",
                        "subcategory",
                        "original_label",
                        "content",
                        "confidence_score"
                      ],
                      "title": "AnonymizationEntity",
                      "type": "object"
                    },
                    "title": "Entities",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textanonymizationAnonymizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "privateai": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "entities": {
                    "items": {
                      "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                      "properties": {
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "exclusiveMinimum": true,
                          "title": "Length",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "CreditCard",
                                "CardExpiry",
                                "BankAccountNumber",
                                "BankRoutingNumber",
                                "SwiftCode",
                                "TaxIdentificationNumber"
                              ],
                              "title": "FinancialInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Name",
                                "Age",
                                "Email",
                                "Phone",
                                "PersonType",
                                "Gender"
                              ],
                              "title": "PersonalInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SocialSecurityNumber",
                                "NationalIdentificationNumber",
                                "NationalHealthService",
                                "ResidentRegistrationNumber",
                                "DriverLicenseNumber",
                                "PassportNumber"
                              ],
                              "title": "IdentificationNumbersSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "URL",
                                "IP",
                                "MAC",
                                "VehicleIdentificationNumber",
                                "LicensePlate",
                                "VoterNumber",
                                "AWSKeys",
                                "AzureKeys",
                                "Password"
                              ],
                              "title": "MiscellaneousSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "CompanyName",
                                "CompanyNumber",
                                "BuisnessNumber"
                              ],
                              "title": "OrganizationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Date",
                                "Time",
                                "DateTime",
                                "Duration"
                              ],
                              "title": "DateAndTimeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Address",
                                "Location"
                              ],
                              "title": "LocationInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "original_label": {
                          "minLength": 1,
                          "title": "Original Label",
                          "type": "string"
                        },
                        "content": {
                          "minLength": 1,
                          "title": "Content",
                          "type": "string"
                        },
                        "confidence_score": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Confidence Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "offset",
                        "length",
                        "category",
                        "subcategory",
                        "original_label",
                        "content",
                        "confidence_score"
                      ],
                      "title": "AnonymizationEntity",
                      "type": "object"
                    },
                    "title": "Entities",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textanonymizationAnonymizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "emvista": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "entities": {
                    "items": {
                      "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                      "properties": {
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "exclusiveMinimum": true,
                          "title": "Length",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "CreditCard",
                                "CardExpiry",
                                "BankAccountNumber",
                                "BankRoutingNumber",
                                "SwiftCode",
                                "TaxIdentificationNumber"
                              ],
                              "title": "FinancialInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Name",
                                "Age",
                                "Email",
                                "Phone",
                                "PersonType",
                                "Gender"
                              ],
                              "title": "PersonalInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SocialSecurityNumber",
                                "NationalIdentificationNumber",
                                "NationalHealthService",
                                "ResidentRegistrationNumber",
                                "DriverLicenseNumber",
                                "PassportNumber"
                              ],
                              "title": "IdentificationNumbersSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "URL",
                                "IP",
                                "MAC",
                                "VehicleIdentificationNumber",
                                "LicensePlate",
                                "VoterNumber",
                                "AWSKeys",
                                "AzureKeys",
                                "Password"
                              ],
                              "title": "MiscellaneousSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "CompanyName",
                                "CompanyNumber",
                                "BuisnessNumber"
                              ],
                              "title": "OrganizationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Date",
                                "Time",
                                "DateTime",
                                "Duration"
                              ],
                              "title": "DateAndTimeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Address",
                                "Location"
                              ],
                              "title": "LocationInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "original_label": {
                          "minLength": 1,
                          "title": "Original Label",
                          "type": "string"
                        },
                        "content": {
                          "minLength": 1,
                          "title": "Content",
                          "type": "string"
                        },
                        "confidence_score": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Confidence Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "offset",
                        "length",
                        "category",
                        "subcategory",
                        "original_label",
                        "content",
                        "confidence_score"
                      ],
                      "title": "AnonymizationEntity",
                      "type": "object"
                    },
                    "title": "Entities",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textanonymizationAnonymizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "entities": {
                    "items": {
                      "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                      "properties": {
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "exclusiveMinimum": true,
                          "title": "Length",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "CreditCard",
                                "CardExpiry",
                                "BankAccountNumber",
                                "BankRoutingNumber",
                                "SwiftCode",
                                "TaxIdentificationNumber"
                              ],
                              "title": "FinancialInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Name",
                                "Age",
                                "Email",
                                "Phone",
                                "PersonType",
                                "Gender"
                              ],
                              "title": "PersonalInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SocialSecurityNumber",
                                "NationalIdentificationNumber",
                                "NationalHealthService",
                                "ResidentRegistrationNumber",
                                "DriverLicenseNumber",
                                "PassportNumber"
                              ],
                              "title": "IdentificationNumbersSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "URL",
                                "IP",
                                "MAC",
                                "VehicleIdentificationNumber",
                                "LicensePlate",
                                "VoterNumber",
                                "AWSKeys",
                                "AzureKeys",
                                "Password"
                              ],
                              "title": "MiscellaneousSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "CompanyName",
                                "CompanyNumber",
                                "BuisnessNumber"
                              ],
                              "title": "OrganizationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Date",
                                "Time",
                                "DateTime",
                                "Duration"
                              ],
                              "title": "DateAndTimeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Address",
                                "Location"
                              ],
                              "title": "LocationInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "original_label": {
                          "minLength": 1,
                          "title": "Original Label",
                          "type": "string"
                        },
                        "content": {
                          "minLength": 1,
                          "title": "Content",
                          "type": "string"
                        },
                        "confidence_score": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Confidence Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "offset",
                        "length",
                        "category",
                        "subcategory",
                        "original_label",
                        "content",
                        "confidence_score"
                      ],
                      "title": "AnonymizationEntity",
                      "type": "object"
                    },
                    "title": "Entities",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textanonymizationAnonymizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "entities": {
                    "items": {
                      "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                      "properties": {
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "exclusiveMinimum": true,
                          "title": "Length",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "CreditCard",
                                "CardExpiry",
                                "BankAccountNumber",
                                "BankRoutingNumber",
                                "SwiftCode",
                                "TaxIdentificationNumber"
                              ],
                              "title": "FinancialInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Name",
                                "Age",
                                "Email",
                                "Phone",
                                "PersonType",
                                "Gender"
                              ],
                              "title": "PersonalInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SocialSecurityNumber",
                                "NationalIdentificationNumber",
                                "NationalHealthService",
                                "ResidentRegistrationNumber",
                                "DriverLicenseNumber",
                                "PassportNumber"
                              ],
                              "title": "IdentificationNumbersSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "URL",
                                "IP",
                                "MAC",
                                "VehicleIdentificationNumber",
                                "LicensePlate",
                                "VoterNumber",
                                "AWSKeys",
                                "AzureKeys",
                                "Password"
                              ],
                              "title": "MiscellaneousSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "CompanyName",
                                "CompanyNumber",
                                "BuisnessNumber"
                              ],
                              "title": "OrganizationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Date",
                                "Time",
                                "DateTime",
                                "Duration"
                              ],
                              "title": "DateAndTimeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Address",
                                "Location"
                              ],
                              "title": "LocationInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "original_label": {
                          "minLength": 1,
                          "title": "Original Label",
                          "type": "string"
                        },
                        "content": {
                          "minLength": 1,
                          "title": "Content",
                          "type": "string"
                        },
                        "confidence_score": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Confidence Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "offset",
                        "length",
                        "category",
                        "subcategory",
                        "original_label",
                        "content",
                        "confidence_score"
                      ],
                      "title": "AnonymizationEntity",
                      "type": "object"
                    },
                    "title": "Entities",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textanonymizationAnonymizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "entities": {
                    "items": {
                      "description": "This model represents an entity extracted from the text.\n\nAttributes:\n    offset (int): The offset of the entity in the text.\n    length (int): The lenght of the entity in the text.\n    category (CategoryType): The category of the entity.\n    subcategory (SubCategoryType): The subcategory of the entity.\n    original_label (str): The original label of the entity.\n    content (str): The content of the entity.",
                      "properties": {
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "exclusiveMinimum": true,
                          "title": "Length",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "CreditCard",
                                "CardExpiry",
                                "BankAccountNumber",
                                "BankRoutingNumber",
                                "SwiftCode",
                                "TaxIdentificationNumber"
                              ],
                              "title": "FinancialInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Name",
                                "Age",
                                "Email",
                                "Phone",
                                "PersonType",
                                "Gender"
                              ],
                              "title": "PersonalInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SocialSecurityNumber",
                                "NationalIdentificationNumber",
                                "NationalHealthService",
                                "ResidentRegistrationNumber",
                                "DriverLicenseNumber",
                                "PassportNumber"
                              ],
                              "title": "IdentificationNumbersSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "URL",
                                "IP",
                                "MAC",
                                "VehicleIdentificationNumber",
                                "LicensePlate",
                                "VoterNumber",
                                "AWSKeys",
                                "AzureKeys",
                                "Password"
                              ],
                              "title": "MiscellaneousSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "CompanyName",
                                "CompanyNumber",
                                "BuisnessNumber"
                              ],
                              "title": "OrganizationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Date",
                                "Time",
                                "DateTime",
                                "Duration"
                              ],
                              "title": "DateAndTimeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Address",
                                "Location"
                              ],
                              "title": "LocationInformationSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "original_label": {
                          "minLength": 1,
                          "title": "Original Label",
                          "type": "string"
                        },
                        "content": {
                          "minLength": 1,
                          "title": "Content",
                          "type": "string"
                        },
                        "confidence_score": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Confidence Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "offset",
                        "length",
                        "category",
                        "subcategory",
                        "original_label",
                        "content",
                        "confidence_score"
                      ],
                      "title": "AnonymizationEntity",
                      "type": "object"
                    },
                    "title": "Entities",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textanonymizationAnonymizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textanonymizationResponseModel",
        "type": "object"
      },
      "textchatChatDataClass": {
        "properties": {
          "generated_text": {
            "title": "Generated Text",
            "type": "string"
          },
          "message": {
            "items": {
              "properties": {
                "role": {
                  "title": "Role",
                  "type": "string"
                },
                "message": {
                  "default": "",
                  "title": "Message",
                  "type": "string"
                },
                "tools": {
                  "default": null,
                  "description": "Tools defined by the user",
                  "items": {
                    "type": "object"
                  },
                  "title": "Tools",
                  "type": "array"
                },
                "tool_calls": {
                  "default": null,
                  "description": "The tools arguments generated from tools definition and user prompt.",
                  "items": {
                    "properties": {
                      "id": {
                        "title": "Id",
                        "type": "string"
                      },
                      "name": {
                        "title": "Name",
                        "type": "string"
                      },
                      "arguments": {
                        "title": "Arguments",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "arguments"
                    ],
                    "title": "ToolCall",
                    "type": "object"
                  },
                  "title": "Tool Calls",
                  "type": "array"
                }
              },
              "required": [
                "role"
              ],
              "title": "ChatMessageDataClass",
              "type": "object"
            },
            "title": "Message",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "generated_text",
          "status"
        ],
        "title": "textchatChatDataClass",
        "type": "object"
      },
      "textchatChatRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "Start your conversation here..."
          },
          "chatbot_global_action": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "A system message that helps set the behavior of the assistant. For example, 'You are a helpful assistant'."
          },
          "previous_history": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "minLength": 1
                },
                "message": {},
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The name of your tool/function"
                      },
                      "description": {
                        "type": "string"
                      },
                      "parameters": {
                        "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                      }
                    },
                    "required": [
                      "description",
                      "name",
                      "parameters"
                    ]
                  },
                  "nullable": true
                },
                "tool_calls": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "arguments": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": [
                      "arguments",
                      "id",
                      "name"
                    ]
                  },
                  "nullable": true
                }
              },
              "required": [
                "message",
                "role"
              ]
            },
            "description": "A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'role' and 'message'. The 'role' key specifies the role of the speaker and can have the values 'user' or 'assistant'. The 'message' key contains the text of the conversation from the respective role. For example: [{'role': 'user', 'message': 'Hello'}, {'role': 'assistant', 'message': 'Hi, how can I help you?'}, ...]. This format allows easy identification of the speaker's role and their corresponding message."
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "maximum": 2,
            "minimum": 0,
            "default": 0,
            "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 1,
            "default": 1000,
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
          },
          "tool_choice": {
            "allOf": [
              {
                "enum": [
                  "auto",
                  "required",
                  "none"
                ],
                "type": "string",
                "description": "* `auto` - auto\n* `required` - required\n* `none` - none"
              }
            ],
            "default": "auto",
            "description": "`auto`: the model will choose to use tools if needed, `required`: force model to use any of the available tools, `none`: force model to not select a tool\n\n* `auto` - auto\n* `required` - required\n* `none` - none"
          },
          "available_tools": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The name of your tool/function"
                },
                "description": {
                  "type": "string"
                },
                "parameters": {
                  "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                }
              },
              "required": [
                "description",
                "name",
                "parameters"
              ]
            },
            "description": "A list of tools the model may generate the right arguments for."
          },
          "tool_results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1,
                  "description": "the id of the `tool_call` used to generate result"
                },
                "result": {
                  "type": "string",
                  "minLength": 1,
                  "description": "the result of your function"
                }
              },
              "required": [
                "id",
                "result"
              ]
            },
            "description": "List of results obtained from applying the tool_call arguments to your own tool."
          }
        },
        "required": [
          "providers"
        ]
      },
      "textchatChatStreamRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "Start your conversation here..."
          },
          "chatbot_global_action": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "A system message that helps set the behavior of the assistant. For example, 'You are a helpful assistant'."
          },
          "previous_history": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "minLength": 1
                },
                "message": {},
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The name of your tool/function"
                      },
                      "description": {
                        "type": "string"
                      },
                      "parameters": {
                        "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                      }
                    },
                    "required": [
                      "description",
                      "name",
                      "parameters"
                    ]
                  },
                  "nullable": true
                },
                "tool_calls": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "arguments": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": [
                      "arguments",
                      "id",
                      "name"
                    ]
                  },
                  "nullable": true
                }
              },
              "required": [
                "message",
                "role"
              ]
            },
            "description": "A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'role' and 'message'. The 'role' key specifies the role of the speaker and can have the values 'user' or 'assistant'. The 'message' key contains the text of the conversation from the respective role. For example: [{'role': 'user', 'message': 'Hello'}, {'role': 'assistant', 'message': 'Hi, how can I help you?'}, ...]. This format allows easy identification of the speaker's role and their corresponding message."
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "maximum": 2,
            "minimum": 0,
            "default": 0,
            "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 1,
            "default": 1000,
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
          },
          "tool_choice": {
            "allOf": [
              {
                "enum": [
                  "auto",
                  "required",
                  "none"
                ],
                "type": "string",
                "description": "* `auto` - auto\n* `required` - required\n* `none` - none"
              }
            ],
            "default": "auto",
            "description": "`auto`: the model will choose to use tools if needed, `required`: force model to use any of the available tools, `none`: force model to not select a tool\n\n* `auto` - auto\n* `required` - required\n* `none` - none"
          },
          "available_tools": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The name of your tool/function"
                },
                "description": {
                  "type": "string"
                },
                "parameters": {
                  "description": "The tool's parameters are specified using a JSON Schema object. Detailed format documentation is available in the [JSON Schema reference](https://json-schema.org/understanding-json-schema/).\n\n**Make sure to well describe each parameter for best results.**\n\n\nExample for a weather tool:\n\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\"\n          \"description\": \"The geographical location for which weather data is requested.\"\n        },\n        \"unit\": {\n          \"type\": \"string\", \"enum\": [\"Celsius\", \"Fahrenheit\"]\n          \"description\": \"The unit of measurement for temperature.\"\n        }\n      },\n      \"required\": [\"location\"]\n    }\n    "
                }
              },
              "required": [
                "description",
                "name",
                "parameters"
              ]
            },
            "description": "A list of tools the model may generate the right arguments for."
          },
          "tool_results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1,
                  "description": "the id of the `tool_call` used to generate result"
                },
                "result": {
                  "type": "string",
                  "minLength": 1,
                  "description": "the result of your function"
                }
              },
              "required": [
                "id",
                "result"
              ]
            },
            "description": "List of results obtained from applying the tool_call arguments to your own tool."
          },
          "fallback_type": {
            "allOf": [
              {
                "enum": [
                  "rerun",
                  "continue"
                ],
                "type": "string",
                "description": "* `rerun` - Rerun\n* `continue` - Continue"
              }
            ],
            "default": "continue"
          }
        },
        "required": [
          "providers"
        ]
      },
      "textchatResponseModel": {
        "properties": {
          "meta": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "anthropic": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "replicate": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "mistral": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "perplexityai": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "message": {
                    "items": {
                      "properties": {
                        "role": {
                          "title": "Role",
                          "type": "string"
                        },
                        "message": {
                          "default": "",
                          "title": "Message",
                          "type": "string"
                        },
                        "tools": {
                          "default": null,
                          "description": "Tools defined by the user",
                          "items": {
                            "type": "object"
                          },
                          "title": "Tools",
                          "type": "array"
                        },
                        "tool_calls": {
                          "default": null,
                          "description": "The tools arguments generated from tools definition and user prompt.",
                          "items": {
                            "properties": {
                              "id": {
                                "title": "Id",
                                "type": "string"
                              },
                              "name": {
                                "title": "Name",
                                "type": "string"
                              },
                              "arguments": {
                                "title": "Arguments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "arguments"
                            ],
                            "title": "ToolCall",
                            "type": "object"
                          },
                          "title": "Tool Calls",
                          "type": "array"
                        }
                      },
                      "required": [
                        "role"
                      ],
                      "title": "ChatMessageDataClass",
                      "type": "object"
                    },
                    "title": "Message",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textchatChatDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textchatResponseModel",
        "type": "object"
      },
      "textcode_generationCodeGenerationDataClass": {
        "properties": {
          "generated_text": {
            "title": "Generated Text",
            "type": "string"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "generated_text",
          "status"
        ],
        "title": "textcode_generationCodeGenerationDataClass",
        "type": "object"
      },
      "textcode_generationCodeGenerationRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "prompt": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "Entrer the source code that will be used as a context."
          },
          "instruction": {
            "type": "string",
            "minLength": 1,
            "description": "Entrer the instruction you want to be followed."
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "maximum": 1,
            "minimum": 0,
            "default": 0,
            "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 1,
            "default": 1000,
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
          }
        },
        "required": [
          "instruction",
          "providers"
        ]
      },
      "textcode_generationResponseModel": {
        "properties": {
          "google": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textcode_generationCodeGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textcode_generationCodeGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textcode_generationCodeGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textcode_generationResponseModel",
        "type": "object"
      },
      "textcustom_classificationCustomClassificationDataClass": {
        "properties": {
          "classifications": {
            "items": {
              "properties": {
                "input": {
                  "title": "Input",
                  "type": "string"
                },
                "label": {
                  "title": "Label",
                  "type": "string"
                },
                "confidence": {
                  "title": "Confidence",
                  "type": "integer"
                }
              },
              "required": [
                "input",
                "label",
                "confidence"
              ],
              "title": "ItemCustomClassificationDataClass",
              "type": "object"
            },
            "title": "Classifications",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textcustom_classificationCustomClassificationDataClass",
        "type": "object"
      },
      "textcustom_classificationCustomClassificationRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "List of texts to classify"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "List of the labels (classes) you want the texts to be classified as."
          },
          "examples": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            },
            "description": "List of text/label pairs (eg: [['I need help please wire me $1000 right now', 'spam'],]"
          }
        },
        "required": [
          "examples",
          "labels",
          "providers",
          "texts"
        ]
      },
      "textcustom_classificationResponseModel": {
        "properties": {
          "openai": {
            "allOf": [
              {
                "properties": {
                  "classifications": {
                    "items": {
                      "properties": {
                        "input": {
                          "title": "Input",
                          "type": "string"
                        },
                        "label": {
                          "title": "Label",
                          "type": "string"
                        },
                        "confidence": {
                          "title": "Confidence",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "input",
                        "label",
                        "confidence"
                      ],
                      "title": "ItemCustomClassificationDataClass",
                      "type": "object"
                    },
                    "title": "Classifications",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textcustom_classificationCustomClassificationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "classifications": {
                    "items": {
                      "properties": {
                        "input": {
                          "title": "Input",
                          "type": "string"
                        },
                        "label": {
                          "title": "Label",
                          "type": "string"
                        },
                        "confidence": {
                          "title": "Confidence",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "input",
                        "label",
                        "confidence"
                      ],
                      "title": "ItemCustomClassificationDataClass",
                      "type": "object"
                    },
                    "title": "Classifications",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textcustom_classificationCustomClassificationDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textcustom_classificationResponseModel",
        "type": "object"
      },
      "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "entity": {
                  "title": "Entity",
                  "type": "string"
                },
                "category": {
                  "title": "Category",
                  "type": "string"
                }
              },
              "required": [
                "entity",
                "category"
              ],
              "title": "InfosCustomNamedEntityRecognitionDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
        "type": "object"
      },
      "textcustom_named_entity_recognitionCustomNamedEntityRecognitionRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Enter your input text."
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "List of entities (at least two) to extract from your text eg : ['job', 'country'].",
            "minItems": 2
          },
          "examples": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            },
            "description": "List of examples eg : [{'text': 'an input text', 'entities' : [{'entity':'entity_1', 'category':'category_1'}, ...]}, ...]"
          }
        },
        "required": [
          "entities",
          "providers",
          "text"
        ]
      },
      "textcustom_named_entity_recognitionResponseModel": {
        "properties": {
          "openai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        }
                      },
                      "required": [
                        "entity",
                        "category"
                      ],
                      "title": "InfosCustomNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        }
                      },
                      "required": [
                        "entity",
                        "category"
                      ],
                      "title": "InfosCustomNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "eden-ai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        }
                      },
                      "required": [
                        "entity",
                        "category"
                      ],
                      "title": "InfosCustomNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textcustom_named_entity_recognitionResponseModel",
        "type": "object"
      },
      "textembeddingsEmbeddingsDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "embedding": {
                  "items": {
                    "type": "integer"
                  },
                  "title": "Embedding",
                  "type": "array"
                }
              },
              "required": [
                "embedding"
              ],
              "title": "EmbeddingDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textembeddingsEmbeddingsDataClass",
        "type": "object"
      },
      "textembeddingsEmbeddingsRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "List of texts to transform into embeddings."
          }
        },
        "required": [
          "providers",
          "texts"
        ]
      },
      "textembeddingsResponseModel": {
        "properties": {
          "ai21labs": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "embedding": {
                          "items": {
                            "type": "integer"
                          },
                          "title": "Embedding",
                          "type": "array"
                        }
                      },
                      "required": [
                        "embedding"
                      ],
                      "title": "EmbeddingDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textembeddingsEmbeddingsDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "mistral": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "embedding": {
                          "items": {
                            "type": "integer"
                          },
                          "title": "Embedding",
                          "type": "array"
                        }
                      },
                      "required": [
                        "embedding"
                      ],
                      "title": "EmbeddingDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textembeddingsEmbeddingsDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "jina": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "embedding": {
                          "items": {
                            "type": "integer"
                          },
                          "title": "Embedding",
                          "type": "array"
                        }
                      },
                      "required": [
                        "embedding"
                      ],
                      "title": "EmbeddingDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textembeddingsEmbeddingsDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "embedding": {
                          "items": {
                            "type": "integer"
                          },
                          "title": "Embedding",
                          "type": "array"
                        }
                      },
                      "required": [
                        "embedding"
                      ],
                      "title": "EmbeddingDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textembeddingsEmbeddingsDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "embedding": {
                          "items": {
                            "type": "integer"
                          },
                          "title": "Embedding",
                          "type": "array"
                        }
                      },
                      "required": [
                        "embedding"
                      ],
                      "title": "EmbeddingDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textembeddingsEmbeddingsDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "embedding": {
                          "items": {
                            "type": "integer"
                          },
                          "title": "Embedding",
                          "type": "array"
                        }
                      },
                      "required": [
                        "embedding"
                      ],
                      "title": "EmbeddingDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textembeddingsEmbeddingsDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textembeddingsResponseModel",
        "type": "object"
      },
      "textemotion_detectionEmotionDetectionDataClass": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "items": {
            "items": {
              "description": "This class is used in EmotionAnalysisDataClass to list emotion analysed.\nArgs:\n    - emotion (EmotionEnum): emotion of the text\n    - emotion_score (float): score of the emotion",
              "properties": {
                "emotion": {
                  "title": "Emotion",
                  "type": "string"
                },
                "emotion_score": {
                  "maximum": 100,
                  "minimum": 0,
                  "title": "Emotion Score",
                  "type": "integer"
                }
              },
              "required": [
                "emotion",
                "emotion_score"
              ],
              "title": "EmotionItem",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "text",
          "status"
        ],
        "title": "textemotion_detectionEmotionDetectionDataClass",
        "type": "object"
      },
      "textemotion_detectionEmotionDetectionRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text to analyze"
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textemotion_detectionResponseModel": {
        "properties": {
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in EmotionAnalysisDataClass to list emotion analysed.\nArgs:\n    - emotion (EmotionEnum): emotion of the text\n    - emotion_score (float): score of the emotion",
                      "properties": {
                        "emotion": {
                          "title": "Emotion",
                          "type": "string"
                        },
                        "emotion_score": {
                          "maximum": 100,
                          "minimum": 0,
                          "title": "Emotion Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "emotion",
                        "emotion_score"
                      ],
                      "title": "EmotionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textemotion_detectionEmotionDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "vernai": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in EmotionAnalysisDataClass to list emotion analysed.\nArgs:\n    - emotion (EmotionEnum): emotion of the text\n    - emotion_score (float): score of the emotion",
                      "properties": {
                        "emotion": {
                          "title": "Emotion",
                          "type": "string"
                        },
                        "emotion_score": {
                          "maximum": 100,
                          "minimum": 0,
                          "title": "Emotion Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "emotion",
                        "emotion_score"
                      ],
                      "title": "EmotionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textemotion_detectionEmotionDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textemotion_detectionResponseModel",
        "type": "object"
      },
      "textentity_sentimentEntitySentimentDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "type": {
                  "description": "Recognized Entity type",
                  "title": "Type",
                  "type": "string"
                },
                "text": {
                  "description": "Text corresponding to the entity",
                  "title": "Text",
                  "type": "string"
                },
                "sentiment": {
                  "allOf": [
                    {
                      "enum": [
                        "Positive",
                        "Negative",
                        "Neutral",
                        "Mixed"
                      ],
                      "type": "string"
                    }
                  ],
                  "title": "Sentiment"
                },
                "begin_offset": {
                  "default": null,
                  "title": "Begin Offset",
                  "type": "integer"
                },
                "end_offset": {
                  "default": null,
                  "title": "End Offset",
                  "type": "integer"
                }
              },
              "required": [
                "type",
                "text",
                "sentiment"
              ],
              "title": "Entity",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "items",
          "status"
        ],
        "title": "textentity_sentimentEntitySentimentDataClass",
        "type": "object"
      },
      "textentity_sentimentEntitySentimentRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text to analyze"
          },
          "language": {
            "type": "string",
            "nullable": true,
            "description": "Language code for the language the input text is written in (eg: en, fr)."
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textentity_sentimentResponseModel": {
        "properties": {
          "google": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "type": {
                          "description": "Recognized Entity type",
                          "title": "Type",
                          "type": "string"
                        },
                        "text": {
                          "description": "Text corresponding to the entity",
                          "title": "Text",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral",
                                "Mixed"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "begin_offset": {
                          "default": null,
                          "title": "Begin Offset",
                          "type": "integer"
                        },
                        "end_offset": {
                          "default": null,
                          "title": "End Offset",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "type",
                        "text",
                        "sentiment"
                      ],
                      "title": "Entity",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "items",
                  "status"
                ],
                "title": "textentity_sentimentEntitySentimentDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "type": {
                          "description": "Recognized Entity type",
                          "title": "Type",
                          "type": "string"
                        },
                        "text": {
                          "description": "Text corresponding to the entity",
                          "title": "Text",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral",
                                "Mixed"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "begin_offset": {
                          "default": null,
                          "title": "Begin Offset",
                          "type": "integer"
                        },
                        "end_offset": {
                          "default": null,
                          "title": "End Offset",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "type",
                        "text",
                        "sentiment"
                      ],
                      "title": "Entity",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "items",
                  "status"
                ],
                "title": "textentity_sentimentEntitySentimentDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textentity_sentimentResponseModel",
        "type": "object"
      },
      "textgenerationGenerationDataClass": {
        "properties": {
          "generated_text": {
            "title": "Generated Text",
            "type": "string"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "generated_text",
          "status"
        ],
        "title": "textgenerationGenerationDataClass",
        "type": "object"
      },
      "textgenerationGenerationRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Enter your prompt"
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "maximum": 1,
            "minimum": 0,
            "default": 0,
            "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 1,
            "default": 1000,
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length."
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textgenerationResponseModel": {
        "properties": {
          "ai21labs": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "meta": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "anthropic": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "mistral": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "clarifai": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "generated_text": {
                    "title": "Generated Text",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "generated_text",
                  "status"
                ],
                "title": "textgenerationGenerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textgenerationResponseModel",
        "type": "object"
      },
      "textkeyword_extractionKeywordExtractionDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "keyword": {
                  "title": "Keyword",
                  "type": "string"
                },
                "importance": {
                  "title": "Importance",
                  "type": "integer"
                }
              },
              "required": [
                "keyword",
                "importance"
              ],
              "title": "InfosKeywordExtractionDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textkeyword_extractionKeywordExtractionDataClass",
        "type": "object"
      },
      "textkeyword_extractionResponseModel": {
        "properties": {
          "oneai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "emvista": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "ibm": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "corticalio": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "tenstorrent": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "eden-ai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "keyword": {
                          "title": "Keyword",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "keyword",
                        "importance"
                      ],
                      "title": "InfosKeywordExtractionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textkeyword_extractionKeywordExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textkeyword_extractionResponseModel",
        "type": "object"
      },
      "textmoderationModerationDataClass": {
        "properties": {
          "nsfw_likelihood": {
            "title": "Nsfw Likelihood",
            "type": "integer"
          },
          "items": {
            "items": {
              "properties": {
                "label": {
                  "title": "Label",
                  "type": "string"
                },
                "likelihood": {
                  "title": "Likelihood",
                  "type": "integer"
                },
                "category": {
                  "description": "This enum are used to categorize the entities extracted from the text.",
                  "enum": [
                    "PersonalInformation",
                    "FinancialInformation",
                    "IdentificationNumbers",
                    "Miscellaneous",
                    "OrganizationInformation",
                    "DateAndTime",
                    "LocationInformation",
                    "Other"
                  ],
                  "title": "CategoryType",
                  "type": "string"
                },
                "subcategory": {
                  "anyOf": [
                    {
                      "enum": [
                        "Insult",
                        "Obscene",
                        "Derogatory",
                        "Profanity",
                        "Threat",
                        "Toxic"
                      ],
                      "title": "ToxicSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "MiddleFinger",
                        "PublicSafety",
                        "Health",
                        "Explicit",
                        "QRCode",
                        "Medical",
                        "Politics",
                        "Legal"
                      ],
                      "title": "ContentSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "SexualActivity",
                        "SexualSituations",
                        "Nudity",
                        "PartialNudity",
                        "Suggestive",
                        "AdultToys",
                        "RevealingClothes",
                        "Sexual"
                      ],
                      "title": "SexualSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "GraphicViolenceOrGore",
                        "PhysicalViolence",
                        "WeaponViolence",
                        "Violence"
                      ],
                      "title": "ViolenceSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "DrugProducts",
                        "DrugUse",
                        "Tobacco",
                        "Smoking",
                        "Alcohol",
                        "Drinking"
                      ],
                      "title": "DrugAndAlcoholSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Gambling",
                        "Finance",
                        "MoneyContent"
                      ],
                      "title": "FinanceSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Hate",
                        "Harassment",
                        "Threatening",
                        "Extremist",
                        "Racy"
                      ],
                      "title": "HateAndExtremismSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Safe",
                        "NotSafe"
                      ],
                      "title": "SafeSubCategoryType",
                      "type": "string"
                    },
                    {
                      "enum": [
                        "Other",
                        "Anonymized",
                        "Nerd",
                        "Wsd",
                        "Unknown"
                      ],
                      "title": "OtherSubCategoryType",
                      "type": "string"
                    }
                  ],
                  "title": "Subcategory"
                },
                "likelihood_score": {
                  "title": "Likelihood Score",
                  "type": "integer"
                }
              },
              "required": [
                "label",
                "likelihood",
                "category",
                "subcategory",
                "likelihood_score"
              ],
              "title": "TextModerationItem",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "nsfw_likelihood_score": {
            "title": "Nsfw Likelihood Score",
            "type": "integer"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "nsfw_likelihood",
          "nsfw_likelihood_score",
          "status"
        ],
        "title": "textmoderationModerationDataClass",
        "type": "object"
      },
      "textmoderationResponseModel": {
        "properties": {
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "nsfw_likelihood": {
                    "title": "Nsfw Likelihood",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "label": {
                          "title": "Label",
                          "type": "string"
                        },
                        "likelihood": {
                          "title": "Likelihood",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "Insult",
                                "Obscene",
                                "Derogatory",
                                "Profanity",
                                "Threat",
                                "Toxic"
                              ],
                              "title": "ToxicSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "MiddleFinger",
                                "PublicSafety",
                                "Health",
                                "Explicit",
                                "QRCode",
                                "Medical",
                                "Politics",
                                "Legal"
                              ],
                              "title": "ContentSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SexualActivity",
                                "SexualSituations",
                                "Nudity",
                                "PartialNudity",
                                "Suggestive",
                                "AdultToys",
                                "RevealingClothes",
                                "Sexual"
                              ],
                              "title": "SexualSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "GraphicViolenceOrGore",
                                "PhysicalViolence",
                                "WeaponViolence",
                                "Violence"
                              ],
                              "title": "ViolenceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "DrugProducts",
                                "DrugUse",
                                "Tobacco",
                                "Smoking",
                                "Alcohol",
                                "Drinking"
                              ],
                              "title": "DrugAndAlcoholSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Gambling",
                                "Finance",
                                "MoneyContent"
                              ],
                              "title": "FinanceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Hate",
                                "Harassment",
                                "Threatening",
                                "Extremist",
                                "Racy"
                              ],
                              "title": "HateAndExtremismSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Safe",
                                "NotSafe"
                              ],
                              "title": "SafeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "likelihood_score": {
                          "title": "Likelihood Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "label",
                        "likelihood",
                        "category",
                        "subcategory",
                        "likelihood_score"
                      ],
                      "title": "TextModerationItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "nsfw_likelihood_score": {
                    "title": "Nsfw Likelihood Score",
                    "type": "integer"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "nsfw_likelihood",
                  "nsfw_likelihood_score",
                  "status"
                ],
                "title": "textmoderationModerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "nsfw_likelihood": {
                    "title": "Nsfw Likelihood",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "label": {
                          "title": "Label",
                          "type": "string"
                        },
                        "likelihood": {
                          "title": "Likelihood",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "Insult",
                                "Obscene",
                                "Derogatory",
                                "Profanity",
                                "Threat",
                                "Toxic"
                              ],
                              "title": "ToxicSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "MiddleFinger",
                                "PublicSafety",
                                "Health",
                                "Explicit",
                                "QRCode",
                                "Medical",
                                "Politics",
                                "Legal"
                              ],
                              "title": "ContentSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SexualActivity",
                                "SexualSituations",
                                "Nudity",
                                "PartialNudity",
                                "Suggestive",
                                "AdultToys",
                                "RevealingClothes",
                                "Sexual"
                              ],
                              "title": "SexualSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "GraphicViolenceOrGore",
                                "PhysicalViolence",
                                "WeaponViolence",
                                "Violence"
                              ],
                              "title": "ViolenceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "DrugProducts",
                                "DrugUse",
                                "Tobacco",
                                "Smoking",
                                "Alcohol",
                                "Drinking"
                              ],
                              "title": "DrugAndAlcoholSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Gambling",
                                "Finance",
                                "MoneyContent"
                              ],
                              "title": "FinanceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Hate",
                                "Harassment",
                                "Threatening",
                                "Extremist",
                                "Racy"
                              ],
                              "title": "HateAndExtremismSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Safe",
                                "NotSafe"
                              ],
                              "title": "SafeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "likelihood_score": {
                          "title": "Likelihood Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "label",
                        "likelihood",
                        "category",
                        "subcategory",
                        "likelihood_score"
                      ],
                      "title": "TextModerationItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "nsfw_likelihood_score": {
                    "title": "Nsfw Likelihood Score",
                    "type": "integer"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "nsfw_likelihood",
                  "nsfw_likelihood_score",
                  "status"
                ],
                "title": "textmoderationModerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "clarifai": {
            "allOf": [
              {
                "properties": {
                  "nsfw_likelihood": {
                    "title": "Nsfw Likelihood",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "label": {
                          "title": "Label",
                          "type": "string"
                        },
                        "likelihood": {
                          "title": "Likelihood",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "Insult",
                                "Obscene",
                                "Derogatory",
                                "Profanity",
                                "Threat",
                                "Toxic"
                              ],
                              "title": "ToxicSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "MiddleFinger",
                                "PublicSafety",
                                "Health",
                                "Explicit",
                                "QRCode",
                                "Medical",
                                "Politics",
                                "Legal"
                              ],
                              "title": "ContentSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SexualActivity",
                                "SexualSituations",
                                "Nudity",
                                "PartialNudity",
                                "Suggestive",
                                "AdultToys",
                                "RevealingClothes",
                                "Sexual"
                              ],
                              "title": "SexualSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "GraphicViolenceOrGore",
                                "PhysicalViolence",
                                "WeaponViolence",
                                "Violence"
                              ],
                              "title": "ViolenceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "DrugProducts",
                                "DrugUse",
                                "Tobacco",
                                "Smoking",
                                "Alcohol",
                                "Drinking"
                              ],
                              "title": "DrugAndAlcoholSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Gambling",
                                "Finance",
                                "MoneyContent"
                              ],
                              "title": "FinanceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Hate",
                                "Harassment",
                                "Threatening",
                                "Extremist",
                                "Racy"
                              ],
                              "title": "HateAndExtremismSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Safe",
                                "NotSafe"
                              ],
                              "title": "SafeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "likelihood_score": {
                          "title": "Likelihood Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "label",
                        "likelihood",
                        "category",
                        "subcategory",
                        "likelihood_score"
                      ],
                      "title": "TextModerationItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "nsfw_likelihood_score": {
                    "title": "Nsfw Likelihood Score",
                    "type": "integer"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "nsfw_likelihood",
                  "nsfw_likelihood_score",
                  "status"
                ],
                "title": "textmoderationModerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "nsfw_likelihood": {
                    "title": "Nsfw Likelihood",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "label": {
                          "title": "Label",
                          "type": "string"
                        },
                        "likelihood": {
                          "title": "Likelihood",
                          "type": "integer"
                        },
                        "category": {
                          "description": "This enum are used to categorize the entities extracted from the text.",
                          "enum": [
                            "PersonalInformation",
                            "FinancialInformation",
                            "IdentificationNumbers",
                            "Miscellaneous",
                            "OrganizationInformation",
                            "DateAndTime",
                            "LocationInformation",
                            "Other"
                          ],
                          "title": "CategoryType",
                          "type": "string"
                        },
                        "subcategory": {
                          "anyOf": [
                            {
                              "enum": [
                                "Insult",
                                "Obscene",
                                "Derogatory",
                                "Profanity",
                                "Threat",
                                "Toxic"
                              ],
                              "title": "ToxicSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "MiddleFinger",
                                "PublicSafety",
                                "Health",
                                "Explicit",
                                "QRCode",
                                "Medical",
                                "Politics",
                                "Legal"
                              ],
                              "title": "ContentSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "SexualActivity",
                                "SexualSituations",
                                "Nudity",
                                "PartialNudity",
                                "Suggestive",
                                "AdultToys",
                                "RevealingClothes",
                                "Sexual"
                              ],
                              "title": "SexualSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "GraphicViolenceOrGore",
                                "PhysicalViolence",
                                "WeaponViolence",
                                "Violence"
                              ],
                              "title": "ViolenceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "DrugProducts",
                                "DrugUse",
                                "Tobacco",
                                "Smoking",
                                "Alcohol",
                                "Drinking"
                              ],
                              "title": "DrugAndAlcoholSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Gambling",
                                "Finance",
                                "MoneyContent"
                              ],
                              "title": "FinanceSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Hate",
                                "Harassment",
                                "Threatening",
                                "Extremist",
                                "Racy"
                              ],
                              "title": "HateAndExtremismSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Safe",
                                "NotSafe"
                              ],
                              "title": "SafeSubCategoryType",
                              "type": "string"
                            },
                            {
                              "enum": [
                                "Other",
                                "Anonymized",
                                "Nerd",
                                "Wsd",
                                "Unknown"
                              ],
                              "title": "OtherSubCategoryType",
                              "type": "string"
                            }
                          ],
                          "title": "Subcategory"
                        },
                        "likelihood_score": {
                          "title": "Likelihood Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "label",
                        "likelihood",
                        "category",
                        "subcategory",
                        "likelihood_score"
                      ],
                      "title": "TextModerationItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "nsfw_likelihood_score": {
                    "title": "Nsfw Likelihood Score",
                    "type": "integer"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "nsfw_likelihood",
                  "nsfw_likelihood_score",
                  "status"
                ],
                "title": "textmoderationModerationDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textmoderationResponseModel",
        "type": "object"
      },
      "textnamed_entity_recognitionNamedEntityRecognitionDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "entity": {
                  "title": "Entity",
                  "type": "string"
                },
                "category": {
                  "title": "Category",
                  "type": "string"
                },
                "importance": {
                  "title": "Importance",
                  "type": "integer"
                }
              },
              "required": [
                "entity",
                "category",
                "importance"
              ],
              "title": "InfosNamedEntityRecognitionDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
        "type": "object"
      },
      "textnamed_entity_recognitionResponseModel": {
        "properties": {
          "oneai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "lettria": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "ibm": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "neuralspace": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "tenstorrent": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "eden-ai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "entity": {
                          "title": "Entity",
                          "type": "string"
                        },
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "entity",
                        "category",
                        "importance"
                      ],
                      "title": "InfosNamedEntityRecognitionDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textnamed_entity_recognitionNamedEntityRecognitionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textnamed_entity_recognitionResponseModel",
        "type": "object"
      },
      "textplagia_detectionPlagiaDetectionDataClass": {
        "properties": {
          "plagia_score": {
            "title": "Plagia Score",
            "type": "integer"
          },
          "items": {
            "items": {
              "properties": {
                "text": {
                  "title": "Text",
                  "type": "string"
                },
                "candidates": {
                  "items": {
                    "properties": {
                      "url": {
                        "title": "Url",
                        "type": "string"
                      },
                      "plagia_score": {
                        "title": "Plagia Score",
                        "type": "integer"
                      },
                      "prediction": {
                        "title": "Prediction",
                        "type": "string"
                      },
                      "plagiarized_text": {
                        "title": "Plagiarized Text",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "plagia_score",
                      "prediction",
                      "plagiarized_text"
                    ],
                    "title": "PlagiaDetectionCandidate",
                    "type": "object"
                  },
                  "title": "Candidates",
                  "type": "array"
                }
              },
              "required": [
                "text"
              ],
              "title": "PlagiaDetectionItem",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "plagia_score",
          "status"
        ],
        "title": "textplagia_detectionPlagiaDetectionDataClass",
        "type": "object"
      },
      "textplagia_detectionPlagiaDetectionRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "A text content on which a plagiarism detection analysis will be run"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "Content title"
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textplagia_detectionResponseModel": {
        "properties": {
          "winstonai": {
            "allOf": [
              {
                "properties": {
                  "plagia_score": {
                    "title": "Plagia Score",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "candidates": {
                          "items": {
                            "properties": {
                              "url": {
                                "title": "Url",
                                "type": "string"
                              },
                              "plagia_score": {
                                "title": "Plagia Score",
                                "type": "integer"
                              },
                              "prediction": {
                                "title": "Prediction",
                                "type": "string"
                              },
                              "plagiarized_text": {
                                "title": "Plagiarized Text",
                                "type": "string"
                              }
                            },
                            "required": [
                              "url",
                              "plagia_score",
                              "prediction",
                              "plagiarized_text"
                            ],
                            "title": "PlagiaDetectionCandidate",
                            "type": "object"
                          },
                          "title": "Candidates",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text"
                      ],
                      "title": "PlagiaDetectionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "plagia_score",
                  "status"
                ],
                "title": "textplagia_detectionPlagiaDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "originalityai": {
            "allOf": [
              {
                "properties": {
                  "plagia_score": {
                    "title": "Plagia Score",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "candidates": {
                          "items": {
                            "properties": {
                              "url": {
                                "title": "Url",
                                "type": "string"
                              },
                              "plagia_score": {
                                "title": "Plagia Score",
                                "type": "integer"
                              },
                              "prediction": {
                                "title": "Prediction",
                                "type": "string"
                              },
                              "plagiarized_text": {
                                "title": "Plagiarized Text",
                                "type": "string"
                              }
                            },
                            "required": [
                              "url",
                              "plagia_score",
                              "prediction",
                              "plagiarized_text"
                            ],
                            "title": "PlagiaDetectionCandidate",
                            "type": "object"
                          },
                          "title": "Candidates",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text"
                      ],
                      "title": "PlagiaDetectionItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "plagia_score",
                  "status"
                ],
                "title": "textplagia_detectionPlagiaDetectionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textplagia_detectionResponseModel",
        "type": "object"
      },
      "textprompt_optimizationPromptOptimizationDataClass": {
        "properties": {
          "missing_information": {
            "title": "Missing Information",
            "type": "string"
          },
          "items": {
            "items": {
              "properties": {
                "text": {
                  "title": "Text",
                  "type": "string"
                }
              },
              "required": [
                "text"
              ],
              "title": "PromptDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "missing_information",
          "status"
        ],
        "title": "textprompt_optimizationPromptOptimizationDataClass",
        "type": "object"
      },
      "textprompt_optimizationPromptOptimizationRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Description of the desired prompt."
          },
          "target_provider": {
            "type": "string",
            "minLength": 1,
            "description": "Select the provider for the prompt optimization"
          }
        },
        "required": [
          "providers",
          "target_provider",
          "text"
        ]
      },
      "textprompt_optimizationResponseModel": {
        "properties": {
          "openai": {
            "allOf": [
              {
                "properties": {
                  "missing_information": {
                    "title": "Missing Information",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        }
                      },
                      "required": [
                        "text"
                      ],
                      "title": "PromptDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "missing_information",
                  "status"
                ],
                "title": "textprompt_optimizationPromptOptimizationDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textprompt_optimizationResponseModel",
        "type": "object"
      },
      "textquestion_answerQuestionAnswerDataClass": {
        "properties": {
          "answers": {
            "items": {
              "type": "string"
            },
            "title": "Answers",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textquestion_answerQuestionAnswerDataClass",
        "type": "object"
      },
      "textquestion_answerQuestionAnswerRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "List of texts to analyze"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "description": "Question about the text content"
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "maximum": 1,
            "minimum": 0,
            "default": 0,
            "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer."
          },
          "examples_context": {
            "type": "string",
            "minLength": 1,
            "description": "example text serving as context"
          },
          "examples": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            },
            "description": "List of question/answer pairs (eg: [['When was Barack Obama elected president?', 'in 2009.'],]"
          }
        },
        "required": [
          "examples",
          "examples_context",
          "providers",
          "question",
          "texts"
        ]
      },
      "textquestion_answerResponseModel": {
        "properties": {
          "tenstorrent": {
            "allOf": [
              {
                "properties": {
                  "answers": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Answers",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textquestion_answerQuestionAnswerDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "answers": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Answers",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textquestion_answerQuestionAnswerDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "eden-ai": {
            "allOf": [
              {
                "properties": {
                  "answers": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Answers",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textquestion_answerQuestionAnswerDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textquestion_answerResponseModel",
        "type": "object"
      },
      "textsearchResponseModel": {
        "properties": {
          "google": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "object": {
                          "title": "Object",
                          "type": "string"
                        },
                        "document": {
                          "title": "Document",
                          "type": "integer"
                        },
                        "score": {
                          "title": "Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "object",
                        "document",
                        "score"
                      ],
                      "title": "InfosSearchDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsearchSearchDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "object": {
                          "title": "Object",
                          "type": "string"
                        },
                        "document": {
                          "title": "Document",
                          "type": "integer"
                        },
                        "score": {
                          "title": "Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "object",
                        "document",
                        "score"
                      ],
                      "title": "InfosSearchDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsearchSearchDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "object": {
                          "title": "Object",
                          "type": "string"
                        },
                        "document": {
                          "title": "Document",
                          "type": "integer"
                        },
                        "score": {
                          "title": "Score",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "object",
                        "document",
                        "score"
                      ],
                      "title": "InfosSearchDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsearchSearchDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textsearchResponseModel",
        "type": "object"
      },
      "textsearchSearchDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "object": {
                  "title": "Object",
                  "type": "string"
                },
                "document": {
                  "title": "Document",
                  "type": "integer"
                },
                "score": {
                  "title": "Score",
                  "type": "integer"
                }
              },
              "required": [
                "object",
                "document",
                "score"
              ],
              "title": "InfosSearchDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textsearchSearchDataClass",
        "type": "object"
      },
      "textsearchSearchRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "A list of texts to search in.",
            "minItems": 2
          },
          "query": {
            "type": "string",
            "minLength": 1,
            "description": "Your text query."
          },
          "similarity_metric": {
            "allOf": [
              {
                "enum": [
                  "cosine",
                  "manhattan",
                  "euclidean"
                ],
                "type": "string",
                "description": "* `cosine` - cosine\n* `manhattan` - manhattan\n* `euclidean` - euclidean"
              }
            ],
            "default": "cosine",
            "description": "Is used to specify the similarity function that calculates the similarity between embedding vectors when performing text searches. This parameter allows you to customize how text similarity is measured, which can be crucial in various natural language processing tasks such as document retrieval, recommendation systems, and clustering.\n\n* `cosine` - cosine\n* `manhattan` - manhattan\n* `euclidean` - euclidean"
          }
        },
        "required": [
          "providers",
          "query",
          "texts"
        ]
      },
      "textsentiment_analysisResponseModel": {
        "properties": {
          "oneai": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "lettria": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "emvista": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "ibm": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "connexun": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "sapling": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "tenstorrent": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "general_sentiment": {
                    "allOf": [
                      {
                        "enum": [
                          "Positive",
                          "Negative",
                          "Neutral"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "General Sentiment"
                  },
                  "general_sentiment_rate": {
                    "maximum": 1,
                    "minimum": 0,
                    "title": "General Sentiment Rate",
                    "type": "integer"
                  },
                  "items": {
                    "items": {
                      "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
                      "properties": {
                        "segment": {
                          "title": "Segment",
                          "type": "string"
                        },
                        "sentiment": {
                          "allOf": [
                            {
                              "enum": [
                                "Positive",
                                "Negative",
                                "Neutral"
                              ],
                              "type": "string"
                            }
                          ],
                          "title": "Sentiment"
                        },
                        "sentiment_rate": {
                          "maximum": 1,
                          "minimum": 0,
                          "title": "Sentiment Rate",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "segment",
                        "sentiment",
                        "sentiment_rate"
                      ],
                      "title": "SegmentSentimentAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "general_sentiment",
                  "general_sentiment_rate",
                  "status"
                ],
                "title": "textsentiment_analysisSentimentAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textsentiment_analysisResponseModel",
        "type": "object"
      },
      "textsentiment_analysisSentimentAnalysisDataClass": {
        "properties": {
          "general_sentiment": {
            "allOf": [
              {
                "enum": [
                  "Positive",
                  "Negative",
                  "Neutral"
                ],
                "type": "string"
              }
            ],
            "title": "General Sentiment"
          },
          "general_sentiment_rate": {
            "maximum": 1,
            "minimum": 0,
            "title": "General Sentiment Rate",
            "type": "integer"
          },
          "items": {
            "items": {
              "description": "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\nArgs:\n    - segment (str): The segment analyzed\n    - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n    - sentiment_rate (float between 0 and 1): Rate of sentiment",
              "properties": {
                "segment": {
                  "title": "Segment",
                  "type": "string"
                },
                "sentiment": {
                  "allOf": [
                    {
                      "enum": [
                        "Positive",
                        "Negative",
                        "Neutral"
                      ],
                      "type": "string"
                    }
                  ],
                  "title": "Sentiment"
                },
                "sentiment_rate": {
                  "maximum": 1,
                  "minimum": 0,
                  "title": "Sentiment Rate",
                  "type": "integer"
                }
              },
              "required": [
                "segment",
                "sentiment",
                "sentiment_rate"
              ],
              "title": "SegmentSentimentAnalysisDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "general_sentiment",
          "general_sentiment_rate",
          "status"
        ],
        "title": "textsentiment_analysisSentimentAnalysisDataClass",
        "type": "object"
      },
      "textspell_checkResponseModel": {
        "properties": {
          "ai21labs": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "prowritingaid": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "sapling": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "text": {
                    "title": "Text",
                    "type": "string"
                  },
                  "items": {
                    "items": {
                      "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
                      "properties": {
                        "text": {
                          "title": "Text",
                          "type": "string"
                        },
                        "type": {
                          "title": "Type",
                          "type": "string"
                        },
                        "offset": {
                          "minimum": 0,
                          "title": "Offset",
                          "type": "integer"
                        },
                        "length": {
                          "minimum": 0,
                          "title": "Length",
                          "type": "integer"
                        },
                        "suggestions": {
                          "items": {
                            "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                            "properties": {
                              "suggestion": {
                                "title": "Suggestion",
                                "type": "string"
                              },
                              "score": {
                                "maximum": 1,
                                "minimum": 0,
                                "title": "Score",
                                "type": "integer"
                              }
                            },
                            "required": [
                              "suggestion",
                              "score"
                            ],
                            "title": "SuggestionItem",
                            "type": "object"
                          },
                          "title": "Suggestions",
                          "type": "array"
                        }
                      },
                      "required": [
                        "text",
                        "type",
                        "offset",
                        "length"
                      ],
                      "title": "SpellCheckItem",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "text",
                  "status"
                ],
                "title": "textspell_checkSpellCheckDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textspell_checkResponseModel",
        "type": "object"
      },
      "textspell_checkSpellCheckDataClass": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "items": {
            "items": {
              "description": "Represents a spell check item with suggestions.\n\nArgs:\n    text (str): The text to spell check.\n    type (str, optional): The type of the text.\n    offset (int): The offset of the text.\n    length (int): The length of the text.\n    suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\nRaises:\n    ValueError: If the offset or length is not positive.\n\nReturns:\n    SpellCheckItem: An instance of the SpellCheckItem class.",
              "properties": {
                "text": {
                  "title": "Text",
                  "type": "string"
                },
                "type": {
                  "title": "Type",
                  "type": "string"
                },
                "offset": {
                  "minimum": 0,
                  "title": "Offset",
                  "type": "integer"
                },
                "length": {
                  "minimum": 0,
                  "title": "Length",
                  "type": "integer"
                },
                "suggestions": {
                  "items": {
                    "description": "Represents a suggestion for a misspelled word.\n\nArgs:\n    suggestion (str): The suggested text.\n    score (float, optional): The score of the suggested text (between 0 and 1).\n\nRaises:\n    ValueError: If the score is not between 0 and 1.\n\nReturns:\n    SuggestionItem: An instance of the SuggestionItem class.",
                    "properties": {
                      "suggestion": {
                        "title": "Suggestion",
                        "type": "string"
                      },
                      "score": {
                        "maximum": 1,
                        "minimum": 0,
                        "title": "Score",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "suggestion",
                      "score"
                    ],
                    "title": "SuggestionItem",
                    "type": "object"
                  },
                  "title": "Suggestions",
                  "type": "array"
                }
              },
              "required": [
                "text",
                "type",
                "offset",
                "length"
              ],
              "title": "SpellCheckItem",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "text",
          "status"
        ],
        "title": "textspell_checkSpellCheckDataClass",
        "type": "object"
      },
      "textspell_checkSpellCheckRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text to analyze"
          },
          "language": {
            "type": "string",
            "nullable": true,
            "description": "Language code for the language the input text is written in (eg: en, fr)."
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textsummarizeResponseModel": {
        "properties": {
          "ai21labs": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "oneai": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "alephalpha": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "anthropic": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "emvista": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "writesonic": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "microsoft": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "connexun": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "cohere": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "nlpcloud": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "meaningcloud": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "result",
                  "status"
                ],
                "title": "textsummarizeSummarizeDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textsummarizeResponseModel",
        "type": "object"
      },
      "textsummarizeSummarizeDataClass": {
        "properties": {
          "result": {
            "title": "Result",
            "type": "string"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "result",
          "status"
        ],
        "title": "textsummarizeSummarizeDataClass",
        "type": "object"
      },
      "textsummarizeSummarizeRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text to analyze"
          },
          "language": {
            "type": "string",
            "nullable": true,
            "description": "Language code for the language the input text is written in (eg: en, fr)."
          },
          "output_sentences": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          }
        },
        "required": [
          "providers",
          "text"
        ]
      },
      "textsyntax_analysisResponseModel": {
        "properties": {
          "lettria": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "word": {
                          "title": "Word",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        },
                        "tag": {
                          "title": "Tag",
                          "type": "string"
                        },
                        "lemma": {
                          "title": "Lemma",
                          "type": "string"
                        },
                        "others": {
                          "title": "Others",
                          "type": "object"
                        }
                      },
                      "required": [
                        "word",
                        "importance",
                        "tag",
                        "lemma"
                      ],
                      "title": "InfosSyntaxAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "emvista": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "word": {
                          "title": "Word",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        },
                        "tag": {
                          "title": "Tag",
                          "type": "string"
                        },
                        "lemma": {
                          "title": "Lemma",
                          "type": "string"
                        },
                        "others": {
                          "title": "Others",
                          "type": "object"
                        }
                      },
                      "required": [
                        "word",
                        "importance",
                        "tag",
                        "lemma"
                      ],
                      "title": "InfosSyntaxAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "ibm": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "word": {
                          "title": "Word",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        },
                        "tag": {
                          "title": "Tag",
                          "type": "string"
                        },
                        "lemma": {
                          "title": "Lemma",
                          "type": "string"
                        },
                        "others": {
                          "title": "Others",
                          "type": "object"
                        }
                      },
                      "required": [
                        "word",
                        "importance",
                        "tag",
                        "lemma"
                      ],
                      "title": "InfosSyntaxAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "word": {
                          "title": "Word",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        },
                        "tag": {
                          "title": "Tag",
                          "type": "string"
                        },
                        "lemma": {
                          "title": "Lemma",
                          "type": "string"
                        },
                        "others": {
                          "title": "Others",
                          "type": "object"
                        }
                      },
                      "required": [
                        "word",
                        "importance",
                        "tag",
                        "lemma"
                      ],
                      "title": "InfosSyntaxAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "amazon": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "word": {
                          "title": "Word",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        },
                        "tag": {
                          "title": "Tag",
                          "type": "string"
                        },
                        "lemma": {
                          "title": "Lemma",
                          "type": "string"
                        },
                        "others": {
                          "title": "Others",
                          "type": "object"
                        }
                      },
                      "required": [
                        "word",
                        "importance",
                        "tag",
                        "lemma"
                      ],
                      "title": "InfosSyntaxAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "eden-ai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "word": {
                          "title": "Word",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        },
                        "tag": {
                          "title": "Tag",
                          "type": "string"
                        },
                        "lemma": {
                          "title": "Lemma",
                          "type": "string"
                        },
                        "others": {
                          "title": "Others",
                          "type": "object"
                        }
                      },
                      "required": [
                        "word",
                        "importance",
                        "tag",
                        "lemma"
                      ],
                      "title": "InfosSyntaxAnalysisDataClass",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "textsyntax_analysisSyntaxAnalysisDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "textsyntax_analysisResponseModel",
        "type": "object"
      },
      "textsyntax_analysisSyntaxAnalysisDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "word": {
                  "title": "Word",
                  "type": "string"
                },
                "importance": {
                  "title": "Importance",
                  "type": "integer"
                },
                "tag": {
                  "title": "Tag",
                  "type": "string"
                },
                "lemma": {
                  "title": "Lemma",
                  "type": "string"
                },
                "others": {
                  "title": "Others",
                  "type": "object"
                }
              },
              "required": [
                "word",
                "importance",
                "tag",
                "lemma"
              ],
              "title": "InfosSyntaxAnalysisDataClass",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "textsyntax_analysisSyntaxAnalysisDataClass",
        "type": "object"
      },
      "texttopic_extractionResponseModel": {
        "properties": {
          "tenstorrent": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "category",
                        "importance"
                      ],
                      "title": "ExtractedTopic",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "texttopic_extractionTopicExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "google": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "category",
                        "importance"
                      ],
                      "title": "ExtractedTopic",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "texttopic_extractionTopicExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "ibm": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "category",
                        "importance"
                      ],
                      "title": "ExtractedTopic",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "texttopic_extractionTopicExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "openai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "category",
                        "importance"
                      ],
                      "title": "ExtractedTopic",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "texttopic_extractionTopicExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          },
          "eden-ai": {
            "allOf": [
              {
                "properties": {
                  "items": {
                    "items": {
                      "properties": {
                        "category": {
                          "title": "Category",
                          "type": "string"
                        },
                        "importance": {
                          "title": "Importance",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "category",
                        "importance"
                      ],
                      "title": "ExtractedTopic",
                      "type": "object"
                    },
                    "title": "Items",
                    "type": "array"
                  },
                  "original_response": {
                    "default": null,
                    "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
                    "title": "Original Response"
                  },
                  "status": {
                    "allOf": [
                      {
                        "enum": [
                          "sucess",
                          "fail"
                        ],
                        "type": "string"
                      }
                    ],
                    "title": "Status"
                  }
                },
                "required": [
                  "status"
                ],
                "title": "texttopic_extractionTopicExtractionDataClass",
                "type": "object"
              }
            ],
            "default": null
          }
        },
        "title": "texttopic_extractionResponseModel",
        "type": "object"
      },
      "texttopic_extractionTopicExtractionDataClass": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "category": {
                  "title": "Category",
                  "type": "string"
                },
                "importance": {
                  "title": "Importance",
                  "type": "integer"
                }
              },
              "required": [
                "category",
                "importance"
              ],
              "title": "ExtractedTopic",
              "type": "object"
            },
            "title": "Items",
            "type": "array"
          },
          "original_response": {
            "default": null,
            "description": "original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request",
            "title": "Original Response"
          },
          "status": {
            "allOf": [
              {
                "enum": [
                  "sucess",
                  "fail"
                ],
                "type": "string"
              }
            ],
            "title": "Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "texttopic_extractionTopicExtractionDataClass",
        "type": "object"
      },
      "texttopic_extractiontextanonymizationtextmoderationtextnamed_entity_recognitiontextkeyword_extractiontextsyntax_analysistextsentiment_analysisTextAnalysisRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "string",
            "default": {},
            "description": "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\"google\" : \"google_model\", \"ibm\": \"ibm_model\"...}.\n                     "
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.<br>             Providers can also be invoked with specific models (ex: providers: **'amazon/model1, amazon/model2, google/model3'**)"
          },
          "fallback_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
            "maxItems": 5
          },
          "response_as_dict": {
            "type": "boolean",
            "default": true,
            "description": "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>\n                  "
          },
          "attributes_as_list": {
            "type": "boolean",
            "default": false,
            "description": "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}``` "
          },
          "show_base_64": {
            "type": "boolean",
            "default": true
          },
          "show_original_response": {
            "type": "boolean",
            "default": false,
            "description": "Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object."
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Text to analyze"
          },
          "language": {
            "type": "string",
            "nullable": true,
            "description": "Language code for the language the input text is written in (eg: en, fr)."
          }
        },
        "required": [
          "providers",
          "text"
        ]
      }
    },
    "securitySchemes": {
      "FeatureApiAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.edenai.run/v2"
    }
  ]
}